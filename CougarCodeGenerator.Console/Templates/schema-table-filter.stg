
generateFieldFilter(model, field) ::=
<<
private bool _bUse<field.Name>;
private <field.CsharpType> _<field.NameCamelCase><if(field.IsString)> = ""<elseif(field.IsSimpleArray)> = new <field.Type>[0]<endif>;
private <field.CsharpType> _<field.NameCamelCase>Upper<if(field.IsString)> = ""<elseif(field.IsSimpleArray)> = new <field.Type>[0]<endif>;
private FilterType _filterType<field.Name>;
[JsonProperty("Use<field.Name>")]
public bool Use<field.Name> { get => _bUse<field.Name>; set => _bUse<field.Name> = value; }
[JsonProperty("<field.Name>")]
public <field.CsharpType> <field.Name> { get => _<field.NameCamelCase>; set =>  _<field.NameCamelCase> = value; }
[JsonProperty("<field.Name>Upper")]
public <field.CsharpType> <field.Name>Upper { get => _<field.NameCamelCase>Upper; set => _<field.NameCamelCase>Upper = value; }
[JsonProperty("<field.Name>FilterType")]
public FilterType <field.Name>FilterType { get => _filterType<field.Name>; set => _filterType<field.Name> = value; }
[JsonIgnore]
public bool <field.Name>NeedsUpperValue => Use<field.Name> && (<field.Name>FilterType == FilterType.between || <field.Name>FilterType == FilterType.betweenExclusive);
>>

generateFilterFieldQuery(model, field) ::=
<<
private IQueryable\<<model.Name>\> get<field.Name>Query(IQueryable\<<model.Name>\> query, <field.CsharpType> <field.NameCamelCase>, <field.CsharpType> <field.NameCamelCase>Upper, FilterType filterType)
{
    switch(filterType)
    {
        case FilterType.equals:
            return query.Where(<model.TypeCamelCase> => <model.TypeCamelCase>.<field.Name> == <field.NameCamelCase>);
<if(!(field.IsFilterStringType || field.IsBoolean || field.IsArrayType))>
        case FilterType.greaterThan:
            return query.Where(<model.TypeCamelCase> => <model.TypeCamelCase>.<field.Name> > <field.NameCamelCase>);
        case FilterType.greaterThanEquals:
            return query.Where(<model.TypeCamelCase> => <model.TypeCamelCase>.<field.Name> >= <field.NameCamelCase>);
        case FilterType.lessThan:
            return query.Where(<model.TypeCamelCase> => <model.TypeCamelCase>.<field.Name> \< <field.NameCamelCase>);
        case FilterType.lessThanEquals:
            return query.Where(<model.TypeCamelCase> => <model.TypeCamelCase>.<field.Name> \<= <field.NameCamelCase>);
        case FilterType.between:
            return query.Where(<model.TypeCamelCase> => <model.TypeCamelCase>.<field.Name> >= <field.NameCamelCase> && <model.TypeCamelCase>.<field.Name> \<= <field.NameCamelCase>Upper);
        case FilterType.betweenExclusive:
            return query.Where(<model.TypeCamelCase> => <model.TypeCamelCase>.<field.Name> > <field.NameCamelCase> && <model.TypeCamelCase>.<field.Name> \< <field.NameCamelCase>Upper);
<endif>
        default:
            break;
    }
    return query;
}
>>

addFilterQueryForField(field, filterVar, query) ::=
<<
if(<filterVar>.Use<field.Name>)
{
    <query> = get<field.Name>Query(<query>, <filterVar>.<field.Name>, <filterVar>.<field.Name>Upper, <filterVar>.<field.Name>FilterType);
}
>>

generateTableFilterModel(meta, model) ::=
<<
// **** This file is code generated. Do not directly edit ****
// Generated on <meta.GenerationDate>

using CougarDb.Models.Cougar.Tables;
using Newtonsoft.Json;

namespace CougarDb.Filter
{
    public class <model.Name>Query
    {
        public IQueryable\<<model.Name>\> buildQuery(IQueryable\<<model.Name>\> query, <model.Name>Filter filterDef)
        {
            <model.Fields:{field|<addFilterQueryForField(field, "filterDef", "query")>};separator="\n">
            return query;
        }

        <model.Fields:{field|<generateFilterFieldQuery(model, field)>};separator="\n">
    }

    public class <model.Name>Filter
    {
        <model.Fields:{field|<generateFieldFilter(model, field)>};separator="\n">
    }
}

>>

filterFieldStackPanel(field, table, index) ::=
<<
\<StackPanel Grid.Row="<index>" Orientation="Horizontal">
    \<CheckBox Name="_select<field.FieldName>Filter" Checked="_select<field.FieldName>Filter_Checked" Content="<field.FieldName> Filter"/>
    \<ComboBox
        Name="_comboSel<field.FieldName>FilterType"
        Visibility="{x:Bind (x:Boolean)_select<field.FieldName>Filter.IsChecked, Mode=OneWay}"
        ItemsSource="{x:Bind Filter.<field.FieldName>FilterTypeItems}"
        SelectedItem="{x:Bind Filter.<field.FieldName>FilterType, Mode=TwoWay, Converter={StaticResource <if(field.Type.IsNumericType)>IntFilterTypeConverter<elseif(field.Type.IsDateTimeType)>DateTimeFilterTypeConverter<else>StringFilterTypeConverter<endif>}}"
    />
    <if(field.Type.isStringType)>
    \<TextBox
    Name="_<field.FieldNameAsVarName>FilterValue"
    Visibility="{x:Bind (x:Boolean)Filter.Use<field.FieldName>, Mode=OneWay}"
    Text="{x:Bind Filter.<field.FieldName>, Mode=TwoWay }" />
    <elseif(field.Type.IsNumericType)>
    \<NumberBox
    Name="_<field.FieldNameAsVarName>FromFilterValue"
    Visibility="{x:Bind (x:Boolean)Filter.Use<field.FieldName>, Mode=OneWay}"
    Text="{x:Bind Filter.<field.FieldName>, Mode=TwoWay }" />
    \<NumberBox
    Name="_<field.FieldNameAsVarName>ToFilterValue"
    Visibility="{x:Bind (x:Boolean)Filter.<field.FieldName>NeedsUpperValue, Mode=OneWay}"
    Text="{x:Bind Filter.<field.FieldName>Upper, Mode=TwoWay }" />
    <elseif(field.Type.isDateTimeType)>
    \<Button x:Name="btn<field.FieldName>FromDateTime"
        Click="{x:Bind select<field.FieldName>FromDateTime}"
        Visibility="{x:Bind (x:Boolean) Filter.Use<field.FieldName>, Mode=OneWay}"
        Foreground="Green" VerticalAlignment="Center"
        Content="{x:Bind Filter.<field.FieldName>, Mode=OneWay, Converter={StaticResource DateTimeToStringConverter}}"/>
    \<Button x:Name="btn<field.FieldName>ToDateTime"
        Click="{x:Bind select<field.FieldName>ToDateTime}"
        Visibility="{x:Bind (x:Boolean) Filter.<field.FieldName>NeedsUpperValue, Mode=OneWay}"
        Foreground="Black" VerticalAlignment="Center"
        Content="{x:Bind Filter.<field.FieldName>Upper, Mode=OneWay, Converter={StaticResource DateTimeToStringConverter}}"/>
    <endif>
\</StackPanel>
>>

generateTableFilterXaml(namespace, schema, table) ::=
<<
\<UserControl
    x:Class="<namespace>.<table.ClassName>Filter"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:CougarJSQL.UI.Views"
    xmlns:localConverter="using:Cougar.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:convertor="using:CommunityToolkit.WinUI.UI.Converters"
    mc:Ignorable="d">

    \<UserControl.Resources>
        \<localConverter:DateTimeToStringConverter x:Key="DateTimeToStringConverter"/>
        \<localConverter:IntFilterTypeConverter x:Key="IntFilterTypeConverter"/>
        \<localConverter:StringFilterTypeConverter x:Key="StringFilterTypeConverter"/>
        \<localConverter:DateTimeFilterTypeConverter  x:Key="DateTimeFilterTypeConverter"/>
        \<Style x:Key="OkButtonStyle" TargetType="Button">
            \<Setter Property="Foreground" Value="Green" />
        \</Style>
        \<Style x:Key="CancelButtonStyle" TargetType="Button">
            \<Setter Property="Foreground" Value="Red" />
        \</Style>
    \</UserControl.Resources>

    \<Border BorderBrush="{StaticResource ApplicationForegroundThemeBrush}"
            Background="{StaticResource ApplicationPageBackgroundThemeBrush}"
            BorderThickness="2"
            Opacity="1.0" >
        \<Grid >
            \<Grid.RowDefinitions>
                \<RowDefinition Height="Auto" />
                \<RowDefinition Height="*" />
                \<RowDefinition Height="Auto" />
                \<RowDefinition Height="Auto" />
            \</Grid.RowDefinitions>
            \<StackPanel Grid.Row="0" Orientation="Horizontal">
                \<SymbolIcon Symbol="Filter"/>
                \<TextBox Text="<table.ClassName> Filter Definition"/>
            \</StackPanel>
            \<ScrollViewer Grid.Row="1"
                      Height="400" Width="400"
                      HorizontalScrollBarVisibility="Auto"
                      VerticalScrollBarVisibility="Auto">
                \<Grid >
                    \<Grid.RowDefinitions>
                        <table.Fields:{field|\<RowDefinition Height="Auto" />};separator="\n">
                    \</Grid.RowDefinitions>
                    <table.Fields:{field|<filterFieldStackPanel(field, table, i0)>};separator="\n">
                    \<Popup x:Name="popupDialog" Opacity="1.0" >
                        \<local:SelectDateTimeUserControl x:Name="selectDateTime" />
                    \</Popup>
                \</Grid>
            \</ScrollViewer>
            \<StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center">
                \<Button Name="_btnOk"
                        Click="{x:Bind onOK}"
                        IsEnabled="True"
                        FontFamily="Segoe MDL2 Assets"
                        Content="&#xE73E;"
                        Style="{StaticResource OkButtonStyle}"/>

                \<Button Name="_btnClose"
                        Click="{x:Bind onCancel}"
                        FontFamily="Segoe MDL2 Assets"
                        Content="&#xe711;"
                        Style="{StaticResource CancelButtonStyle}"/>

            \</StackPanel>
            \<StackPanel Grid.Row="3" Orientation="Horizontal">
                \<TextBox Name="textFilterAsSQL" Text="{x:Bind Filter.QueryString, Mode=OneWay}" TextWrapping="Wrap"/>
            \</StackPanel>
        \</Grid>
    \</Border>
\</UserControl>

>>

addFieldCodeBehind(field, table) ::=
<<
private void _select<field.FieldName>Filter_Checked(object sender, RoutedEventArgs e)
{
    Filter.Use<field.FieldName> = ((CheckBox)sender).IsChecked.Value;
}

<if(field.Type.IsDateTimeType)>
public bool show<field.FieldName>ToDate => Filter.<field.FieldName>FilterType == FilterType.between || Filter.<field.FieldName>FilterType == FilterType.between_exclusive;
private void select<field.FieldName>FromDateTime(object sender, RoutedEventArgs e)
{
    selectDateTime.SelectedDateTime = Filter.<field.FieldName>;
    if(lastDateTimeHandler != null)
    {
        selectDateTime.PropertyChanged -= lastDateTimeHandler;
    }
    selectDateTime.PropertyChanged += <field.FieldName>FromPropertyChanged;
    lastDateTimeHandler = <field.FieldName>FromPropertyChanged;
    popupDialog.IsOpen = true;
}

public void <field.FieldName>FromPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
{
    Filter.<field.FieldName> = (sender as SelectDateTimeUserControl).SelectedDate;
}


public void <field.FieldName>ToPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
{
    Filter.<field.FieldName>Upper = (sender as SelectDateTimeUserControl).SelectedDate;
}

private void select<field.FieldName>ToDateTime(object sender, RoutedEventArgs e)
{
    selectDateTime.SelectedDateTime = Filter.<field.FieldName>Upper;
    if(lastDateTimeHandler != null)
    {
        selectDateTime.PropertyChanged -= lastDateTimeHandler;
    }
    selectDateTime.PropertyChanged += <field.FieldName>ToPropertyChanged;
    lastDateTimeHandler = <field.FieldName>ToPropertyChanged;
    popupDialog.IsOpen = true;
}
<endif>
>>

generateTableFilterXamlCodeBehind(namespace, schema, table) ::=
<<
// **** This file is code generated. Do not directly edit ****
// Generated on <table.GenerateDate>
// To add custom extensions to the view create a new code behind file and extend the partial class...

using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Navigation;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Cougar.Filters.ViewModel;
using System.ComponentModel;

namespace <namespace>
{
    public sealed partial class <table.ClassName>Filter : UserControl
    {
        // TODO - convert this to DI - ie App.Current.Services.Get\<<table.ClassName>FilterViewModel>().Current

        <table.ClassName>FilterViewModel _filterViewModel;
        <if(table.HasDateTimeField)>PropertyChangedEventHandler lastDateTimeHandler = null;<endif>

        public <table.ClassName>Filter()
        {
            this.InitializeComponent();
            _filterViewModel = new <table.ClassName>FilterViewModel();
        }

        public <table.ClassName>FilterViewModel Filter { get => _filterViewModel; set { _filterViewModel = value; } }
        public string IdFilterType { get; set; }

        public Button OkButton => _btnOk;
        public Button CancelButton => _btnClose;

        <table.Fields:{field|<addFieldCodeBehind(field, table)>};separator="\n">

        private void onOK(object sender, RoutedEventArgs e)
        {
            Popup parentPopup = this.Parent as Popup;
            if (parentPopup != null)
            {
                parentPopup.IsOpen = false;
            }
        }

        private void onCancel(object sender, RoutedEventArgs e)
        {
            Popup parentPopup = this.Parent as Popup;
            if (parentPopup != null)
            {
                parentPopup.IsOpen = false;
            }
        }

    }
}
>>
