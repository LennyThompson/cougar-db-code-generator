callFillerProc(proc) ::=
<<
Task\<int> task<proc> = reportingProcedures.<proc>Async(returnValue);
task<proc>.Wait();
if(task<proc>.Result == 0 || returnValue.Value != 0)
{
    return false;
}
>>

generateStoreMeters(model) ::=
<<
public bool storeCougar<model.NameUpper>Meters()
{
    using (RegulatorreportingContext dbContext = ReportingManager.Manager().Services.GetService\<ContextProviderViewModel>().RegulatorReportingStoredProcedures)
    {
        RegulatorreportingContextProcedures reportingProcedures = new(dbContext);
        OutputParameter\<int> returnValue = new();
        <model.FillerProc:{proc|<callFillerProc(proc)>};separator="\n">
        return true;
    }
}
>>

generateDataFillerViewModel(meta, models) ::=
<<
// This file is code generated - do not edit
// Generated on <meta.GenerationDate>


using Microsoft.Extensions.DependencyInjection;
using RegulatorReportingDB.model.context.storedprocedures;
using RegulatorReportingViewModel.Miscellaneous;

namespace RegulatorReportingViewModel
{
    public class DataFillerViewModel
    {
        <models:{model|<generateStoreMeters(model)>};separator="\n">

    }
}

>>