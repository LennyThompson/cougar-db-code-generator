addPrimaryKeysServiceMethod(model, keys) ::=
<<
Future\<<model.Type>?> <model.TypeCamelCase>ByPrimaryKey(<keys:{key|<key.DartType> <key.NameCamelCase>};separator=", ">) async {
  try {
    var response  = await _read(dioProvider).get('api/<model.Name>/key', queryParameters: { <keys:{key|'<key.NameCamelCase>': <key.NameCamelCase>};separator=", "> });
    return <model.Type>.fromJson(response.data as Map\<String, dynamic>);
  } on DioError catch(error) {
    logErrorResponse(error);
    return null;
  }
}
>>

addLinkTriggerServiceMethod(model, field, trigger) ::=
<<
Future\<List\<<model.Type>\>?> <model.TypeCamelCase>sBy<trigger.Table.Name>_<trigger.Field.Name>(<trigger.Field.DartType> <trigger.Field.NameCamelCase>) async {
  try {
    var response  = await _read(dioProvider).get('api/<model.Type>/<trigger.Table.TypeCamelCase>_<trigger.Field.NameCamelCase>', queryParameters: { '<trigger.Field.NameCamelCase>': <trigger.Field.NameCamelCase> } );
    return List\<<model.Type>\>.from(
        response.data.map\<<model.Type>\>(
            (dynamic member) => <model.Type>.fromJson(member as Map\<String, dynamic>)
     ));
  } on DioError catch(error) {
    logErrorResponse(error);
    return null;
  }
}
>>

addLinkTriggersServiceMethods(model, field) ::=
<<
<field.ExternalLinkTriggers:{trigger|<addLinkTriggerServiceMethod(model, field, trigger)>};separator="\n">
>>

addCustomFilterServiceMethod(model) ::=
<<
Future\<List\<<model.Type>\>?> <model.TypeCamelCase>sByCustomFilter(<model.Type>Filter filter) async {
  try {
    var response  = await _read(dioProvider).post('api/<model.Type>/filter', data: jsonEncode(filter));
    return List\<<model.Type>\>.from(
        response.data.map\<<model.Type>\>(
            (dynamic member) => <model.Type>.fromJson(member as Map\<String, dynamic>)
     ));
  } on DioError catch(error) {
    logErrorResponse(error);
    return null;
  }
}
>>

generateDataProviderType(meta, model) ::=
<<
// This file is code generated - do not edit
// Generated on <meta.GenerationDate>

import 'dart:convert';
import 'package:cougar_db/cougar-db.dart';
import 'package:cougar_db_filter/cougar_db_filter.dart';
import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logging/logging.dart';
import '../dio_provider.dart';


class <model.Name>ApiService{

  <model.Name>ApiService(this._read);

  final Reader _read;
  final Logger logger = Logger('<model.Name>DataService');

  Future\<List\<<model.Type>\>?> all<model.Name>s() async {
    try {
      var response  = await _read(dioProvider).get('api/<model.Name>/all');
      return List\<<model.Type>\>.from(
        response.data.map\<<model.Type>\>(
            (dynamic member) => <model.Type>.fromJson(member as Map\<String, dynamic>)
      ));
    } on DioError catch(error) {
      logErrorResponse(error);
      return null;
    }
  }

  <addCustomFilterServiceMethod(model)>

<if(model.HasPrimaryKey)>
  <addPrimaryKeysServiceMethod(model, model.PrimaryKeys)>
<endif>

<if(model.HasExternalLinkTrigger)>
  <model.ExternalLinkTriggers:{field|<addLinkTriggersServiceMethods(model, field)>};separator="\n">
<endif>

  logErrorResponse(error) {
    if (error.response != null) {
      logger.severe(error.response?.data);
      logger.severe(error.response?.headers);
      logger.severe(error.response?.requestOptions);
    } else {
      // Something happened in setting up or sending the request that triggered an Error
      logger.severe(error.requestOptions);
      logger.severe(error.message);
    }
  }
}

final <model.TypeCamelCase>ApiServiceProvider = Provider((ref) => <model.Name>ApiService(ref.read));

>>
