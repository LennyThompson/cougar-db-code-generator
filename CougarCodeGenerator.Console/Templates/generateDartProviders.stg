addModelInstanceWithPrimaryKeyInit(model) ::=
<%
<if(!model.HasDateTimePrimaryKey)>const <endif><model.Name>(<if(model.HasPrimaryKey)><model.PrimaryKeys:{keyField|<keyField.NameCamelCase>: <keyField.DartDefaultValue>};separator=", "><endif>
%>

addPrimaryKeyStateProvider(model, keyFields) ::=
<<
// This state will update when a primary key is changed, but only by directly changing the state.

class Current<model.Name>ForPrimaryKeyStateProvider extends StateNotifier\<<model.Name>\> {
  Current<model.Name>ForPrimaryKeyStateProvider(this._ref) : super(<addModelInstanceWithPrimaryKeyInit(model)>));

  update(<keyFields:{keyField|<keyField.DartType> <keyField.NameCamelCase>};separator=", ">) {
    state = state.copyWith(<keyFields:{keyField|<keyField.NameCamelCase>: <keyField.NameCamelCase>};separator=", ">);
    _ref.refresh(<model.TypeCamelCase>ByPrimaryFutureProvider);
    _ref.read(<model.TypeCamelCase>ByPrimaryFutureProvider.future)
      .then(
        (value) {
          logger.info('<model.Name> data update for primary key update');
          state = value!;
        }
      );
  }

  final Logger logger = Logger('Current<model.Name>ForPrimaryKeyStateProvider');
  final Ref _ref;
}

final current<model.Name>ForPrimaryKeyStateProvider = StateNotifierProvider\<Current<model.Name>ForPrimaryKeyStateProvider, <model.Name>\>((ref) {
    return Current<model.Name>ForPrimaryKeyStateProvider(ref);
  }
);

>>

addLinkTriggersStateProvider(model, field, trigger) ::=
<<
// This state will update when the external link <trigger.Table.Name> state is updated.

class Current<model.Name>For<trigger.Table.Name>StateProvider extends StateNotifier\<List\<<model.Name>\>> {
  Current<model.Name>For<trigger.Table.Name>StateProvider(this._ref) : super([]);

  // This could be a part of the constructor, but moved to a separate method for fufure flexibility

  update() {
    <trigger.Table.Name> <trigger.Table.TypeCamelCase> = _ref.read(current<trigger.Table.Name>StateProvider);
    if(<trigger.Table.TypeCamelCase>.<trigger.Field.NameCamelCase> != <trigger.Field.DartDefaultValue>) {
      // Commentary...
      // riverpod does not allow providers to change during initialisation. If we used a FutureProvider here we need to
      // refresh or reinitialize the provider to force it to update its future, and this will trigger a riverpod assert.
      // So instead we simply call directly to the api provider.
      _ref.read(<model.TypeCamelCase>ApiServiceProvider).<model.TypeCamelCase>sBy<trigger.Table.Name>_<trigger.Field.Name>(<trigger.Table.TypeCamelCase>.<trigger.Field.NameCamelCase>!)
        .then(
          (list) {
            logger.info('<model.Name> data update for <trigger.Table.Name>.<trigger.Field.Name> link trigger update');
            state = list!;
            if(state.isNotEmpty) {
              logger.info('Setting <model.Name> data as current state value from link trigger on <trigger.Table.Name>');
              _ref.read(current<model.Name>StateProvider.notifier).current = state[0];
            }
          }
        );
    }
  }

  final Logger logger = Logger('Current<model.Name>For<trigger.Table.Name>StateProvider');
  final Ref _ref;
}

final current<model.Name>For<trigger.Table.Name>StateProvider = StateNotifierProvider\<Current<model.Name>For<trigger.Table.Name>StateProvider, List\<<model.Name>\>>((ref) {
    // This watch will trigger an update of the state when the <trigger.Table.Name> external link is updated.
    // Use
    //   ref.watch(current<model.Name>For<trigger.Table.Name>StateProvider);
    // in Widget build to cause a rebuild of a dependent ui widget.

    ref.watch(current<trigger.Table.Name>StateProvider);
    Current<model.Name>For<trigger.Table.Name>StateProvider stateProvider = Current<model.Name>For<trigger.Table.Name>StateProvider(ref);
    stateProvider.update();
    return stateProvider;
  }
);

>>

addLinkTriggersStateProviders(model, field) ::=
<<
<field.ExternalLinkTriggers:{trigger|<addLinkTriggersStateProvider(model, field, trigger)>};separator="\n">
>>

addContextFilterTarget(model, field, filterName) ::=
<<
<if(field.ContextFilterSource.IsDateTime)>
use<field.Name>: contextDateTime.useDateTime,
<field.NameCamelCase>: contextDateTime.dateTime,
<field.NameCamelCase>Upper: contextDateTime.dateTimeUpper,
filterType<field.Name>: contextDateTime.filterType
<else>
use<field.Name>: true,
<field.NameCamelCase>: _ref.read(current<field.ContextFilterSource.NamePascalCase>StateProvider).<field.ContextFilterSource.Field.NameCamelCase>,
<field.NameCamelCaseFilterType>: FilterType.equals
<endif>
>>

addContextTargetGetAll(model) ::=
<<
getAll() {
    _ref.read(<model.TypeCamelCase>ApiServiceProvider).<model.TypeCamelCase>sByCustomFilter(_ref.read(current<model.Name>ContextFilterStateProvider))
    .then(
      (list) {
        logger.info('<model.Name> data update for context update');
        state = list!;
      }
    );
}
>>

generateDartStateProvider(meta, model) ::=
<<
// This file is code generated - do not edit
// Generated on <meta.GenerationDate>

import 'package:cougar_db/cougar-db.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logging/logging.dart';

import '../../providers/cougar-db/<model.TypeSnakeCase>.provider.dart';
import '../../services/api/<model.TypeSnakeCase>.service.dart';

<if(model.HasExternalLinkTrigger)>
<model.ExternalLinkTriggerTypes:{triggerType|import '<triggerType.TypeSnakeCase>.state.dart';};separator="\n">
<endif>
<if(model.HasContextFilterTarget)>
import '../filter/<model.TypeSnakeCase>.filter.state.dart';
<endif>

class <model.Name>StateProvider extends StateNotifier\<List\<<model.Name>\>> {
  <model.Name>StateProvider(this._ref) : super([]) {
    getAll();
  }

<if(model.HasContextFilterTarget)>
  <addContextTargetGetAll(model)>
<else>
  getAll(){
    _ref.read(<model.TypeCamelCase>ApiServiceProvider).all<model.Type>s()
      .then(
        (list) {
          logger.info('<model.Name> data update for all update');
          state = list!;
          if(state.isNotEmpty) {
            logger.info('Setting <model.Name> data as current state value');
            _ref.read(current<model.Name>StateProvider.notifier).current = state[0];
          }
        }
      );
  }
<endif>

  final Logger logger = Logger('<model.Name>StateProvider');
  final Ref _ref;
}

<if(model.HasContextFilterTarget)>
final <model.TypeCamelCase>StateAllProvider = StateNotifierProvider\<<model.Name>StateProvider, List\<<model.Name>\>>((ref) {
    ref.watch(current<model.Name>ContextFilterStateProvider);
    return <model.Name>StateProvider(ref);
  }
);
<else>
final <model.TypeCamelCase>StateAllProvider = StateNotifierProvider\<<model.Name>StateProvider, List\<<model.Name>\>>((ref) => <model.Name>StateProvider(ref));
<endif>

class Current<model.Name>StateProvider extends StateNotifier\<<model.Name>\> {
  Current<model.Name>StateProvider() : super(<addModelInstanceWithPrimaryKeyInit(model)>));

  set current(<model.Name> <model.TypeCamelCase>) {
    logger.info('Current <model.Name> state updated');
    state = <model.TypeCamelCase>;
  }

  final Logger logger = Logger('Current<model.Name>StateProvider');
}

final current<model.Name>StateProvider = StateNotifierProvider\<Current<model.Name>StateProvider, <model.Name>\>((ref) => Current<model.Name>StateProvider());

<if(model.HasPrimaryKey)>
<addPrimaryKeyStateProvider(model, model.PrimaryKeys)>
<endif>

<if(model.HasExternalLinkTrigger)>
<model.ExternalLinkTriggers:{field|<addLinkTriggersStateProviders(model, field)>};separator="\n">
<endif>

>>
