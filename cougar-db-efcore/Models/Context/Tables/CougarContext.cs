// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CougarDb.Models.Cougar.Tables;
using Microsoft.Data.SqlClient;

#nullable disable

namespace CougarDb.Models.Context.Tables
{
    public partial class CougarContext : DbContext
    {
        public CougarContext()
        {
        }

        public CougarContext(DbContextOptions<CougarContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ALHAccountBalanceSummary> ALHAccountBalanceSummary { get; set; }
        public virtual DbSet<ALHTempCardId> ALHTempCardId { get; set; }
        public virtual DbSet<ALHTempPatron> ALHTempPatron { get; set; }
        public virtual DbSet<ALHTempPatronId> ALHTempPatronId { get; set; }
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<AccountBalance> AccountBalance { get; set; }
        public virtual DbSet<AccountPermissionType> AccountPermissionType { get; set; }
        public virtual DbSet<AccountSummary> AccountSummary { get; set; }
        public virtual DbSet<AccountTransactionSummary> AccountTransactionSummary { get; set; }
        public virtual DbSet<AccountTransactionType> AccountTransactionType { get; set; }
        public virtual DbSet<AdMake> AdMake { get; set; }
        public virtual DbSet<AlhSessionId> AlhSessionId { get; set; }
        public virtual DbSet<AtcFilesIn> AtcFilesIn { get; set; }
        public virtual DbSet<AtcFilesOut> AtcFilesOut { get; set; }
        public virtual DbSet<Audit> Audit { get; set; }
        public virtual DbSet<AuditOperation> AuditOperation { get; set; }
        public virtual DbSet<BarrelDrawCriterion> BarrelDrawCriterion { get; set; }
        public virtual DbSet<BarrelDrawLocation> BarrelDrawLocation { get; set; }
        public virtual DbSet<BarrelDrawLog> BarrelDrawLog { get; set; }
        public virtual DbSet<BarrelDrawLogSummary> BarrelDrawLogSummary { get; set; }
        public virtual DbSet<BarrelDrawMessageText> BarrelDrawMessageText { get; set; }
        public virtual DbSet<BarrelDrawPrize> BarrelDrawPrize { get; set; }
        public virtual DbSet<BarrelDrawPromotion> BarrelDrawPromotion { get; set; }
        public virtual DbSet<BarrelDrawTicketEligibility> BarrelDrawTicketEligibility { get; set; }
        public virtual DbSet<BarrelDrawTicketSummary> BarrelDrawTicketSummary { get; set; }
        public virtual DbSet<BarrelDrawWinners> BarrelDrawWinners { get; set; }
        public virtual DbSet<BatchCard> BatchCard { get; set; }
        public virtual DbSet<BatchConfirm> BatchConfirm { get; set; }
        public virtual DbSet<BatchConfirmType> BatchConfirmType { get; set; }
        public virtual DbSet<BetRestriction> BetRestriction { get; set; }
        public virtual DbSet<Campaign> Campaign { get; set; }
        public virtual DbSet<CampaignPatron> CampaignPatron { get; set; }
        public virtual DbSet<Card> Card { get; set; }
        public virtual DbSet<CardAccount> CardAccount { get; set; }
        public virtual DbSet<CardFunctionality> CardFunctionality { get; set; }
        public virtual DbSet<CardLayout> CardLayout { get; set; }
        public virtual DbSet<CardSessionSummary> CardSessionSummary { get; set; }
        public virtual DbSet<CardType> CardType { get; set; }
        public virtual DbSet<CashierDenomination> CashierDenomination { get; set; }
        public virtual DbSet<CashierFloatBalance> CashierFloatBalance { get; set; }
        public virtual DbSet<CashierFloatBalanceDenominations> CashierFloatBalanceDenominations { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<CategoryPagerEvent> CategoryPagerEvent { get; set; }
        public virtual DbSet<CbgAccBalanceVarianceSummary> CbgAccBalanceVarianceSummary { get; set; }
        public virtual DbSet<CbgAccount> CbgAccount { get; set; }
        public virtual DbSet<CbgAccountCashBalance> CbgAccountCashBalance { get; set; }
        public virtual DbSet<CbgAccountCashTransaction> CbgAccountCashTransaction { get; set; }
        public virtual DbSet<CbgAccountCashTransactionSummary> CbgAccountCashTransactionSummary { get; set; }
        public virtual DbSet<CbgAccountCashTransactionType> CbgAccountCashTransactionType { get; set; }
        public virtual DbSet<CbgAccountPatron> CbgAccountPatron { get; set; }
        public virtual DbSet<CbgAccountPin> CbgAccountPin { get; set; }
        public virtual DbSet<CbgAccountQogrLimit> CbgAccountQogrLimit { get; set; }
        public virtual DbSet<CbgAccountType> CbgAccountType { get; set; }
        public virtual DbSet<CbgAudit> CbgAudit { get; set; }
        public virtual DbSet<CbgAuditOperation> CbgAuditOperation { get; set; }
        public virtual DbSet<CbgCardAccount> CbgCardAccount { get; set; }
        public virtual DbSet<CbgInactiveAccounts> CbgInactiveAccounts { get; set; }
        public virtual DbSet<CbgKioskPrefTemplates> CbgKioskPrefTemplates { get; set; }
        public virtual DbSet<CbgMajorWinLossDetail> CbgMajorWinLossDetail { get; set; }
        public virtual DbSet<CbgQogrAccountLimitType> CbgQogrAccountLimitType { get; set; }
        public virtual DbSet<CbgQogrAccountLimits> CbgQogrAccountLimits { get; set; }
        public virtual DbSet<CbgSiteBalanceSummary> CbgSiteBalanceSummary { get; set; }
        public virtual DbSet<ChargeGroup> ChargeGroup { get; set; }
        public virtual DbSet<ChargeGroupMember> ChargeGroupMember { get; set; }
        public virtual DbSet<ChargeItem> ChargeItem { get; set; }
        public virtual DbSet<ChartOfAccounts> ChartOfAccounts { get; set; }
        public virtual DbSet<Cheque> Cheque { get; set; }
        public virtual DbSet<ChequeLevel> ChequeLevel { get; set; }
        public virtual DbSet<CoinCount> CoinCount { get; set; }
        public virtual DbSet<ComponentConfiguration> ComponentConfiguration { get; set; }
        public virtual DbSet<ConfigurationGroup> ConfigurationGroup { get; set; }
        public virtual DbSet<ConfigurationItem> ConfigurationItem { get; set; }
        public virtual DbSet<ConnectPointReconciliation> ConnectPointReconciliation { get; set; }
        public virtual DbSet<ConradAccount> ConradAccount { get; set; }
        public virtual DbSet<ConradCardType> ConradCardType { get; set; }
        public virtual DbSet<ConradHeadcount> ConradHeadcount { get; set; }
        public virtual DbSet<ContactType> ContactType { get; set; }
        public virtual DbSet<ContractRegistration> ContractRegistration { get; set; }
        public virtual DbSet<CougarSystem> CougarSystem { get; set; }
        public virtual DbSet<CountFileType> CountFileType { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<CpiAuditLog> CpiAuditLog { get; set; }
        public virtual DbSet<CssAudit> CssAudit { get; set; }
        public virtual DbSet<CssAuditOperation> CssAuditOperation { get; set; }
        public virtual DbSet<CssConfigurationGroup> CssConfigurationGroup { get; set; }
        public virtual DbSet<CssConfigurationItem> CssConfigurationItem { get; set; }
        public virtual DbSet<CssDevice> CssDevice { get; set; }
        public virtual DbSet<CssEvent> CssEvent { get; set; }
        public virtual DbSet<CssEventType> CssEventType { get; set; }
        public virtual DbSet<CssGameType> CssGameType { get; set; }
        public virtual DbSet<CssSite> CssSite { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<DatabaseVersion> DatabaseVersion { get; set; }
        public virtual DbSet<Databasechangelog> Databasechangelog { get; set; }
        public virtual DbSet<Databasechangeloglock> Databasechangeloglock { get; set; }
        public virtual DbSet<DbPurge> DbPurge { get; set; }
        public virtual DbSet<Denomination> Denomination { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<DeviceHistory> DeviceHistory { get; set; }
        public virtual DbSet<DrawdownDenomination> DrawdownDenomination { get; set; }
        public virtual DbSet<Dummy1> Dummy1 { get; set; }
        public virtual DbSet<EftEndOfDay> EftEndOfDay { get; set; }
        public virtual DbSet<EftEndOfDayGLMappings> EftEndOfDayGLMappings { get; set; }
        public virtual DbSet<EftMiscTransaction> EftMiscTransaction { get; set; }
        public virtual DbSet<EftRejection> EftRejection { get; set; }
        public virtual DbSet<Egm> Egm { get; set; }
        public virtual DbSet<EgmCashlessTransactionSummary> EgmCashlessTransactionSummary { get; set; }
        public virtual DbSet<EgmCashlessTransactionType> EgmCashlessTransactionType { get; set; }
        public virtual DbSet<EgmClearance> EgmClearance { get; set; }
        public virtual DbSet<EgmClearanceConfig> EgmClearanceConfig { get; set; }
        public virtual DbSet<EgmClearanceCurrent> EgmClearanceCurrent { get; set; }
        public virtual DbSet<EgmClearanceEntry> EgmClearanceEntry { get; set; }
        public virtual DbSet<EgmClearanceSummary> EgmClearanceSummary { get; set; }
        public virtual DbSet<EgmConfig> EgmConfig { get; set; }
        public virtual DbSet<EgmDeviceConfiguration> EgmDeviceConfiguration { get; set; }
        public virtual DbSet<EgmDowntime> EgmDowntime { get; set; }
        public virtual DbSet<EgmGame> EgmGame { get; set; }
        public virtual DbSet<EgmGameBetStatistics> EgmGameBetStatistics { get; set; }
        public virtual DbSet<EgmGameConfiguration> EgmGameConfiguration { get; set; }
        public virtual DbSet<EgmGameMetersSummary> EgmGameMetersSummary { get; set; }
        public virtual DbSet<EgmGamePerformanceSummary> EgmGamePerformanceSummary { get; set; }
        public virtual DbSet<EgmMeters> EgmMeters { get; set; }
        public virtual DbSet<EgmMetersLimit> EgmMetersLimit { get; set; }
        public virtual DbSet<EgmMetersSummary> EgmMetersSummary { get; set; }
        public virtual DbSet<EgmNetworkLimit> EgmNetworkLimit { get; set; }
        public virtual DbSet<EgmProtocol> EgmProtocol { get; set; }
        public virtual DbSet<EgmRevenueSummary> EgmRevenueSummary { get; set; }
        public virtual DbSet<EgmServicesLoop> EgmServicesLoop { get; set; }
        public virtual DbSet<EgmTed> EgmTed { get; set; }
        public virtual DbSet<EgmTemplate> EgmTemplate { get; set; }
        public virtual DbSet<EgmTransaction> EgmTransaction { get; set; }
        public virtual DbSet<EgmTransactionHistory> EgmTransactionHistory { get; set; }
        public virtual DbSet<EgmTransactionStatus> EgmTransactionStatus { get; set; }
        public virtual DbSet<EgmTurboWedge> EgmTurboWedge { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EmployeeUsers> EmployeeUsers { get; set; }
        public virtual DbSet<EncodeCard> EncodeCard { get; set; }
        public virtual DbSet<EncodeCardResult> EncodeCardResult { get; set; }
        public virtual DbSet<Equation> Equation { get; set; }
        public virtual DbSet<Event> Event { get; set; }
        public virtual DbSet<EventResponseTimes> EventResponseTimes { get; set; }
        public virtual DbSet<EventType> EventType { get; set; }
        public virtual DbSet<ExchangeRateHistory> ExchangeRateHistory { get; set; }
        public virtual DbSet<ExcludedPatron> ExcludedPatron { get; set; }
        public virtual DbSet<EzyBreakSummary> EzyBreakSummary { get; set; }
        public virtual DbSet<FileDependence> FileDependence { get; set; }
        public virtual DbSet<FileDistribution> FileDistribution { get; set; }
        public virtual DbSet<FileStore> FileStore { get; set; }
        public virtual DbSet<FileStoreUpgrade> FileStoreUpgrade { get; set; }
        public virtual DbSet<FileWorkingSet> FileWorkingSet { get; set; }
        public virtual DbSet<FloorControlLoopConfig> FloorControlLoopConfig { get; set; }
        public virtual DbSet<FloorViewDetail> FloorViewDetail { get; set; }
        public virtual DbSet<FloorViewMaster> FloorViewMaster { get; set; }
        public virtual DbSet<GameMetersSummary> GameMetersSummary { get; set; }
        public virtual DbSet<GameType> GameType { get; set; }
        public virtual DbSet<GameVariation> GameVariation { get; set; }
        public virtual DbSet<Headcount> Headcount { get; set; }
        public virtual DbSet<IGTLicensedSoftware> IGTLicensedSoftware { get; set; }
        public virtual DbSet<IdControl> IdControl { get; set; }
        public virtual DbSet<IdentificationGroup> IdentificationGroup { get; set; }
        public virtual DbSet<IdentificationItem> IdentificationItem { get; set; }
        public virtual DbSet<InternetGamingPlaySummary> InternetGamingPlaySummary { get; set; }
        public virtual DbSet<JackpotDeltasSuspended> JackpotDeltasSuspended { get; set; }
        public virtual DbSet<JackpotEvent> JackpotEvent { get; set; }
        public virtual DbSet<JackpotMetersSummary> JackpotMetersSummary { get; set; }
        public virtual DbSet<JackpotPool> JackpotPool { get; set; }
        public virtual DbSet<JackpotPoolContributions> JackpotPoolContributions { get; set; }
        public virtual DbSet<JackpotPoolDevice> JackpotPoolDevice { get; set; }
        public virtual DbSet<JackpotPoolGroupLevels> JackpotPoolGroupLevels { get; set; }
        public virtual DbSet<JackpotPoolGroupType> JackpotPoolGroupType { get; set; }
        public virtual DbSet<JackpotPoolGroups> JackpotPoolGroups { get; set; }
        public virtual DbSet<JackpotPoolSiteStatus> JackpotPoolSiteStatus { get; set; }
        public virtual DbSet<JackpotPoolSiteStatusHistory> JackpotPoolSiteStatusHistory { get; set; }
        public virtual DbSet<JackpotSummary> JackpotSummary { get; set; }
        public virtual DbSet<JackpotValues> JackpotValues { get; set; }
        public virtual DbSet<JmsTemp> JmsTemp { get; set; }
        public virtual DbSet<Jurisdiction> Jurisdiction { get; set; }
        public virtual DbSet<KenoAgencyReconcile> KenoAgencyReconcile { get; set; }
        public virtual DbSet<KenoPlaySummary> KenoPlaySummary { get; set; }
        public virtual DbSet<KioskTransaction> KioskTransaction { get; set; }
        public virtual DbSet<LegislativeRequirement> LegislativeRequirement { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<LocationMidm> LocationMidm { get; set; }
        public virtual DbSet<LoopDeviceApplication> LoopDeviceApplication { get; set; }
        public virtual DbSet<LoopDeviceMessageText> LoopDeviceMessageText { get; set; }
        public virtual DbSet<LoopDeviceMessageType> LoopDeviceMessageType { get; set; }
        public virtual DbSet<LoopDeviceTypeMapping> LoopDeviceTypeMapping { get; set; }
        public virtual DbSet<LoyaltyUnit> LoyaltyUnit { get; set; }
        public virtual DbSet<LoyaltyUnitType> LoyaltyUnitType { get; set; }
        public virtual DbSet<Manufacturer> Manufacturer { get; set; }
        public virtual DbSet<MasterCard> MasterCard { get; set; }
        public virtual DbSet<MaxChangeGameConfiguration> MaxChangeGameConfiguration { get; set; }
        public virtual DbSet<MaxChangeRequest> MaxChangeRequest { get; set; }
        public virtual DbSet<MaxChangeRequestDetail> MaxChangeRequestDetail { get; set; }
        public virtual DbSet<MaxChangeRequestType> MaxChangeRequestType { get; set; }
        public virtual DbSet<MaxbonusTicket> MaxbonusTicket { get; set; }
        public virtual DbSet<MembershipReceipts> MembershipReceipts { get; set; }
        public virtual DbSet<MembershipType> MembershipType { get; set; }
        public virtual DbSet<MoneyBox> MoneyBox { get; set; }
        public virtual DbSet<NetworkDevice> NetworkDevice { get; set; }
        public virtual DbSet<NetworkDeviceEvent> NetworkDeviceEvent { get; set; }
        public virtual DbSet<NetworkDeviceTransaction> NetworkDeviceTransaction { get; set; }
        public virtual DbSet<NetworkDeviceTransactionType> NetworkDeviceTransactionType { get; set; }
        public virtual DbSet<NetworkDeviceType> NetworkDeviceType { get; set; }
        public virtual DbSet<NoteBuy> NoteBuy { get; set; }
        public virtual DbSet<NoteCount> NoteCount { get; set; }
        public virtual DbSet<Pager> Pager { get; set; }
        public virtual DbSet<PagerCategory> PagerCategory { get; set; }
        public virtual DbSet<PagerEvent> PagerEvent { get; set; }
        public virtual DbSet<PagerRatingGrade> PagerRatingGrade { get; set; }
        public virtual DbSet<PagerTransport> PagerTransport { get; set; }
        public virtual DbSet<PagerZones> PagerZones { get; set; }
        public virtual DbSet<Patron> Patron { get; set; }
        public virtual DbSet<PatronAccount> PatronAccount { get; set; }
        public virtual DbSet<PatronAccountPermission> PatronAccountPermission { get; set; }
        public virtual DbSet<PatronAgeGroup> PatronAgeGroup { get; set; }
        public virtual DbSet<PatronAssociation> PatronAssociation { get; set; }
        public virtual DbSet<PatronBanking> PatronBanking { get; set; }
        public virtual DbSet<PatronComment> PatronComment { get; set; }
        public virtual DbSet<PatronContact> PatronContact { get; set; }
        public virtual DbSet<PatronContactHistory> PatronContactHistory { get; set; }
        public virtual DbSet<PatronExtra> PatronExtra { get; set; }
        public virtual DbSet<PatronExtraType> PatronExtraType { get; set; }
        public virtual DbSet<PatronGroup> PatronGroup { get; set; }
        public virtual DbSet<PatronGroupMember> PatronGroupMember { get; set; }
        public virtual DbSet<PatronIdentification> PatronIdentification { get; set; }
        public virtual DbSet<PatronLastActivity> PatronLastActivity { get; set; }
        public virtual DbSet<PatronMembershipHistory> PatronMembershipHistory { get; set; }
        public virtual DbSet<PatronPreference> PatronPreference { get; set; }
        public virtual DbSet<PatronPreferenceGroup> PatronPreferenceGroup { get; set; }
        public virtual DbSet<PatronPreferenceType> PatronPreferenceType { get; set; }
        public virtual DbSet<PatronRatingHistory> PatronRatingHistory { get; set; }
        public virtual DbSet<Pbcatcol> Pbcatcol { get; set; }
        public virtual DbSet<Pbcatedt> Pbcatedt { get; set; }
        public virtual DbSet<Pbcatfmt> Pbcatfmt { get; set; }
        public virtual DbSet<Pbcattbl> Pbcattbl { get; set; }
        public virtual DbSet<Pbcatvld> Pbcatvld { get; set; }
        public virtual DbSet<PlayerChoiceStatistics> PlayerChoiceStatistics { get; set; }
        public virtual DbSet<PlayerExclusionHostAudit> PlayerExclusionHostAudit { get; set; }
        public virtual DbSet<PlayerExclusionPatronTypes> PlayerExclusionPatronTypes { get; set; }
        public virtual DbSet<PlayerExclusionTransaction> PlayerExclusionTransaction { get; set; }
        public virtual DbSet<PlayerExclusionTransactionType> PlayerExclusionTransactionType { get; set; }
        public virtual DbSet<PlayerExclusionType> PlayerExclusionType { get; set; }
        public virtual DbSet<PointPurgeAudit> PointPurgeAudit { get; set; }
        public virtual DbSet<PointPurgeConfiguration> PointPurgeConfiguration { get; set; }
        public virtual DbSet<PointPurgeDateCriterion> PointPurgeDateCriterion { get; set; }
        public virtual DbSet<PointPurgeMembNoCriterion> PointPurgeMembNoCriterion { get; set; }
        public virtual DbSet<PointPurgeMemberCriterion> PointPurgeMemberCriterion { get; set; }
        public virtual DbSet<PointPurgePatStatusCriterion> PointPurgePatStatusCriterion { get; set; }
        public virtual DbSet<PointPurgeRatingCriterion> PointPurgeRatingCriterion { get; set; }
        public virtual DbSet<PointPurgeTimeframe> PointPurgeTimeframe { get; set; }
        public virtual DbSet<PointsPlayConfiguration> PointsPlayConfiguration { get; set; }
        public virtual DbSet<PointsPlayConfigurationAudit> PointsPlayConfigurationAudit { get; set; }
        public virtual DbSet<PointsPlayDenomination> PointsPlayDenomination { get; set; }
        public virtual DbSet<PointsPlayRatingGrade> PointsPlayRatingGrade { get; set; }
        public virtual DbSet<PointsPlayTrackingType> PointsPlayTrackingType { get; set; }
        public virtual DbSet<PointsPlayTransaction> PointsPlayTransaction { get; set; }
        public virtual DbSet<PortConfiguration> PortConfiguration { get; set; }
        public virtual DbSet<PosTransactionItem> PosTransactionItem { get; set; }
        public virtual DbSet<PosTransactionPayment> PosTransactionPayment { get; set; }
        public virtual DbSet<PosTransactionSale> PosTransactionSale { get; set; }
        public virtual DbSet<PosTransactionTax> PosTransactionTax { get; set; }
        public virtual DbSet<PrizeDraw> PrizeDraw { get; set; }
        public virtual DbSet<QOGRReportDates> QOGRReportDates { get; set; }
        public virtual DbSet<QogrApprovedEgmJackpots> QogrApprovedEgmJackpots { get; set; }
        public virtual DbSet<QogrApprovedTechnician> QogrApprovedTechnician { get; set; }
        public virtual DbSet<QogrDucmsConfig> QogrDucmsConfig { get; set; }
        public virtual DbSet<QogrEgmSeeds> QogrEgmSeeds { get; set; }
        public virtual DbSet<QogrEgmSignatures> QogrEgmSignatures { get; set; }
        public virtual DbSet<QogrEgmSoftwareSet> QogrEgmSoftwareSet { get; set; }
        public virtual DbSet<QogrFilesSent> QogrFilesSent { get; set; }
        public virtual DbSet<QogrHardSoftList> QogrHardSoftList { get; set; }
        public virtual DbSet<QogrHardwareList> QogrHardwareList { get; set; }
        public virtual DbSet<QogrJackpotApproval> QogrJackpotApproval { get; set; }
        public virtual DbSet<QogrJackpotApprovalName> QogrJackpotApprovalName { get; set; }
        public virtual DbSet<QogrReportsBankDeposits> QogrReportsBankDeposits { get; set; }
        public virtual DbSet<QogrSealApproval> QogrSealApproval { get; set; }
        public virtual DbSet<QogrSealApprovalDevice> QogrSealApprovalDevice { get; set; }
        public virtual DbSet<QogrSiteJobRequest> QogrSiteJobRequest { get; set; }
        public virtual DbSet<QogrSoftwareDeno> QogrSoftwareDeno { get; set; }
        public virtual DbSet<QogrSoftwareList> QogrSoftwareList { get; set; }
        public virtual DbSet<Query> Query { get; set; }
        public virtual DbSet<RandomMemberDraw> RandomMemberDraw { get; set; }
        public virtual DbSet<RatingGrade> RatingGrade { get; set; }
        public virtual DbSet<RedemptionItem> RedemptionItem { get; set; }
        public virtual DbSet<RedemptionVoucher> RedemptionVoucher { get; set; }
        public virtual DbSet<ReportUsage> ReportUsage { get; set; }
        public virtual DbSet<ReportsToMaxsys> ReportsToMaxsys { get; set; }
        public virtual DbSet<SecurityApp> SecurityApp { get; set; }
        public virtual DbSet<SecurityApps> SecurityApps { get; set; }
        public virtual DbSet<SecurityGroupings> SecurityGroupings { get; set; }
        public virtual DbSet<SecurityGroupingsUnload> SecurityGroupingsUnload { get; set; }
        public virtual DbSet<SecurityInfo> SecurityInfo { get; set; }
        public virtual DbSet<SecurityInfoUnload> SecurityInfoUnload { get; set; }
        public virtual DbSet<SecurityTemplate> SecurityTemplate { get; set; }
        public virtual DbSet<SecurityUsers> SecurityUsers { get; set; }
        public virtual DbSet<SecurityUsersUnload> SecurityUsersUnload { get; set; }
        public virtual DbSet<Signature> Signature { get; set; }
        public virtual DbSet<SignatureLink> SignatureLink { get; set; }
        public virtual DbSet<SignatureType> SignatureType { get; set; }
        public virtual DbSet<SingleLmoDm0> SingleLmoDm0 { get; set; }
        public virtual DbSet<Site> Site { get; set; }
        public virtual DbSet<SiteDropVariance> SiteDropVariance { get; set; }
        public virtual DbSet<SiteGroupMember> SiteGroupMember { get; set; }
        public virtual DbSet<SiteHostConfiguration> SiteHostConfiguration { get; set; }
        public virtual DbSet<SiteHourlySummary> SiteHourlySummary { get; set; }
        public virtual DbSet<SitePointsConversion> SitePointsConversion { get; set; }
        public virtual DbSet<SjrEgm> SjrEgm { get; set; }
        public virtual DbSet<SjrUgsegms> SjrUgsegms { get; set; }
        public virtual DbSet<SpendRewardCriterion> SpendRewardCriterion { get; set; }
        public virtual DbSet<SpendRewardCriterionAudit> SpendRewardCriterionAudit { get; set; }
        public virtual DbSet<SpendRewardEvent> SpendRewardEvent { get; set; }
        public virtual DbSet<SpendRewardResetTimer> SpendRewardResetTimer { get; set; }
        public virtual DbSet<StateProvince> StateProvince { get; set; }
        public virtual DbSet<SysSiteBatchConfirmType> SysSiteBatchConfirmType { get; set; }
        public virtual DbSet<SystemLegislativeRequirement> SystemLegislativeRequirement { get; set; }
        public virtual DbSet<SystemSite> SystemSite { get; set; }
        public virtual DbSet<SystemSiteTrackingType> SystemSiteTrackingType { get; set; }
        public virtual DbSet<TaxRate> TaxRate { get; set; }
        public virtual DbSet<ThirdPartyEvent> ThirdPartyEvent { get; set; }
        public virtual DbSet<ThirdPartyEventType> ThirdPartyEventType { get; set; }
        public virtual DbSet<ThirdPartyTerminalDevice> ThirdPartyTerminalDevice { get; set; }
        public virtual DbSet<ThirdPartyTerminalType> ThirdPartyTerminalType { get; set; }
        public virtual DbSet<TitoImplementationType> TitoImplementationType { get; set; }
        public virtual DbSet<TitoTicketTransaction> TitoTicketTransaction { get; set; }
        public virtual DbSet<TitoTicketTransactionSummary> TitoTicketTransactionSummary { get; set; }
        public virtual DbSet<TitoTicketTransactionType> TitoTicketTransactionType { get; set; }
        public virtual DbSet<TitoTransactionErrorFound> TitoTransactionErrorFound { get; set; }
        public virtual DbSet<Token> Token { get; set; }
        public virtual DbSet<TrackingTypePermission> TrackingTypePermission { get; set; }
        public virtual DbSet<TransactionLock> TransactionLock { get; set; }
        public virtual DbSet<TransactionLockHistory> TransactionLockHistory { get; set; }
        public virtual DbSet<TurnoverThreshold> TurnoverThreshold { get; set; }
        public virtual DbSet<TurnoverThresholdGroup> TurnoverThresholdGroup { get; set; }
        public virtual DbSet<Vc0Table> Vc0Table { get; set; }
        public virtual DbSet<VoucherConfiguration> VoucherConfiguration { get; set; }
        public virtual DbSet<VoucherSignatureConfig> VoucherSignatureConfig { get; set; }
        public virtual DbSet<VoucherSignatures> VoucherSignatures { get; set; }
        public virtual DbSet<VoucherType> VoucherType { get; set; }
        public virtual DbSet<WaJackpotPool> WaJackpotPool { get; set; }
        public virtual DbSet<WabGroupMember> WabGroupMember { get; set; }
        public virtual DbSet<WinRewardConversion> WinRewardConversion { get; set; }
        public virtual DbSet<WinRewardConversionAudit> WinRewardConversionAudit { get; set; }
        public virtual DbSet<WinRewardCriterion> WinRewardCriterion { get; set; }
        public virtual DbSet<WinRewardCriterionAudit> WinRewardCriterionAudit { get; set; }
        public virtual DbSet<WinRewardEvent> WinRewardEvent { get; set; }
        public virtual DbSet<WorkingSet> WorkingSet { get; set; }
        public virtual DbSet<Zone> Zone { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                //optionsBuilder.UseSqlServer("Data Source=PPDDC0MWDB007DB;Initial Catalog=Cougar;Integrated Security=True");
                SqlConnectionStringBuilder sqlStringBuilder = new SqlConnectionStringBuilder
                {
                    DataSource = "AOAGPPD-CGR-P",
                    IntegratedSecurity = true,
                    InitialCatalog = "Cougar"
                    /*                    ,
                                        UserID = "dba",
                                        Password = "pqxy(!%k"
                    */
                };
                optionsBuilder.UseSqlServer(sqlStringBuilder.ConnectionString);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<ALHAccountBalanceSummary>(entity =>
            {
                entity.HasKey(e => e.StartDatetime)
                    .HasName("ALH_accoun_12091073981");
            });

            modelBuilder.Entity<ALHTempCardId>(entity =>
            {
                entity.HasKey(e => e.CardId)
                    .HasName("ALH_temp_c_9176303621");

                entity.Property(e => e.CardId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ALHTempPatron>(entity =>
            {
                entity.HasKey(e => new { e.PatronId, e.CardId })
                    .HasName("ALH_temp_p_8536301341");
            });

            modelBuilder.Entity<ALHTempPatronId>(entity =>
            {
                entity.HasKey(e => e.PatronId)
                    .HasName("ALH_temp_p_8856302481");
            });

            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.AccountName).IsUnicode(false);

                entity.Property(e => e.CashFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<AccountBalance>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.TrackingTypeId })
                    .HasName("PK_ACCOUNT_BALANCE");
            });

            modelBuilder.Entity<AccountPermissionType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CashFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Require100PointCheck)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<AccountSummary>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.PatronId, e.TrackingTypeId, e.Period })
                    .HasName("PK_ACCOUNT_SUMMARY");
            });

            modelBuilder.Entity<AccountTransactionSummary>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.CardId, e.SummaryLevel, e.StartDatetime, e.TransactionTypeId, e.TrackingTypeId, e.CssSiteId })
                    .HasName("PK_ACCOUNT_TRANSACTION_SUMMARY");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<AccountTransactionType>(entity =>
            {
                entity.Property(e => e.CashFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Sign)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<AdMake>(entity =>
            {
                entity.HasKey(e => new { e.CougarId, e.ActivdataId })
                    .HasName("ad_make_16210730111");

                entity.Property(e => e.Make)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<AlhSessionId>(entity =>
            {
                entity.HasKey(e => new { e.ProcessedDatetime, e.SessionId })
                    .HasName("alh_sessio_12411075121");

                entity.Property(e => e.SessionId).IsUnicode(false);
            });

            modelBuilder.Entity<AtcFilesIn>(entity =>
            {
                entity.HasKey(e => new { e.FileDatetime, e.Increment })
                    .HasName("atc_files__12731076261");

                entity.Property(e => e.Success)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<AtcFilesOut>(entity =>
            {
                entity.HasKey(e => e.FileDatetime)
                    .HasName("atc_files__13051077401");
            });

            modelBuilder.Entity<Audit>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Id })
                    .HasName("PK_AUDIT");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.CommentString).IsUnicode(false);

                entity.Property(e => e.CommentString1).IsUnicode(false);

                entity.Property(e => e.CommentString2).IsUnicode(false);

                entity.Property(e => e.CommentString3).IsUnicode(false);

                entity.Property(e => e.CommentString4).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<AuditOperation>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<BarrelDrawCriterion>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PromotionId, e.Id })
                    .HasName("barrel_dra_11715352571");

                entity.Property(e => e.Criterion).IsUnicode(false);

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BarrelDrawLocation>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PromotionId, e.Id })
                    .HasName("barrel_dra_12035353711");
            });

            modelBuilder.Entity<BarrelDrawLog>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PromotionId, e.TicketNumber })
                    .HasName("barrel_dra_12355354851");

                entity.Property(e => e.Printed)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BarrelDrawLogSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PromotionId, e.StartDatetime, e.PatronCardId, e.PatronId, e.MemberId, e.EgmSerialNumber, e.CriterionId, e.PurgeDatetime })
                    .HasName("barrel_draw_log_summary_pk");
            });

            modelBuilder.Entity<BarrelDrawMessageText>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PromotionId, e.Priority })
                    .HasName("barrel_dra_12675355991");

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MessageText).IsUnicode(false);
            });

            modelBuilder.Entity<BarrelDrawPrize>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PromotionId, e.DrawNumber })
                    .HasName("pk_barrel_draw_prize");

                entity.Property(e => e.PrizeDescription).IsUnicode(false);
            });

            modelBuilder.Entity<BarrelDrawPromotion>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Id })
                    .HasName("barrel_dra_12995357131");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DisplayDetails).IsUnicode(false);

                entity.Property(e => e.DisplayOnKiosk)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DrawMessage).IsUnicode(false);

                entity.Property(e => e.EnableUserReportingFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnabledHalfhoursBitmap)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnabledHoursBitmap)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.KioskPromotionFlag).IsUnicode(false);

                entity.Property(e => e.StateFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VirtualDrawFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BarrelDrawTicketEligibility>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PromotionId })
                    .HasName("pk_barrel_draw_ticket_eligibility");

                entity.Property(e => e.ValidateByBarrelDrawTicketFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidateByEgmActivityFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidateByKioskActivityFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidateByPosActivityFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BarrelDrawTicketSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.BarrelDrawPromotionId, e.PatronId })
                    .HasName("pk_barrel_draw_ticket_summary");
            });

            modelBuilder.Entity<BarrelDrawWinners>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.BarrelDrawPromotionId, e.TicketNumber, e.DrawnDatetime })
                    .HasName("pk_barrel_draw_winners");

                entity.Property(e => e.ClaimedFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prize).IsUnicode(false);

                entity.Property(e => e.PromotionDescription).IsUnicode(false);
            });

            modelBuilder.Entity<BatchCard>(entity =>
            {
                entity.Property(e => e.CardFunctionalityList).IsUnicode(false);

                entity.Property(e => e.DisplayName).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.PinPasswordStatus).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<BatchConfirm>(entity =>
            {
                entity.HasKey(e => new { e.RecordUniqueId, e.SysSiteBatchConfirmTypeId, e.EditDatetime })
                    .HasName("PK_BATCH_CONFIRM");

                entity.Property(e => e.RecordUniqueId).IsUnicode(false);

                entity.Property(e => e.IdentityDescription).IsUnicode(false);

                entity.Property(e => e.NewValue).IsUnicode(false);

                entity.Property(e => e.OldValue).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.UpdateThisSiteOnly)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserIdOne).IsUnicode(false);

                entity.Property(e => e.UserIdTwo).IsUnicode(false);
            });

            modelBuilder.Entity<BatchConfirmType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ColumnName).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.TableName).IsUnicode(false);
            });

            modelBuilder.Entity<BetRestriction>(entity =>
            {
                entity.HasKey(e => new { e.PatronId, e.SystemId, e.CssGameTypeId, e.SummaryLevel })
                    .HasName("bet_restri_12584875621");
            });

            modelBuilder.Entity<Campaign>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.SiteId })
                    .HasName("pk_campaign");

                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.ActiveFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.KioskMessage).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.TicketText).IsUnicode(false);
            });

            modelBuilder.Entity<CampaignPatron>(entity =>
            {
                entity.HasKey(e => new { e.CampaignId, e.PatronId, e.SiteId })
                    .HasName("pk_campaign_patron");

                entity.Property(e => e.CampaignId).IsUnicode(false);

                entity.Property(e => e.RedeemedFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Card>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CardFunctionalityList).IsUnicode(false);

                entity.Property(e => e.DisplayName).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.PinPasswordStatus).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<CardAccount>(entity =>
            {
                entity.HasKey(e => new { e.SystemId, e.CardId })
                    .HasName("PK_CARD_ACCOUNT");
            });

            modelBuilder.Entity<CardFunctionality>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CardLayout>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.CardTypeId, e.ColumnName })
                    .HasName("card_layou_9405824391");

                entity.Property(e => e.ColumnName).IsUnicode(false);

                entity.Property(e => e.ColumnText).IsUnicode(false);

                entity.Property(e => e.OnCard)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TextBold)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CardSessionSummary>(entity =>
            {
                entity.HasKey(e => new { e.SystemId, e.CardId, e.SummaryLevel, e.StartDatetime, e.CssSiteId })
                    .HasName("PK_CARD_session_summary");
            });

            modelBuilder.Entity<CardType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CardFunctionalityList).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CashierDenomination>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CashierFloatBalance>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.StartDatetime })
                    .HasName("pk_cashier_float_balance");

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<CashierFloatBalanceDenominations>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.BalanceDatetime, e.CashierDenominationId })
                    .HasName("pk_cashier_float_balance_denominations");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CategoryPagerEvent>(entity =>
            {
                entity.HasKey(e => new { e.CategoryId, e.PagerEventId })
                    .HasName("PK_CATEGORY_PAGER_EVENT");
            });

            modelBuilder.Entity<CbgAccBalanceVarianceSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.VarianceDatetime, e.CbgAccountId })
                    .HasName("pk_cbg_acc_balance_var_summary");
            });

            modelBuilder.Entity<CbgAccount>(entity =>
            {
                entity.Property(e => e.FirstTimeKioskFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PendingRegistrationFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('ACT')");
            });

            modelBuilder.Entity<CbgAccountCashBalance>(entity =>
            {
                entity.HasKey(e => e.CbgAccountId)
                    .HasName("pk_cbg_account_cash_balance_cbg_account_id");

                entity.Property(e => e.Balance).IsUnicode(false);
            });

            modelBuilder.Entity<CbgAccountCashTransaction>(entity =>
            {
                entity.HasKey(e => new { e.CbgAccountId, e.TransactionDatetime, e.CardId })
                    .HasName("pk_cbg_account_cash_transaction");

                entity.Property(e => e.ChequeNumber).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<CbgAccountCashTransactionSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.SummaryLevel, e.TransactionDatetime, e.CbgAccountCashTransactionTypeId, e.Floor, e.Bank, e.Position, e.Ssan, e.DenominationId })
                    .HasName("pk_cbg_cash_trans_summary");

                entity.Property(e => e.Ssan).IsUnicode(false);
            });

            modelBuilder.Entity<CbgAccountCashTransactionType>(entity =>
            {
                entity.Property(e => e.AccountAction)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Purpose).IsUnicode(false);

                entity.Property(e => e.Sweep)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CbgAccountPatron>(entity =>
            {
                entity.HasKey(e => e.CbgAccountId)
                    .HasName("pk_cbg_account_patron");
            });

            modelBuilder.Entity<CbgAccountPin>(entity =>
            {
                entity.HasKey(e => e.CbgAccountId)
                    .HasName("pk_cbg_account_pin_cbg_account_id");

                entity.Property(e => e.Pin).IsUnicode(false);
            });

            modelBuilder.Entity<CbgAccountQogrLimit>(entity =>
            {
                entity.HasKey(e => new { e.CbgAccountId, e.CbgAccountQogrLimitTypeId })
                    .HasName("pk_cbg_account_qogr_limit");

                entity.Property(e => e.DisplayOnGeminiFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");
            });

            modelBuilder.Entity<CbgAccountType>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CbgAudit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Comment2).IsUnicode(false);

                entity.Property(e => e.Comment3).IsUnicode(false);

                entity.Property(e => e.Comment4).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.SupervisorId).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<CbgAuditOperation>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Amount1Description).IsUnicode(false);

                entity.Property(e => e.Amount1Format).IsUnicode(false);

                entity.Property(e => e.Amount2Description).IsUnicode(false);

                entity.Property(e => e.Amount2Format).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.LogToDatabaseFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReportColor).IsUnicode(false);
            });

            modelBuilder.Entity<CbgCardAccount>(entity =>
            {
                entity.HasKey(e => e.CardId)
                    .HasName("pk_cbg_card_account_card_id");

                entity.Property(e => e.CardId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CbgInactiveAccounts>(entity =>
            {
                entity.Property(e => e.FundsTransferredFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InactiveAccountStatus).IsUnicode(false);

                entity.Property(e => e.TransactionId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<CbgKioskPrefTemplates>(entity =>
            {
                entity.HasKey(e => new { e.CbgQogrAccountLimitTypeId, e.SiteId, e.EditType })
                    .HasName("pk_cbg_kiosk_pref_templates");

                entity.Property(e => e.EditType).IsUnicode(false);

                entity.Property(e => e.Messages).IsUnicode(false);
            });

            modelBuilder.Entity<CbgMajorWinLossDetail>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.SessionDatetime, e.CbgAccountId })
                    .HasName("pk_cbg_major_win_loss_detail");
            });

            modelBuilder.Entity<CbgQogrAccountLimitType>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CbgQogrAccountLimits>(entity =>
            {
                entity.HasKey(e => new { e.CbgQogrAccountLimitTypeId, e.CbgAccountTypeId, e.SiteId })
                    .HasName("pk_cbg_qogr_account_limits");
            });

            modelBuilder.Entity<CbgSiteBalanceSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.BalanceDatetime })
                    .HasName("pk_cbg_site_balance_summary");
            });

            modelBuilder.Entity<ChargeGroup>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<ChargeGroupMember>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ChargeItem>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.ChargeType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EftFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GlCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GroupDescription).IsUnicode(false);

                entity.Property(e => e.GstFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ChartOfAccounts>(entity =>
            {
                entity.HasKey(e => e.GlCode)
                    .HasName("pk_chart_of_accounts");

                entity.Property(e => e.GlCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DeptId)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.GstGlCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Cheque>(entity =>
            {
                entity.Property(e => e.ChequeNumber).IsUnicode(false);

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Comment2).IsUnicode(false);

                entity.Property(e => e.IssuingBody).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<ChequeLevel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CoinCount>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EntryDatetime, e.MoneyBoxNumber })
                    .HasName("pk_coin_count");

                entity.Property(e => e.MoneyBoxNumber).IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CountStatus).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<ComponentConfiguration>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.HostSerialNumber, e.InstanceName })
                    .HasName("PK_FLOOR_CONTROL_CONFIGURATION");

                entity.Property(e => e.InstanceName).IsUnicode(false);

                entity.Property(e => e.DatabaseDependant)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ExecutableName).IsUnicode(false);

                entity.Property(e => e.StartParameters).IsUnicode(false);
            });

            modelBuilder.Entity<ConfigurationGroup>(entity =>
            {
                entity.HasKey(e => new { e.GroupName, e.ItemName })
                    .HasName("PK_CONFIGURATION_GROUP");

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);
            });

            modelBuilder.Entity<ConfigurationItem>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.GroupName, e.ItemName })
                    .HasName("configurat_7290536331");

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.String1).IsUnicode(false);
            });

            modelBuilder.Entity<ConnectPointReconciliation>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);
            });

            modelBuilder.Entity<ConradAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("pk_conrad_accounts");

                entity.Property(e => e.AccountId).ValueGeneratedNever();

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);
            });

            modelBuilder.Entity<ConradCardType>(entity =>
            {
                entity.HasKey(e => e.CardTypeId)
                    .HasName("pk_conrad_card_type");

                entity.Property(e => e.CardTypeId).ValueGeneratedNever();

                entity.Property(e => e.ConradDescription).IsUnicode(false);
            });

            modelBuilder.Entity<ConradHeadcount>(entity =>
            {
                entity.HasKey(e => new { e.EgmSerialNumber, e.SiteId, e.StartDatetime, e.SummaryLevel })
                    .HasName("pk_conrad_headcount");
            });

            modelBuilder.Entity<ContactType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<ContractRegistration>(entity =>
            {
                entity.HasKey(e => new { e.PartiesInContract, e.DateContractStarted })
                    .HasName("PK_CONTRACT_REGISTRATION");

                entity.Property(e => e.PartiesInContract).IsUnicode(false);

                entity.Property(e => e.ContractDescription).IsUnicode(false);
            });

            modelBuilder.Entity<CougarSystem>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ShowGroupOnlyFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CountFileType>(entity =>
            {
                entity.Property(e => e.CoinCountType).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Extension)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteCountType).IsUnicode(false);

                entity.Property(e => e.RowHeading)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Separator).IsUnicode(false);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ActiveFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Detail1).IsUnicode(false);

                entity.Property(e => e.IsoCode).IsUnicode(false);

                entity.Property(e => e.PhonePrefix).IsUnicode(false);
            });

            modelBuilder.Entity<CpiAuditLog>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.TransactionTypeId, e.TransactionDatetime })
                    .HasName("pk_cpi_audit_log");

                entity.Property(e => e.Server).IsUnicode(false);
            });

            modelBuilder.Entity<CssAudit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.CommentString1).IsUnicode(false);

                entity.Property(e => e.CommentString2).IsUnicode(false);

                entity.Property(e => e.CommentString3).IsUnicode(false);

                entity.Property(e => e.CommentString4).IsUnicode(false);

                entity.Property(e => e.CommentString5).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<CssAuditOperation>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.StatementFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CssConfigurationGroup>(entity =>
            {
                entity.HasKey(e => new { e.GroupName, e.ItemName })
                    .HasName("PK_CSS_CONFIGURATION_GROUP");

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);
            });

            modelBuilder.Entity<CssConfigurationItem>(entity =>
            {
                entity.HasKey(e => new { e.SystemId, e.CssSiteId, e.GroupName, e.ItemName })
                    .HasName("PK_CSS_CONFIGURATION_ITEM");

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.String1).IsUnicode(false);
            });

            modelBuilder.Entity<CssDevice>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CssEvent>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<CssEventType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.PagingFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Source).IsUnicode(false);
            });

            modelBuilder.Entity<CssGameType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.GameConfigurationStatus)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CssSite>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.GroupFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Premises).IsUnicode(false);

                entity.Property(e => e.ShowFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ActiveFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.StandardAbbreviation).IsUnicode(false);
            });

            modelBuilder.Entity<DatabaseVersion>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Version })
                    .HasName("database_v_10045826671");

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<Databasechangeloglock>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<DbPurge>(entity =>
            {
                entity.Property(e => e.AdditionalRestrictions).IsUnicode(false);

                entity.Property(e => e.DatetimeName).IsUnicode(false);

                entity.Property(e => e.ForcedIndex).IsUnicode(false);

                entity.Property(e => e.TableName).IsUnicode(false);
            });

            modelBuilder.Entity<Denomination>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Representation).IsUnicode(false);
            });

            modelBuilder.Entity<Device>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Id })
                    .HasName("device_6903097191");

                entity.Property(e => e.Description)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DeviceType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Location)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<DeviceHistory>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("device_his_9461024112")
                    .IsClustered(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.HistoricalComment).IsUnicode(false);

                entity.Property(e => e.HistoricalComment2).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<DrawdownDenomination>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<EftEndOfDay>(entity =>
            {
                entity.HasKey(e => new { e.ChargeItemId, e.SiteId, e.GlCode, e.StartDatetime });

                entity.Property(e => e.GlCode).IsUnicode(false);

                entity.Property(e => e.GroupDescription).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.SweepFrequency)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EftEndOfDayGLMappings>(entity =>
            {
                entity.Property(e => e.FeelineGlCode).IsUnicode(false);

                entity.Property(e => e.FeelineGstGlCode).IsUnicode(false);

                entity.Property(e => e.MaxgamingGlCode).IsUnicode(false);

                entity.Property(e => e.MaxgamingGstGlCode).IsUnicode(false);
            });

            modelBuilder.Entity<EftMiscTransaction>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Id })
                    .HasName("eft_misc_t_16556769461");

                entity.Property(e => e.BankAccountBsb).IsUnicode(false);

                entity.Property(e => e.BankAccountName).IsUnicode(false);

                entity.Property(e => e.BankAccountNumber).IsUnicode(false);

                entity.Property(e => e.Description1).IsUnicode(false);

                entity.Property(e => e.Description2).IsUnicode(false);

                entity.Property(e => e.Description3).IsUnicode(false);

                entity.Property(e => e.Description4).IsUnicode(false);

                entity.Property(e => e.Description5).IsUnicode(false);

                entity.Property(e => e.GlCode).IsUnicode(false);
            });

            modelBuilder.Entity<EftRejection>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.LoggedDate })
                    .HasName("eft_reject_7367216771");

                entity.Property(e => e.Reason).IsUnicode(false);
            });

            modelBuilder.Entity<Egm>(entity =>
            {
                entity.HasKey(e => e.EgmSerialNumber)
                    .HasName("PK_EGM");

                entity.Property(e => e.EgmSerialNumber).ValueGeneratedNever();

                entity.Property(e => e.AuxDisplayDevicePresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill100Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill10Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill20Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill50Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill5Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cabinet).IsUnicode(false);

                entity.Property(e => e.CoinAcceptorPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CurrentState).IsUnicode(false);

                entity.Property(e => e.DenomHotSwitchingEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DownloadableGamesEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EgmMetersLimitType).IsUnicode(false);

                entity.Property(e => e.HopperPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.JtId)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MechanicalMetersPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptorEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptorPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlayerTrackingInstalled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProgramSignatureTimeout).HasDefaultValueSql("(30)");

                entity.Property(e => e.Protocol).IsUnicode(false);

                entity.Property(e => e.ProtocolVersion).IsUnicode(false);

                entity.Property(e => e.SharedProgJackpotsEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoftwareSetAppNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare5).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TicketInDevicePresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TicketPrinterPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TouchScreenPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.ValidNotesFlag).IsUnicode(false);

                entity.Property(e => e.VarHotSwitchingEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Denomination)
                    .WithMany(p => p.Egm)
                    .HasForeignKey(d => d.DenominationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_egm_egm_denom_denomina");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.Egm)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("fk_egm_ref_6539_manufact");

                entity.HasOne(d => d.Token)
                    .WithMany(p => p.Egm)
                    .HasForeignKey(d => d.TokenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_egm_egm_token_token");
            });

            modelBuilder.Entity<EgmCashlessTransactionSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.SummaryLevel, e.TransactionDatetime, e.Floor, e.Bank, e.Position, e.Ssan, e.DenominationId, e.EgmCashlessTransactionTypeId })
                    .HasName("pk_egm_cashless_transaction_summary");

                entity.Property(e => e.Ssan).IsUnicode(false);
            });

            modelBuilder.Entity<EgmCashlessTransactionType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<EgmClearance>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.ClearanceType, e.StartDatetime, e.EgmSerialNumber })
                    .HasName("pk_egm_clearance");

                entity.Property(e => e.ClearanceType).IsUnicode(false);

                entity.Property(e => e.ClearanceStatus).IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.MoneyBoxNumber).IsUnicode(false);
            });

            modelBuilder.Entity<EgmClearanceConfig>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.StartDatetime })
                    .HasName("pk_egm_config");

                entity.Property(e => e.Comments).IsUnicode(false);
            });

            modelBuilder.Entity<EgmClearanceCurrent>(entity =>
            {
                entity.HasKey(e => e.EgmSerialNumber)
                    .HasName("PK_EGM_clearance_current");

                entity.Property(e => e.EgmSerialNumber).ValueGeneratedNever();
            });

            modelBuilder.Entity<EgmClearanceEntry>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EntryDatetime, e.EgmSerialNumber, e.ClearanceType })
                    .HasName("pk_egm_clearance_entry");

                entity.Property(e => e.ClearanceType).IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.EntryType).IsUnicode(false);

                entity.Property(e => e.MoneyBoxNumber).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<EgmClearanceSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.StartDatetime, e.EgmSerialNumber })
                    .HasName("pk_egm_clearance_summary");

                entity.Property(e => e.CoinBoxNumber).IsUnicode(false);

                entity.Property(e => e.CoinComments).IsUnicode(false);

                entity.Property(e => e.CoinCountStatus).IsUnicode(false);

                entity.Property(e => e.CoinHoldStatus).IsUnicode(false);

                entity.Property(e => e.DayComments).IsUnicode(false);

                entity.Property(e => e.DayStatus).IsUnicode(false);

                entity.Property(e => e.NoteBoxNumber).IsUnicode(false);

                entity.Property(e => e.NoteComments).IsUnicode(false);

                entity.Property(e => e.NoteCountStatus).IsUnicode(false);

                entity.Property(e => e.NoteHoldStatus).IsUnicode(false);
            });

            modelBuilder.Entity<EgmConfig>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.StartDatetime })
                    .HasName("pk_egm_config12");

                entity.Property(e => e.Comments).IsUnicode(false);
            });

            modelBuilder.Entity<EgmDeviceConfiguration>(entity =>
            {
                entity.HasKey(e => new { e.EgmSerialNumber, e.DeviceTypeId })
                    .HasName("PK_EGM_DEVICE_LIMIT");

                entity.Property(e => e.ConfigurationString).IsUnicode(false);
            });

            modelBuilder.Entity<EgmDowntime>(entity =>
            {
                entity.HasKey(e => new { e.EgmSerialNumber, e.StartDatetime, e.SiteId, e.SummaryLevel })
                    .HasName("egm_downti_11332470921");
            });

            modelBuilder.Entity<EgmGame>(entity =>
            {
                entity.HasKey(e => new { e.EgmSerialNumber, e.GameNumber })
                    .HasName("PK_EGM_GAME");

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.GameType)
                    .WithMany(p => p.EgmGame)
                    .HasForeignKey(d => d.GameTypeId)
                    .HasConstraintName("fk_game_game_type");

                entity.HasOne(d => d.Jackpot)
                    .WithMany(p => p.EgmGame)
                    .HasForeignKey(d => new { d.JackpotGroupSiteId, d.JackpotPoolGroupId })
                    .HasConstraintName("fk_egm_game_group");
            });

            modelBuilder.Entity<EgmGameBetStatistics>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.ManufacturerId, e.Ssan, e.GameVersionNumber, e.StartDatetime, e.DenominationId })
                    .HasName("PK_EGM_GAME_BET_STAT");

                entity.Property(e => e.BetCountArrayA).IsUnicode(false);

                entity.Property(e => e.BetCountArrayB).IsUnicode(false);
            });

            modelBuilder.Entity<EgmGameConfiguration>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.StartDatetime, e.DenominationId, e.GameVersionNumber, e.Ssan, e.Floor, e.Bank, e.Position })
                    .HasName("pk_egm_game_configuration");
            });

            modelBuilder.Entity<EgmGameMetersSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.DenominationId, e.GameNumber, e.GameVariationNumber, e.SummaryLevel, e.StartDatetime, e.GameVersionNumber, e.SoftwareSetApprovalNumber })
                    .HasName("PK_EGM_GAME_METERS_SUMMARY");

                entity.Property(e => e.GameVersionNumber).HasDefaultValueSql("('0')");

                entity.Property(e => e.SoftwareSetApprovalNumber).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.EgmGameMetersSummary)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_egm_game_ref_6536_site");
            });

            modelBuilder.Entity<EgmGamePerformanceSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.SummaryLevel, e.StartDatetime, e.DenominationId, e.Ssan, e.GameVersionNumber, e.Rtp, e.Floor, e.Bank, e.Position })
                    .HasName("pk_egm_game_performance_summary");
            });

            modelBuilder.Entity<EgmMeters>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Id })
                    .HasName("PK_EGM_METERS");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<EgmMetersLimit>(entity =>
            {
                entity.HasKey(e => e.Type)
                    .HasName("egm_meters_13280598171");

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<EgmMetersSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.SummaryLevel, e.StartDatetime, e.DenominationId, e.Ssan, e.BaseGameVersionNumber, e.EgmConfigurationNumber, e.Floor, e.Bank, e.Position })
                    .HasName("PK_EGM_METERS_SUMMARY");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.EgmMetersSummary)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_egm_mete_ref_6273_site");
            });

            modelBuilder.Entity<EgmNetworkLimit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<EgmProtocol>(entity =>
            {
                entity.HasKey(e => new { e.ProtocolName, e.ProtocolVersion })
                    .HasName("PK_EGM_PROTOCOL");

                entity.Property(e => e.ProtocolName).IsUnicode(false);

                entity.Property(e => e.ProtocolVersion).IsUnicode(false);
            });

            modelBuilder.Entity<EgmRevenueSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.StartDatetime, e.EgmSerialNumber, e.SummaryLevel, e.EgmConfigDatetime })
                    .HasName("pk_egm_revenue_summary");
            });

            modelBuilder.Entity<EgmServicesLoop>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber })
                    .HasName("pk_egm_services_loop");

                entity.Property(e => e.LoopName).IsUnicode(false);
            });

            modelBuilder.Entity<EgmTed>(entity =>
            {
                entity.HasKey(e => new { e.EgmSerialNumber, e.TedNumber })
                    .HasName("pk_egm_ted");

                entity.Property(e => e.Data).IsUnicode(false);
            });

            modelBuilder.Entity<EgmTemplate>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AuxDisplayDevicePresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill100Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill10Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill20Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill50Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill5Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cabinet).IsUnicode(false);

                entity.Property(e => e.CoinAcceptorPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DenomHotSwitchingEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EgmMetersLimitType).IsUnicode(false);

                entity.Property(e => e.HopperPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MechanicalMetersPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptorEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptorPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlayerTrackingInstalled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Protocol).IsUnicode(false);

                entity.Property(e => e.ProtocolVersion).IsUnicode(false);

                entity.Property(e => e.SharedProgJackpotsEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoftwareSetAppNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TicketInDevicePresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TicketPrinterPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TouchScreenPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.ValidNotesFlag).IsUnicode(false);

                entity.Property(e => e.VarHotSwitchingEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EgmTransaction>(entity =>
            {
                entity.HasKey(e => new { e.TransactionDatetime, e.SiteId, e.EgmSerialNumber, e.TicketNumber })
                    .HasName("pk_egm_transaction");

                entity.Property(e => e.AttendantUserId).IsUnicode(false);

                entity.Property(e => e.Cancelled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ChequeNumber).IsUnicode(false);

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Comment2).IsUnicode(false);

                entity.Property(e => e.Comment3).IsUnicode(false);

                entity.Property(e => e.Comment4).IsUnicode(false);

                entity.Property(e => e.Comment5).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.ManuallyCreated)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TransactionStatus).IsUnicode(false);

                entity.Property(e => e.TransactionType).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<EgmTransactionHistory>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.TicketNumber, e.EgmSerialNumber, e.TransactionDatetime, e.LastActionDatetime, e.TransactionStatus })
                    .HasName("PK_EGM_TRANSACTION_HISTORY");

                entity.Property(e => e.TransactionStatus).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);
            });

            modelBuilder.Entity<EgmTransactionStatus>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<EgmTurboWedge>(entity =>
            {
                entity.HasKey(e => e.EgmSerialNumber)
                    .HasName("PK_EGM_TURBO_WEDGE");

                entity.Property(e => e.EgmSerialNumber).ValueGeneratedNever();

                entity.Property(e => e.TocInstanceName).IsUnicode(false);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.HomeTelephone).IsUnicode(false);

                entity.Property(e => e.Identifier).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.LicenceNumber).IsUnicode(false);

                entity.Property(e => e.Locality).IsUnicode(false);

                entity.Property(e => e.MiddleInitial).IsUnicode(false);

                entity.Property(e => e.Mobile).IsUnicode(false);

                entity.Property(e => e.NameTitle).IsUnicode(false);

                entity.Property(e => e.NextOfKin).IsUnicode(false);

                entity.Property(e => e.NextOfKinTelephone).IsUnicode(false);

                entity.Property(e => e.PositionTitle).IsUnicode(false);

                entity.Property(e => e.PostalAddress1).IsUnicode(false);

                entity.Property(e => e.PostalAddress2).IsUnicode(false);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.ResAddress1).IsUnicode(false);

                entity.Property(e => e.ResAddress2).IsUnicode(false);

                entity.Property(e => e.ResCountry).IsUnicode(false);

                entity.Property(e => e.ResLocality).IsUnicode(false);

                entity.Property(e => e.ResPostalCode).IsUnicode(false);

                entity.Property(e => e.ResStateProvince).IsUnicode(false);

                entity.Property(e => e.SecurityUserId).IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StateProvince).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<EmployeeUsers>(entity =>
            {
                entity.HasKey(e => e.UserName)
                    .HasName("PK_EMPLOYEE_USERS");

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.EmployeeType).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.Initials).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.Locality).IsUnicode(false);

                entity.Property(e => e.Mobile).IsUnicode(false);

                entity.Property(e => e.Pager).IsUnicode(false);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.StateProvince).IsUnicode(false);

                entity.Property(e => e.TelephoneHome).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);

                entity.HasOne(d => d.UserNameNavigation)
                    .WithOne(p => p.EmployeeUsers)
                    .HasForeignKey<EmployeeUsers>(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_employee_user_name_security");
            });

            modelBuilder.Entity<EncodeCard>(entity =>
            {
                entity.HasKey(e => e.CardId)
                    .HasName("PK_ENCODE_CARD");

                entity.Property(e => e.CardId).ValueGeneratedNever();

                entity.Property(e => e.EncodeData).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<EncodeCardResult>(entity =>
            {
                entity.HasKey(e => new { e.SystemId, e.CssSiteId, e.CreationDatetime })
                    .HasName("PK_ENCODE_CARD_RESULT");

                entity.Property(e => e.OutputFile).IsUnicode(false);
            });

            modelBuilder.Entity<Equation>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expression).IsUnicode(false);

                entity.Property(e => e.MethodType)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Event>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_EVENT")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.EventDatetime, e.EgmSerialNumber, e.SiteId, e.EventTypeId, e.SequenceNumber }, "ind_unique_event")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.AdditionalData).IsUnicode(false);
            });

            modelBuilder.Entity<EventResponseTimes>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EventTypeId, e.EgmSerialNumber, e.EventDatetime })
                    .HasName("pk_event_response_times");
            });

            modelBuilder.Entity<EventType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.PurgeableEventFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Source).IsUnicode(false);
            });

            modelBuilder.Entity<ExchangeRateHistory>(entity =>
            {
                entity.HasKey(e => new { e.CurrencyId, e.ValidFrom })
                    .HasName("pk_exchange_rate_history");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ExchangeRateHistory)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_exchange_ref_24831_currency");
            });

            modelBuilder.Entity<ExcludedPatron>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Address1).IsUnicode(false);

                entity.Property(e => e.Address2).IsUnicode(false);

                entity.Property(e => e.Address3).IsUnicode(false);

                entity.Property(e => e.Address4).IsUnicode(false);

                entity.Property(e => e.CountryIsoCode).IsUnicode(false);

                entity.Property(e => e.DomesticJurisdictionIsoCode).IsUnicode(false);

                entity.Property(e => e.ExcludedJurisdictionIsoCode).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.OtherNames).IsUnicode(false);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.Suburb).IsUnicode(false);
            });

            modelBuilder.Entity<EzyBreakSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CardId, e.StartDatetime })
                    .HasName("pk_ezy_break_summary");

                entity.Property(e => e.TimedOut)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FileDependence>(entity =>
            {
                entity.HasIndex(e => new { e.FileName, e.Dependence, e.Version }, "file_dependence_idx1")
                    .IsClustered();

                entity.Property(e => e.Dependence).IsUnicode(false);

                entity.Property(e => e.FileName).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<FileDistribution>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.WorkingSetName, e.WorkingSetType })
                    .HasName("file_distr_9321983711");

                entity.Property(e => e.WorkingSetName).IsUnicode(false);

                entity.Property(e => e.WorkingSetType).IsUnicode(false);
            });

            modelBuilder.Entity<FileStore>(entity =>
            {
                entity.HasKey(e => new { e.FileName, e.Version })
                    .HasName("file_store_9001982571");

                entity.Property(e => e.FileName).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FileStoreUpgrade>(entity =>
            {
                entity.HasKey(e => new { e.FileName, e.Version, e.Sha })
                    .HasName("PK_FILE_STORE_UPGRADE");

                entity.Property(e => e.FileName).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);

                entity.Property(e => e.Sha).IsUnicode(false);
            });

            modelBuilder.Entity<FileWorkingSet>(entity =>
            {
                entity.HasKey(e => new { e.FileName, e.Version, e.WorkingSetName, e.WorkingSetType })
                    .HasName("file_worki_8361980291");

                entity.Property(e => e.FileName).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);

                entity.Property(e => e.WorkingSetName).IsUnicode(false);

                entity.Property(e => e.WorkingSetType).IsUnicode(false);
            });

            modelBuilder.Entity<FloorControlLoopConfig>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.LoopName })
                    .HasName("PK_FLOOR_CONTROL_LOOP_CONFIG");

                entity.Property(e => e.LoopName).IsUnicode(false);

                entity.Property(e => e.FloorControlName).IsUnicode(false);

                entity.Property(e => e.LoopType).IsUnicode(false);
            });

            modelBuilder.Entity<FloorViewDetail>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber })
                    .HasName("floor_view_16327248691");
            });

            modelBuilder.Entity<FloorViewMaster>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.FloorNumber })
                    .HasName("floor_view_master_pk");

                entity.Property(e => e.FloorMapFile).IsUnicode(false);
            });

            modelBuilder.Entity<GameMetersSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.SummaryLevel, e.StartDatetime, e.Ssan, e.GameVersionNumber, e.DenominationId, e.Rtp, e.EgmSerialNumber, e.Floor, e.Bank, e.Position })
                    .HasName("pk_game_meters_summary");
            });

            modelBuilder.Entity<GameType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.QogrEnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Style).IsUnicode(false);
            });

            modelBuilder.Entity<GameVariation>(entity =>
            {
                entity.HasKey(e => new { e.GameTypeId, e.GameVariationNumber })
                    .HasName("PK_GAME_VARIATION");
            });

            modelBuilder.Entity<Headcount>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.TimeInterval, e.Floor, e.Bank })
                    .HasName("PK_HEADCOUNT");
            });

            modelBuilder.Entity<IGTLicensedSoftware>(entity =>
            {
                entity.Property(e => e.SoftwareSetAppNumber).IsFixedLength(true);
            });

            modelBuilder.Entity<IdControl>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.ColumnName })
                    .HasName("PK_ID_CONTROL");

                entity.Property(e => e.TableName).IsUnicode(false);

                entity.Property(e => e.ColumnName).IsUnicode(false);
            });

            modelBuilder.Entity<IdentificationGroup>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CheckType).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.FormSection).IsUnicode(false);
            });

            modelBuilder.Entity<IdentificationItem>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.FormSection).IsUnicode(false);
            });

            modelBuilder.Entity<InternetGamingPlaySummary>(entity =>
            {
                entity.HasKey(e => new { e.CardId, e.SummaryLevel, e.StartDatetime, e.CssGameTypeId })
                    .HasName("PK_INTGAMPLAYSUM");
            });

            modelBuilder.Entity<JackpotEvent>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EventDatetime, e.SequenceNumber, e.EventTypeId, e.EgmSerialNumber })
                    .HasName("PK_JACKPOT_EVENT");

                entity.Property(e => e.AdditionalData).IsUnicode(false);
            });

            modelBuilder.Entity<JackpotMetersSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PoolNumber, e.SummaryLevel, e.StartDatetime, e.EgmSerialNumber, e.DenominationId, e.Ssan, e.Bgvn, e.Floor, e.Bank, e.Position, e.Increment });
            });

            modelBuilder.Entity<JackpotPool>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PoolNumber })
                    .HasName("PK_JACKPOT_POOL");

                entity.Property(e => e.AllowPrizeSharing)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.LevelName).IsUnicode(false);

                entity.Property(e => e.PoolName).IsUnicode(false);

                entity.Property(e => e.PoolType).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubPoolType).IsUnicode(false);

                entity.Property(e => e.WeightedFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<JackpotPoolContributions>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PoolNumber, e.FccSiteId, e.FccName })
                    .HasName("pk_jackpot_pool_contributions");

                entity.Property(e => e.FccName).IsUnicode(false);
            });

            modelBuilder.Entity<JackpotPoolDevice>(entity =>
            {
                entity.HasKey(e => new { e.PoolSiteId, e.PoolNumber, e.EgmSerialNumber, e.GameNumber })
                    .HasName("PK_JACKPOT_POOL_DEVICE");

                entity.Property(e => e.DeviceType).IsUnicode(false);
            });

            modelBuilder.Entity<JackpotPoolGroupLevels>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.JackpotPoolGroupId, e.LevelNumber })
                    .HasName("PK_JACKPOT_POOL_GROUP_LEVELS");
            });

            modelBuilder.Entity<JackpotPoolGroupType>(entity =>
            {
                entity.HasKey(e => e.GroupType)
                    .HasName("PK_JACKPOT_POOL_GROUP_TYPE");

                entity.Property(e => e.GroupType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<JackpotPoolGroups>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.GroupId })
                    .HasName("PK_JACKPOT_POOL_GROUPS");

                entity.Property(e => e.ApprovalName).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.GroupType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SharedProgressiveFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<JackpotPoolSiteStatus>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PoolNumber })
                    .HasName("PK_JACKPOT_POOL_SITE_STATUS");

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<JackpotPoolSiteStatusHistory>(entity =>
            {
                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<JackpotSummary>(entity =>
            {
                entity.HasKey(e => new { e.PoolSiteId, e.PoolNumber, e.EgmSerialNumber, e.EgmSiteId, e.GameNumber, e.GameVariationNumber, e.DenominationId, e.SummaryLevel, e.StartDatetime })
                    .HasName("jackpot_su_9141543521");
            });

            modelBuilder.Entity<JackpotValues>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<JmsTemp>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PoolNumber, e.SummaryLevel, e.StartDatetime, e.EgmSerialNumber, e.DenominationId, e.Ssan, e.Bgvn, e.Floor, e.Bank, e.Position, e.Increment })
                    .HasName("PK_jms");
            });

            modelBuilder.Entity<Jurisdiction>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.IsoCode).IsUnicode(false);
            });

            modelBuilder.Entity<KenoAgencyReconcile>(entity =>
            {
                entity.HasKey(e => new { e.ReconcileDay, e.CssSiteId })
                    .HasName("PK_KENO_AGENCY_RECONCILE");
            });

            modelBuilder.Entity<KenoPlaySummary>(entity =>
            {
                entity.HasKey(e => new { e.CardId, e.SummaryLevel, e.StartDatetime, e.CssSiteId })
                    .HasName("PK_KENO_PLAY_SUMMARY");

                entity.Property(e => e.TicketDescription).IsUnicode(false);
            });

            modelBuilder.Entity<KioskTransaction>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.PatronId, e.EntryDatetime })
                    .HasName("kiosk_tran_3910084741");

                entity.Property(e => e.CampaignId).IsUnicode(false);

                entity.Property(e => e.PrizeDrawTicketStatus).IsUnicode(false);

                entity.Property(e => e.TicketText).IsUnicode(false);
            });

            modelBuilder.Entity<LegislativeRequirement>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Floor, e.Bank, e.Position })
                    .HasName("PK_LOCATION");

                entity.Property(e => e.LoopName).IsUnicode(false);

                entity.Property(e => e.PagerPosition).IsUnicode(false);

                entity.Property(e => e.SecurityId).IsUnicode(false);
            });

            modelBuilder.Entity<LocationMidm>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Floor, e.Bank, e.Position })
                    .HasName("PK_LOCATION_MIDM");
            });

            modelBuilder.Entity<LoopDeviceApplication>(entity =>
            {
                entity.HasKey(e => new { e.SystemId, e.CssSiteId, e.HardwareDeviceId, e.ApplicationId })
                    .HasName("PK_LOOP_DEVICE_APPLICATION");

                entity.Property(e => e.ApplicationId)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImageName).IsUnicode(false);
            });

            modelBuilder.Entity<LoopDeviceMessageText>(entity =>
            {
                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MessageText).IsUnicode(false);
            });

            modelBuilder.Entity<LoopDeviceMessageType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<LoopDeviceTypeMapping>(entity =>
            {
                entity.HasKey(e => e.HardwareDeviceId)
                    .HasName("PK_LOOP_DEVICE_TYPE_MAPPING");

                entity.Property(e => e.DisplayName).IsUnicode(false);
            });

            modelBuilder.Entity<LoyaltyUnit>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber })
                    .HasName("pk_loyalty_unit");
            });

            modelBuilder.Entity<LoyaltyUnitType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<Manufacturer>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactName).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.Locality).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.StateProvince).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);
            });

            modelBuilder.Entity<MasterCard>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<MaxChangeGameConfiguration>(entity =>
            {
                entity.Property(e => e.Id).IsUnicode(false);
            });

            modelBuilder.Entity<MaxChangeRequest>(entity =>
            {
                entity.Property(e => e.Id).IsUnicode(false);
            });

            modelBuilder.Entity<MaxChangeRequestDetail>(entity =>
            {
                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.MaxChangeGameConfigId).IsUnicode(false);

                entity.Property(e => e.MaxChangeRequestId).IsUnicode(false);
            });

            modelBuilder.Entity<MaxChangeRequestType>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<MaxbonusTicket>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Id })
                    .HasName("PK_MAXBONUS_TICKET");

                entity.Property(e => e.PromotionCriteria).IsUnicode(false);

                entity.Property(e => e.PromotionName).IsUnicode(false);

                entity.Property(e => e.PromotionPrize).IsUnicode(false);
            });

            modelBuilder.Entity<MembershipReceipts>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.ReceiptId, e.ReceiptDatetime, e.PatronId })
                    .HasName("membership_2776280821");

                entity.Property(e => e.ChequeDetails).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<MembershipType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Associate)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<MoneyBox>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.BoxNumber })
                    .HasName("pk_money_box");

                entity.Property(e => e.BoxNumber).IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<NetworkDevice>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.SiteId })
                    .HasName("network_de_13885840351");

                entity.Property(e => e.Configuration).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Downloadable)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.NetworkAddress).IsUnicode(false);

                entity.Property(e => e.SecurityId).IsUnicode(false);
            });

            modelBuilder.Entity<NetworkDeviceEvent>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EventDatetime, e.NetworkDeviceId, e.EventCategoryId, e.LoggedDatetime })
                    .HasName("network_de_14365842061");

                entity.Property(e => e.EventDescription).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<NetworkDeviceTransaction>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.NetworkDeviceId, e.TransactionDatetime, e.TransactionId });

                entity.Property(e => e.NetworkDeviceDescription).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<NetworkDeviceTransactionType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<NetworkDeviceType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Subcategory).IsUnicode(false);
            });

            modelBuilder.Entity<NoteBuy>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.BuyDate })
                    .HasName("PK_NOTE_BUY");
            });

            modelBuilder.Entity<NoteCount>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EntryDatetime, e.MoneyBoxNumber })
                    .HasName("pk_note_count");

                entity.Property(e => e.MoneyBoxNumber).IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CountStatus).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<Pager>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Capcode).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PagerCategory>(entity =>
            {
                entity.HasKey(e => new { e.PagerId, e.CategoryId })
                    .HasName("PK_PAGER_CATEGORY");
            });

            modelBuilder.Entity<PagerEvent>(entity =>
            {
                entity.Property(e => e.DisplayText).IsUnicode(false);

                entity.Property(e => e.PagingEnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PagerRatingGrade>(entity =>
            {
                entity.HasKey(e => new { e.PagerId, e.RatingGradeId })
                    .HasName("pk_pager_rating_grade");
            });

            modelBuilder.Entity<PagerTransport>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<PagerZones>(entity =>
            {
                entity.HasKey(e => new { e.PagerId, e.ZoneId })
                    .HasName("pager_zone_4640567391");
            });

            modelBuilder.Entity<Patron>(entity =>
            {
                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.HomeTelephone).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.Locality).IsUnicode(false);

                entity.Property(e => e.MailOutFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MiddleInitial).IsUnicode(false);

                entity.Property(e => e.Mobile).IsUnicode(false);

                entity.Property(e => e.NameTitle).IsUnicode(false);

                entity.Property(e => e.NextOfKin).IsUnicode(false);

                entity.Property(e => e.NextOfKinTelephone).IsUnicode(false);

                entity.Property(e => e.OtherName).IsUnicode(false);

                entity.Property(e => e.PostalAddress1).IsUnicode(false);

                entity.Property(e => e.PostalAddress2).IsUnicode(false);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.ResAddress1).IsUnicode(false);

                entity.Property(e => e.ResAddress2).IsUnicode(false);

                entity.Property(e => e.ResCountry).IsUnicode(false);

                entity.Property(e => e.ResLocality).IsUnicode(false);

                entity.Property(e => e.ResPostalCode).IsUnicode(false);

                entity.Property(e => e.ResStateProvince).IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StateProvince).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.WorkTelephone).IsUnicode(false);
            });

            modelBuilder.Entity<PatronAccount>(entity =>
            {
                entity.HasKey(e => new { e.PatronId, e.AccountId })
                    .HasName("PK_PATRON_ACCOUNT");
            });

            modelBuilder.Entity<PatronAccountPermission>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.PatronId, e.AccountPermissionTypeId });
            });

            modelBuilder.Entity<PatronAgeGroup>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<PatronAssociation>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.ParentPatronId, e.AssociatePatronId })
                    .HasName("patron_ass_3096281961");
            });

            modelBuilder.Entity<PatronBanking>(entity =>
            {
                entity.Property(e => e.BankingType).IsUnicode(false);

                entity.Property(e => e.Detail1).IsUnicode(false);

                entity.Property(e => e.Detail2).IsUnicode(false);

                entity.Property(e => e.Detail3).IsUnicode(false);

                entity.Property(e => e.Detail4).IsUnicode(false);

                entity.Property(e => e.Detail5).IsUnicode(false);

                entity.Property(e => e.Detail6).IsUnicode(false);

                entity.Property(e => e.SubBankingType).IsUnicode(false);
            });

            modelBuilder.Entity<PatronComment>(entity =>
            {
                entity.HasKey(e => e.PatronId)
                    .HasName("PK__patron_comment__064DE20A");

                entity.Property(e => e.PatronId).HasDefaultValueSql("(null)");

                entity.Property(e => e.CommentField)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(null)");

                entity.Property(e => e.UserId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(null)");
            });

            modelBuilder.Entity<PatronContact>(entity =>
            {
                entity.HasKey(e => new { e.PatronId, e.ContactTypeId })
                    .HasName("pk_patron_contact");

                entity.Property(e => e.PointsAwardedFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubscribedFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PatronContactHistory>(entity =>
            {
                entity.HasKey(e => new { e.PatronId, e.ContactTypeId, e.ContactDetails })
                    .HasName("pk_patron_contact_history");

                entity.Property(e => e.ContactDetails).IsUnicode(false);

                entity.Property(e => e.BouncedFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotifiedKioskFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PatronExtra>(entity =>
            {
                entity.HasKey(e => new { e.PatronId, e.PatronExtraTypeId })
                    .HasName("PK_PATRON_EXTRA");

                entity.Property(e => e.DetailValue).IsUnicode(false);
            });

            modelBuilder.Entity<PatronExtraType>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<PatronGroup>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PatronGroupMember>(entity =>
            {
                entity.HasKey(e => new { e.PatronId, e.PatronGroupId })
                    .HasName("PK_PATRON_GROUP_MEMBER");
            });

            modelBuilder.Entity<PatronIdentification>(entity =>
            {
                entity.Property(e => e.Detail1).IsUnicode(false);

                entity.Property(e => e.Detail2).IsUnicode(false);

                entity.Property(e => e.ImageFileLocation).IsUnicode(false);
            });

            modelBuilder.Entity<PatronLastActivity>(entity =>
            {
                entity.HasKey(e => e.PatronId)
                    .HasName("pk_patron_last_activity");
            });

            modelBuilder.Entity<PatronMembershipHistory>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.PatronId, e.TransactionDatetime })
                    .HasName("pk_patron_membership_history");

                entity.Property(e => e.NewStatus).IsUnicode(false);

                entity.Property(e => e.OldStatus).IsUnicode(false);
            });

            modelBuilder.Entity<PatronPreference>(entity =>
            {
                entity.HasKey(e => new { e.PatronId, e.PreferenceGroupId, e.PatronPreferenceTypeId });
            });

            modelBuilder.Entity<PatronPreferenceGroup>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<PatronPreferenceType>(entity =>
            {
                entity.HasKey(e => new { e.PreferenceGroupId, e.Id })
                    .HasName("PK_PATRON_PREFERENCE_type");

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<PatronRatingHistory>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.PatronId, e.RatingGradeId })
                    .HasName("pk_patron_rating_history");

                entity.Property(e => e.RatingForLife)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pbcatcol>(entity =>
            {
                entity.Property(e => e.PbcBmap)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbcCmnt).IsUnicode(false);

                entity.Property(e => e.PbcCnam)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbcEdit).IsUnicode(false);

                entity.Property(e => e.PbcHdr).IsUnicode(false);

                entity.Property(e => e.PbcInit).IsUnicode(false);

                entity.Property(e => e.PbcLabl).IsUnicode(false);

                entity.Property(e => e.PbcMask).IsUnicode(false);

                entity.Property(e => e.PbcOwnr)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbcPtrn).IsUnicode(false);

                entity.Property(e => e.PbcTag).IsUnicode(false);

                entity.Property(e => e.PbcTnam)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pbcatedt>(entity =>
            {
                entity.HasIndex(e => new { e.PbeName, e.PbeSeqn }, "pbcatedt_idx")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.PbeEdit).IsUnicode(false);

                entity.Property(e => e.PbeName).IsUnicode(false);

                entity.Property(e => e.PbeWork)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pbcatfmt>(entity =>
            {
                entity.HasIndex(e => e.PbfName, "pbcatfmt_idx")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.PbfFrmt).IsUnicode(false);

                entity.Property(e => e.PbfName).IsUnicode(false);
            });

            modelBuilder.Entity<Pbcattbl>(entity =>
            {
                entity.Property(e => e.PbdFfce)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbdFitl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbdFunl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbhFfce)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbhFitl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbhFunl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PblFfce)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PblFitl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PblFunl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbtCmnt).IsUnicode(false);

                entity.Property(e => e.PbtOwnr)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbtTnam)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pbcatvld>(entity =>
            {
                entity.HasIndex(e => e.PbvName, "pbcatvld_idx")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.PbvMsg).IsUnicode(false);

                entity.Property(e => e.PbvName).IsUnicode(false);

                entity.Property(e => e.PbvVald).IsUnicode(false);
            });

            modelBuilder.Entity<PlayerChoiceStatistics>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.ManufacturerId, e.Ssan, e.GameVersionNumber, e.StartDatetime })
                    .HasName("PK_PLAYER_CHOICE_STAT");

                entity.Property(e => e.PlayerChoicesArray).IsUnicode(false);
            });

            modelBuilder.Entity<PlayerExclusionHostAudit>(entity =>
            {
                entity.HasKey(e => new { e.TransactionId, e.AuditDatetime })
                    .HasName("pk_player_excl_host");

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Comment2).IsUnicode(false);

                entity.Property(e => e.ExclusionTypeId).IsUnicode(false);

                entity.Property(e => e.HostUserId).IsUnicode(false);

                entity.Property(e => e.NewComment1).IsUnicode(false);

                entity.Property(e => e.NewComment2).IsUnicode(false);

                entity.Property(e => e.NewExclusionTypeId).IsUnicode(false);

                entity.Property(e => e.TransactionChangeType).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<PlayerExclusionPatronTypes>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.TransactionId, e.PatronId, e.ExclusionTypeId })
                    .HasName("pk_pl_exl_typ");
            });

            modelBuilder.Entity<PlayerExclusionTransaction>(entity =>
            {
                entity.HasKey(e => e.TransactionId)
                    .HasName("pk_player_excl_transaction");

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Comment2).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<PlayerExclusionTransactionType>(entity =>
            {
                entity.HasKey(e => e.TransactionTypeId)
                    .HasName("pk_player_excl_trans_typ");

                entity.Property(e => e.TransactionTypeId).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<PlayerExclusionType>(entity =>
            {
                entity.HasKey(e => e.ExclusionTypeId)
                    .HasName("pk_player_excl_typ");

                entity.Property(e => e.ExclusionTypeId).ValueGeneratedNever();

                entity.Property(e => e.ExclusionDescription).IsUnicode(false);

                entity.Property(e => e.ReportDescription).IsUnicode(false);

                entity.Property(e => e.VenueDescription).IsUnicode(false);
            });

            modelBuilder.Entity<PointPurgeAudit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Func).IsUnicode(false);

                entity.Property(e => e.Parameters).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<PointPurgeConfiguration>(entity =>
            {
                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PointPurgeDateCriterion>(entity =>
            {
                entity.Property(e => e.ConfigurationString).IsUnicode(false);
            });

            modelBuilder.Entity<PointPurgeMemberCriterion>(entity =>
            {
                entity.HasKey(e => new { e.PointPurgeConfigurationId, e.MembershipTypeId })
                    .HasName("PK_POINT_PURGE_MEMBER_CRITERION");
            });

            modelBuilder.Entity<PointPurgePatStatusCriterion>(entity =>
            {
                entity.HasKey(e => new { e.PointPurgeConfigurationId, e.PatronStatus })
                    .HasName("PK_POINT_PURGE_STATUS_CRITERION");

                entity.Property(e => e.PatronStatus).IsUnicode(false);
            });

            modelBuilder.Entity<PointPurgeRatingCriterion>(entity =>
            {
                entity.HasKey(e => new { e.PointPurgeConfigurationId, e.RatingGradeId })
                    .HasName("PK_POINT_PURGE_RATING_CRITERION");
            });

            modelBuilder.Entity<PointPurgeTimeframe>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<PointsPlayConfiguration>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PointsPlayConfigurationAudit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Action)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<PointsPlayDenomination>(entity =>
            {
                entity.HasKey(e => new { e.PointsPlayConfigurationId, e.CssSiteId, e.DrawdownDenominationId })
                    .HasName("pk_points_play_denomination");

                entity.HasOne(d => d.CssSite)
                    .WithMany(p => p.PointsPlayDenomination)
                    .HasForeignKey(d => d.CssSiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_points_play_denomination_css_site");

                entity.HasOne(d => d.DrawdownDenomination)
                    .WithMany(p => p.PointsPlayDenomination)
                    .HasForeignKey(d => d.DrawdownDenominationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_points_play_denomination_drawdown_denomination");

                entity.HasOne(d => d.PointsPlayConfiguration)
                    .WithMany(p => p.PointsPlayDenomination)
                    .HasForeignKey(d => d.PointsPlayConfigurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_points_play_denomination_points_play_configuration");
            });

            modelBuilder.Entity<PointsPlayRatingGrade>(entity =>
            {
                entity.HasKey(e => new { e.PointsPlayConfigurationId, e.CssSiteId, e.RatingGradeId })
                    .HasName("pk_points_play_rating_grade");

                entity.HasOne(d => d.CssSite)
                    .WithMany(p => p.PointsPlayRatingGrade)
                    .HasForeignKey(d => d.CssSiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_points_play_rating_grade_css_site");

                entity.HasOne(d => d.PointsPlayConfiguration)
                    .WithMany(p => p.PointsPlayRatingGrade)
                    .HasForeignKey(d => d.PointsPlayConfigurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_points_play_rating_grade_points_play_configuration");
            });

            modelBuilder.Entity<PointsPlayTrackingType>(entity =>
            {
                entity.HasKey(e => new { e.PointsPlayConfigurationId, e.CssSiteId, e.TrackingTypeId })
                    .HasName("pk_points_play_tracking_type");

                entity.HasOne(d => d.PointsPlayConfiguration)
                    .WithMany(p => p.PointsPlayTrackingType)
                    .HasForeignKey(d => d.PointsPlayConfigurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_points_play_tracking_type_points_play_configuration");
            });

            modelBuilder.Entity<PointsPlayTransaction>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PatronId, e.TransactionDatetime })
                    .HasName("pk_points_play_transaction");

                entity.Property(e => e.Ssan).IsUnicode(false);
            });

            modelBuilder.Entity<PortConfiguration>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.HostSerialNumber, e.Port, e.RemotePort })
                    .HasName("PK_PORT_CONFIGURATION");

                entity.Property(e => e.RemotePort).IsUnicode(false);

                entity.Property(e => e.LoopName).IsUnicode(false);
            });

            modelBuilder.Entity<PosTransactionItem>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CssSiteId, e.SalesId, e.ItemCode })
                    .HasName("pk_pos_transaction_item");

                entity.Property(e => e.SalesId).IsUnicode(false);

                entity.Property(e => e.ItemCode).IsUnicode(false);

                entity.Property(e => e.CategoryCode).IsUnicode(false);

                entity.Property(e => e.CategoryDescription).IsUnicode(false);

                entity.Property(e => e.ItemDescription).IsUnicode(false);

                entity.HasOne(d => d.PosTransactionSale)
                    .WithMany(p => p.PosTransactionItem)
                    .HasForeignKey(d => new { d.SiteId, d.CssSiteId, d.SalesId })
                    .HasConstraintName("fk_pos_transaction_item");
            });

            modelBuilder.Entity<PosTransactionPayment>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CssSiteId, e.SalesId, e.PaymentCode })
                    .HasName("pk_pos_transaction_payment");

                entity.Property(e => e.SalesId).IsUnicode(false);

                entity.Property(e => e.PaymentCode).IsUnicode(false);

                entity.Property(e => e.PaymentDescription).IsUnicode(false);

                entity.HasOne(d => d.PosTransactionSale)
                    .WithMany(p => p.PosTransactionPayment)
                    .HasForeignKey(d => new { d.SiteId, d.CssSiteId, d.SalesId })
                    .HasConstraintName("fk_pos_transaction_payment");
            });

            modelBuilder.Entity<PosTransactionSale>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CssSiteId, e.SalesId })
                    .HasName("pk_pos_transaction_sale");

                entity.Property(e => e.SalesId).IsUnicode(false);

                entity.Property(e => e.LocationId).IsUnicode(false);

                entity.Property(e => e.LocationName).IsUnicode(false);

                entity.Property(e => e.TerminalId).IsUnicode(false);

                entity.Property(e => e.TerminalName).IsUnicode(false);
            });

            modelBuilder.Entity<PosTransactionTax>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CssSiteId, e.SalesId, e.TaxCode })
                    .HasName("pk_pos_transaction_tax");

                entity.Property(e => e.SalesId).IsUnicode(false);

                entity.Property(e => e.TaxCode).IsUnicode(false);

                entity.Property(e => e.TaxDescription).IsUnicode(false);

                entity.HasOne(d => d.PosTransactionSale)
                    .WithMany(p => p.PosTransactionTax)
                    .HasForeignKey(d => new { d.SiteId, d.CssSiteId, d.SalesId })
                    .HasConstraintName("fk_pos_transaction_tax");
            });

            modelBuilder.Entity<PrizeDraw>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.CssSiteId })
                    .HasName("prize_draw_4230085881");

                entity.Property(e => e.BirthdayPrizeCriteriaType).IsUnicode(false);

                entity.Property(e => e.DayOfWeek).IsUnicode(false);

                entity.Property(e => e.Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MonthOfYear).IsUnicode(false);

                entity.Property(e => e.PrintExpiryDateFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrizeDescription).IsUnicode(false);

                entity.Property(e => e.PrizeDoesNotExpireFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrizeExpiresEndOfMonthFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrizeType).IsUnicode(false);

                entity.Property(e => e.RatingGradeList).IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SimplayTriggerPrize)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TicketText).IsUnicode(false);

                entity.Property(e => e.YouHaveWon).IsUnicode(false);
            });

            modelBuilder.Entity<QogrApprovedEgmJackpots>(entity =>
            {
                entity.HasIndex(e => e.SoftwareSetApprovalNumber, "ind_qogr_app_jp")
                    .IsClustered();

                entity.Property(e => e.SoftwareSetApprovalNumber).IsUnicode(false);
            });

            modelBuilder.Entity<QogrApprovedTechnician>(entity =>
            {
                entity.HasKey(e => new { e.Name, e.LicenceNumber })
                    .HasName("pk_qogr_tech");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.LicenceNumber).IsUnicode(false);
            });

            modelBuilder.Entity<QogrDucmsConfig>(entity =>
            {
                entity.Property(e => e.CabinetType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CoinToken)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Denomination)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Egm)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HardwareNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Hopper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Lcom)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mid)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Owner)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PollAdd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProgControl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Site)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoftwareNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TicketPrinter)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Token)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TouchScreen)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<QogrEgmSeeds>(entity =>
            {
                entity.HasKey(e => e.SeedDate)
                    .HasName("PK_QOGR_EGM_SEED");

                entity.Property(e => e.Seed).IsUnicode(false);
            });

            modelBuilder.Entity<QogrEgmSignatures>(entity =>
            {
                entity.HasIndex(e => new { e.SoftwareSetApprovalNumber, e.SignatureDate }, "PK_QOGR_EGM_SIGNATURES")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Signature).IsUnicode(false);

                entity.Property(e => e.SoftwareComponentId).IsUnicode(false);

                entity.Property(e => e.SoftwareSetApprovalNumber).IsUnicode(false);

                entity.Property(e => e.SoftwareSetName).IsUnicode(false);
            });

            modelBuilder.Entity<QogrEgmSoftwareSet>(entity =>
            {
                entity.HasKey(e => e.Ssan)
                    .HasName("qogr_egm_s_5280569671");

                entity.Property(e => e.Ssan).ValueGeneratedNever();

                entity.Property(e => e.SoftwareSetName).IsUnicode(false);
            });

            modelBuilder.Entity<QogrFilesSent>(entity =>
            {
                entity.HasKey(e => e.Filename)
                    .HasName("PK_QOGR_FILES_SENT");

                entity.Property(e => e.Filename).IsUnicode(false);

                entity.Property(e => e.DateOfData)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DateSent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TheFile)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<QogrHardSoftList>(entity =>
            {
                entity.Property(e => e.ApprovalStatus)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CabinetType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CoinToken)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HardwareIdNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Hopper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Mid)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProgController)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoftwareApprovalNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TicketPrinter)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TouchScreen)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<QogrHardwareList>(entity =>
            {
                entity.Property(e => e.ApprovalStatus)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HardwareApprovalNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HardwareIdentifierNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HardwareProductName)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Mid)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<QogrJackpotApproval>(entity =>
            {
                entity.HasKey(e => e.PoolNumber)
                    .HasName("qogr_jackp_18052494861");

                entity.Property(e => e.PoolNumber).ValueGeneratedNever();
            });

            modelBuilder.Entity<QogrJackpotApprovalName>(entity =>
            {
                entity.Property(e => e.ApprovalNumber).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<QogrReportsBankDeposits>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.DepositNumber, e.DepositDate })
                    .HasName("qogr_repor_4550087021");

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.RefDepositNum).IsUnicode(false);
            });

            modelBuilder.Entity<QogrSealApproval>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.SerialNumber, e.StartDatetime })
                    .HasName("pk_seal_app");

                entity.Property(e => e.LicenceNumber).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.NewSealNumber).IsUnicode(false);

                entity.Property(e => e.OldSealNumber).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<QogrSealApprovalDevice>(entity =>
            {
                entity.HasKey(e => e.DeviceTypeId)
                    .HasName("pk_seal_app_dev");

                entity.Property(e => e.DeviceTypeId).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<QogrSiteJobRequest>(entity =>
            {
                entity.HasKey(e => new { e.OperatorReferenceNumber, e.LicenceOpNumber })
                    .HasName("qogr_site_job1_2727200241");

                entity.Property(e => e.CabinetType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CoinTokenAcceptor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HopperPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntrasiteMovement)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.JackpotGroupId)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlayerTracking)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProgController)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TicketPrinter)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TouchScreen)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<QogrSoftwareDeno>(entity =>
            {
                entity.Property(e => e.Denomination)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Mid)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoftwareApprovalNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Token)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<QogrSoftwareList>(entity =>
            {
                entity.Property(e => e.ApprovalStatus)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.ManufacturerVersionId)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mid)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProtocolVersion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoftwareApprovalNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoftwareIdentifierNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoftwareSetName)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<RandomMemberDraw>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.DrawNumber })
                    .HasName("random_mem_3416283101");

                entity.Property(e => e.Claimed)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrizeDescription).IsUnicode(false);
            });

            modelBuilder.Entity<RatingGrade>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.MethodType).IsUnicode(false);

                entity.Property(e => e.RatingGradeForLife)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<RedemptionItem>(entity =>
            {
                entity.Property(e => e.Available)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CashFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Comment2).IsUnicode(false);

                entity.Property(e => e.Comment3).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.RatingGrades).IsUnicode(false);
            });

            modelBuilder.Entity<RedemptionVoucher>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.CssSiteId })
                    .HasName("PK_REDEMPTION_VOUCHER");

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Comment2).IsUnicode(false);

                entity.Property(e => e.Comment3).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<ReportUsage>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.ReportName, e.RunDatetime })
                    .HasName("pk_report_usage");

                entity.Property(e => e.ReportName).IsUnicode(false);
            });

            modelBuilder.Entity<ReportsToMaxsys>(entity =>
            {
                entity.HasKey(e => e.ReportName)
                    .HasName("pk_rpt_to_max");

                entity.Property(e => e.ReportName).IsUnicode(false);
            });

            modelBuilder.Entity<SecurityApp>(entity =>
            {
                entity.HasKey(e => e.Application)
                    .HasName("pk_sec_app");

                entity.Property(e => e.Application).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<SecurityApps>(entity =>
            {
                entity.HasKey(e => e.Application)
                    .HasName("PK_SECURITY_APPS");

                entity.Property(e => e.Application).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<SecurityGroupings>(entity =>
            {
                entity.HasKey(e => new { e.GroupName, e.UserName })
                    .HasName("PK_SECURITY_GROUPINGS");

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);
            });

            modelBuilder.Entity<SecurityGroupingsUnload>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.GroupName, e.UserName })
                    .HasName("pk_sec_grp_un");

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);
            });

            modelBuilder.Entity<SecurityInfo>(entity =>
            {
                entity.HasKey(e => new { e.Application, e.Window, e.Control, e.UserName })
                    .HasName("PK_SECURITY_INFO");

                entity.Property(e => e.Application).IsUnicode(false);

                entity.Property(e => e.Window).IsUnicode(false);

                entity.Property(e => e.Control).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SecurityInfoUnload>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Application, e.Window, e.Control, e.UserName })
                    .HasName("pk_sec_inf_un");

                entity.Property(e => e.Application).IsUnicode(false);

                entity.Property(e => e.Window).IsUnicode(false);

                entity.Property(e => e.Control).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SecurityTemplate>(entity =>
            {
                entity.HasKey(e => new { e.Application, e.Window, e.Control })
                    .HasName("PK_SECURITY_TEMPLATE");

                entity.Property(e => e.Application).IsUnicode(false);

                entity.Property(e => e.Window).IsUnicode(false);

                entity.Property(e => e.Control).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ObjectType).IsUnicode(false);

                entity.Property(e => e.SiteEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ApplicationNavigation)
                    .WithMany(p => p.SecurityTemplate)
                    .HasForeignKey(d => d.Application)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("security_template_app");
            });

            modelBuilder.Entity<SecurityUsers>(entity =>
            {
                entity.HasKey(e => e.Name)
                    .HasName("PK_SECURITY_USERS");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.WindowsUserName).IsUnicode(false);
            });

            modelBuilder.Entity<SecurityUsersUnload>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Name })
                    .HasName("pk_sec_user_un");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);
            });

            modelBuilder.Entity<Signature>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.DoNotDeleteFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.OlgrLicenceNumber).IsUnicode(false);

                entity.Property(e => e.PhoneNumber).IsUnicode(false);

                entity.Property(e => e.SignatureTypeId).IsUnicode(false);
            });

            modelBuilder.Entity<SignatureLink>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.SignatureId })
                    .HasName("pk_signature_link");
            });

            modelBuilder.Entity<SignatureType>(entity =>
            {
                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<SingleLmoDm0>(entity =>
            {
                entity.HasKey(e => new { e.ReportDate, e.MID, e.Serial, e.Site, e.CreditDenomination, e.TokenValue, e.SSAN })
                    .HasName("Pk_Cougar_DM0");
            });

            modelBuilder.Entity<Site>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ContactName).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Facsimile).IsUnicode(false);

                entity.Property(e => e.Jurisdiction).IsUnicode(false);

                entity.Property(e => e.LicenceName).IsUnicode(false);

                entity.Property(e => e.LicenceStatus).IsUnicode(false);

                entity.Property(e => e.LicenceType).IsUnicode(false);

                entity.Property(e => e.LicencedOperator).IsUnicode(false);

                entity.Property(e => e.Locality).IsUnicode(false);

                entity.Property(e => e.Mobile).IsUnicode(false);

                entity.Property(e => e.Pager)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.Premises).IsUnicode(false);

                entity.Property(e => e.StateProvince).IsUnicode(false);

                entity.Property(e => e.StatisticalDivision).IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SiteDropVariance>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.StartDatetime, e.EntryType })
                    .HasName("pk_site_drop_variance");

                entity.Property(e => e.EntryType).IsUnicode(false);
            });

            modelBuilder.Entity<SiteGroupMember>(entity =>
            {
                entity.HasKey(e => new { e.GroupHostSystemId, e.GroupHostCssSiteId, e.MemberCssSiteId })
                    .HasName("PK_SITE_GROUP_MEMBER");

                entity.Property(e => e.PrimarySiteFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReceiveReplicatedDataFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SiteHostConfiguration>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.HostSerialNumber })
                    .HasName("PK_SITE_HOST_CONFIGURATION");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Master)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrimaryNetworkAddress).IsUnicode(false);

                entity.Property(e => e.SecondaryNetworkAddress).IsUnicode(false);
            });

            modelBuilder.Entity<SiteHourlySummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.SnapshotDatetime, e.DenominationId })
                    .HasName("pk_site_hourly_summary");

                entity.Property(e => e.DenominationId).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SitePointsConversion>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.SystemSiteTrackTypeIdFrom, e.SystemSiteTrackTypeIdTo })
                    .HasName("pk_site_points_conversion");
            });

            modelBuilder.Entity<SjrEgm>(entity =>
            {
                entity.HasIndex(e => new { e.ManufacturerId, e.EgmSerialNumber }, "sjr_egm_pk")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Bill100Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill10Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill20Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill50Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill5Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cabinet).IsUnicode(false);

                entity.Property(e => e.CoinAcceptorPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.HopperPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptorEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptorPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlayerTrackingInstalled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Protocol).IsUnicode(false);

                entity.Property(e => e.ProtocolVersion).IsUnicode(false);

                entity.Property(e => e.SoftwareSetAppNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TicketPrinterPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TouchScreenPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<SjrUgsegms>(entity =>
            {
                entity.HasKey(e => new { e.EgmSerialNumber, e.ManufacturerId });

                entity.Property(e => e.Bill100Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill10Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill20Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill50Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bill5Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cabinet).IsUnicode(false);

                entity.Property(e => e.CoinAcceptorPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.HopperPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptorEnabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoteAcceptorPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlayerTrackingInstalled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Protocol).IsUnicode(false);

                entity.Property(e => e.ProtocolVersion).IsUnicode(false);

                entity.Property(e => e.SoftwareSetAppNumber)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Spare2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TicketPrinterPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TouchScreenPresent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<SpendRewardCriterion>(entity =>
            {
                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SpendRewardCriterionAudit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Action)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Criteria).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<SpendRewardEvent>(entity =>
            {
                entity.HasKey(e => new { e.SpendRewardCriterionId, e.CssSiteId, e.CardId, e.RewardDatetime, e.ActualRepeatCount })
                    .HasName("pk_spend_reward_event");
            });

            modelBuilder.Entity<SpendRewardResetTimer>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<StateProvince>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.IsoCode).IsUnicode(false);

                entity.Property(e => e.PhonePrefix).IsUnicode(false);
            });

            modelBuilder.Entity<SystemLegislativeRequirement>(entity =>
            {
                entity.HasKey(e => new { e.CardFunctionalityId, e.LegislativeRequirementId })
                    .HasName("PK_SYSTEM_LEGISLATIVE_REQUIREM");
            });

            modelBuilder.Entity<SystemSite>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.SystemId })
                    .HasName("PK_SYSTEM_SITE");

                entity.Property(e => e.LicencedOperator).IsUnicode(false);
            });

            modelBuilder.Entity<SystemSiteTrackingType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DisplayName).IsUnicode(false);

                entity.Property(e => e.GeminiDisplayFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GroupFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.KioskDisplayFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TaxRate>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.RateType).IsUnicode(false);
            });

            modelBuilder.Entity<ThirdPartyEvent>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.AdditionalData).IsUnicode(false);

                entity.Property(e => e.Source).IsUnicode(false);

                entity.Property(e => e.TerminalId).IsUnicode(false);
            });

            modelBuilder.Entity<ThirdPartyEventType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<ThirdPartyTerminalDevice>(entity =>
            {
                entity.HasKey(e => new { e.TerminalId, e.SiteId })
                    .HasName("PK_THIRD_PARTY_TERMINAL_DEVICE");

                entity.Property(e => e.TerminalId).IsUnicode(false);
            });

            modelBuilder.Entity<ThirdPartyTerminalType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<TitoImplementationType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<TitoTicketTransaction>(entity =>
            {
                entity.HasKey(e => new { e.TicketBarcode, e.TransactionDatetime, e.TitoTicketTransactionTypeId })
                    .HasName("PK_TITO_TICKET_TRANSACTION");

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<TitoTicketTransactionSummary>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.EgmSerialNumber, e.SummaryLevel, e.TransactionDatetime, e.TitoTicketTransactionTypeId, e.TitoImplementationTypeId, e.Floor, e.Bank, e.Position, e.Ssan, e.DenominationId })
                    .HasName("pk_tito_ticket_transaction_summary");

                entity.Property(e => e.Ssan).IsUnicode(false);
            });

            modelBuilder.Entity<TitoTicketTransactionType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<TitoTransactionErrorFound>(entity =>
            {
                entity.HasKey(e => new { e.Barcode, e.DateFound })
                    .HasName("PK__tito_transaction__1ED10DBF");

                entity.Property(e => e.Txstatus).IsUnicode(false);
            });

            modelBuilder.Entity<Token>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Representation).IsUnicode(false);
            });

            modelBuilder.Entity<TrackingTypePermission>(entity =>
            {
                entity.HasKey(e => new { e.TrackingTypeId, e.TransactionTypeId })
                    .HasName("PK_TRACKING_TYPE_PERMISSION");
            });

            modelBuilder.Entity<TransactionLock>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.TargetId, e.TargetType })
                    .HasName("PK_TRANSACTION_LOCK");

                entity.Property(e => e.TargetType).IsUnicode(false);

                entity.Property(e => e.Holder).IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);
            });

            modelBuilder.Entity<TransactionLockHistory>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Holder).IsUnicode(false);

                entity.Property(e => e.Reason).IsUnicode(false);

                entity.Property(e => e.TargetType).IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);
            });

            modelBuilder.Entity<TurnoverThreshold>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<TurnoverThresholdGroup>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<Vc0Table>(entity =>
            {
                entity.HasKey(e => new { e.Mid, e.Serial, e.Gvn, e.ReportDate, e.Variation });
            });

            modelBuilder.Entity<VoucherConfiguration>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.VoucherTypeId })
                    .HasName("voucher_co_4870088161");

                entity.Property(e => e.Comment1).IsUnicode(false);

                entity.Property(e => e.Comment2).IsUnicode(false);

                entity.Property(e => e.Comment3).IsUnicode(false);

                entity.Property(e => e.ManualCreation)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VoucherSignatureConfig>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.SiteId, e.VoucherTypeId })
                    .HasName("voucher_si_5190089301");

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<VoucherSignatures>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.VoucherTypeId, e.ConfigId, e.RowNumber, e.ColumnNumber })
                    .HasName("voucher_si_5510090441");

                entity.Property(e => e.SignatureLabel).IsUnicode(false);
            });

            modelBuilder.Entity<VoucherType>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Description })
                    .HasName("voucher_ty_5830091581");

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<WaJackpotPool>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PoolNumber });

                entity.Property(e => e.AllowPrizeSharing)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LevelName).IsUnicode(false);

                entity.Property(e => e.PoolName).IsUnicode(false);

                entity.Property(e => e.PoolType).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubPoolType).IsUnicode(false);

                entity.Property(e => e.WeightedFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<WabGroupMember>(entity =>
            {
                entity.HasKey(e => new { e.GroupSiteId, e.MemberSiteId })
                    .HasName("wab_group__18824897851");
            });

            modelBuilder.Entity<WinRewardConversion>(entity =>
            {
                entity.HasKey(e => new { e.CssSiteId, e.WinRewardCriterionId, e.RatingGradeId, e.TrackingTypeId })
                    .HasName("pk_win_reward_conversion");
            });

            modelBuilder.Entity<WinRewardConversionAudit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Action)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<WinRewardCriterion>(entity =>
            {
                entity.Property(e => e.Colour).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<WinRewardCriterionAudit>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Action)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colour).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.EnabledFlag)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<WinRewardEvent>(entity =>
            {
                entity.HasKey(e => new { e.WinRewardCriterionId, e.CssSiteId, e.CardId, e.RewardDatetime })
                    .HasName("pk_win_reward_event");
            });

            modelBuilder.Entity<WorkingSet>(entity =>
            {
                entity.HasKey(e => new { e.WorkingSetName, e.WorkingSetType })
                    .HasName("working_se_8681981431");

                entity.Property(e => e.WorkingSetName).IsUnicode(false);

                entity.Property(e => e.WorkingSetType).IsUnicode(false);

                entity.Property(e => e.FallbackSet).IsUnicode(false);

                entity.Property(e => e.PrerunScript).IsUnicode(false);
            });

            modelBuilder.Entity<Zone>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}