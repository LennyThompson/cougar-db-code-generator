// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using CougarDb.Models.Cougar.StoredProcedures;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CougarDb.Models.Context.StoredProcedures
{
    public partial class CougarStoredProcedureContext
    {
        private ICougarStoredProcedureContextProcedures _procedures;

        public virtual ICougarStoredProcedureContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CougarStoredProcedureContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ICougarStoredProcedureContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<account_transaction_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<add_floor_controlResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<add_tito_lock_transactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ALH_points_inResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<card_session_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<card_session_summarise_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<card_session_summarise_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<card_session_summarise_v4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<check_batch_update_patronResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DatesToReReportDM0Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_downtime_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_game_meters_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_game_meters_summarise_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_game_meters_summarise_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_meters_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_meters_summarise_accountsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_meters_summarise_accts_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_meters_summarise_accts_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_meters_summarise_accts_v4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_meters_summarise_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_meters_summarise_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<egm_meters_summarise_v4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<expire_egm_ticket_transactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<extract_barrel_draw_log_from_summaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<F1SAFFileDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<game_meters_perfmon_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<game_meters_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_account_balancesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_accounts_to_purgeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_barrel_draw_log_records_to_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_batch_confirm_pendingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_cbg_host_inactive_accountsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_cbg_host_site_account_balancesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_cbg_unreconciled_transactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_device_configResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_excluded_patron_analysisResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_excluded_s_patron_analysisResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_floor_crt_available_payoutsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_point_purge_config_for_dateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_spend_reward_for_cardResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_tag_configResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<get_transaction_lockResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<jackpot_meters_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<jackpot_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<jng_lockResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_get_patron_statementResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_account_trans_combineResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_account_trans_pendingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_account_trans_updateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_i_g_bet_trans_completeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_i_g_bet_trans_pendingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_i_g_bet_trans_updateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_keno_bet_cancel_completeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_keno_bet_trans_completeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_keno_bet_trans_pendingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<k_log_keno_bet_trans_updateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_agingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_aging_gResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_aging_hostResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_aging_siteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_cancelledResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_cancelled_gResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_completeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_complete_gResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_deltasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_deltas_gResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_mid_status_gResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_pend_tfrResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_pend_tfr_gResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_pendingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_pending_gResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_updateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_account_trans_update_tfrResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_card_session_deltasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_card_session_deltas_gResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_card_session_deltas_g_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_card_session_deltas_g_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_card_session_deltas_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_card_session_deltas_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_conrad_session_detailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_conrad_session_details_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_cashless_transaction_summaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltas_accountsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltas_accounts_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltas_accounts_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltas_accounts_v4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltas_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltas_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltas_v4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_deltas_v5Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_egm_downtimeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_game_deltasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_game_deltas_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_game_deltas_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_game_meters_summaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_game_perfom_meter_deltasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_jackpot_deltasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_jackpot_deltas_hitsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_jackpot_deltas_waResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_jackpot_hit_adjustmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<log_jackpot_summaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<max_epay_get_payments_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<max_epay_pending_payouts_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<meters_txt_fileResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<meters_txt_headerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<reassign_egm_transactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<reissue_egm_transaction_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<reissue_egm_transaction_v4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<reissue_egm_transaction_v5Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<reissue_egm_transaction_v6Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<remove_floor_controlResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<remove_max_change_game_configResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_coin_count_clearanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_egm_jackpot_group_multi_variationsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_machine_note_denomResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_machine_note_denom_2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_machine_revenue_statResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_non_compliant_egm_jackpot_pool_game_variationsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_non_compliant_egm_jackpot_poolsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_non_compliant_egm_jackpot_pools_v2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_non_compliant_jackpot_configsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<report_note_count_clearanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<rpt_WAJWinsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<site_hourly_meters_summaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_global_jackpot_performance_monthly_reportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_mgw_weekly_analysis_reportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<tp_JackpotMetersVsChargesReconciliationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<tp_rptALHWeeklyAnalysisResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<tp_rptColesWeeklyAnalysisResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<tp_rptEGMsIndividualPerformanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<tp_rptEGMsWeeklyPerformanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<tp_rptEGMsWeeklyPerformanceDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<tp_rptJokersJackpotEGMsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<tp_rptWeeklyAnalysisResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TransferMC0MonthlyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TransferQOGRInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TransferSakuraInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_account_summaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_cashier_float_balanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_cashier_float_balance_denominationsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_clearance_acceptResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_clearance_acceptallResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_clearance_adjustmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_clearance_clearResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_clearance_collectionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_clearance_countResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_clearance_countadjustResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_clearance_enddayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_column_bet_restrictionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_column_patronResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_cashless_transaction_summaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v10Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v11Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v12Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v5Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v6Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v7Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v8Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_egm_transaction_v9Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_headcount_summariseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_patron_card_statusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_points_play_transactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_revenue_summaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<update_voucherResult>().HasNoKey().ToView(null);
        }
    }

    public partial class CougarStoredProcedureContextProcedures : ICougarStoredProcedureContextProcedures
    {
        private readonly CougarStoredProcedureContext _context;

        public CougarStoredProcedureContextProcedures(CougarStoredProcedureContext context)
        {
            _context = context;
        }

        public virtual async Task<int> abandon_card_based_accountAsync(decimal? cbg_account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[abandon_card_based_account] @cbg_account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<account_transaction_summariseResult>> account_transaction_summariseAsync(decimal? account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, decimal? amount, decimal? new_bal, string status, byte? system_id, string desc, int? trans_id, short? member_site, double? exchange_rate, decimal? object_id_1, decimal? object_id_2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_bal",
                    Precision = 18,
                    Value = new_bal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "member_site",
                    Value = member_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "exchange_rate",
                    Value = exchange_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "object_id_1",
                    Precision = 18,
                    Value = object_id_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "object_id_2",
                    Precision = 18,
                    Value = object_id_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<account_transaction_summariseResult>("EXEC @returnValue = [dbo].[account_transaction_summarise] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @amount, @new_bal, @status, @system_id, @desc, @trans_id, @member_site, @exchange_rate, @object_id_1, @object_id_2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_audit_recordAsync(short? site_id, string user_id, short? operation_id, DateTime? l_datetime, DateTime? a_datetime, int? egm_serialno, int? player_id, int? amount, string comment, int? amount_2, string comment1, string comment2, string comment3, string comment4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "operation_id",
                    Value = operation_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "l_datetime",
                    Value = l_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "a_datetime",
                    Value = a_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serialno",
                    Value = egm_serialno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = 50,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount_2",
                    Value = amount_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment1",
                    Size = 50,
                    Value = comment1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment2",
                    Size = 50,
                    Value = comment2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment3",
                    Size = 50,
                    Value = comment3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment4",
                    Size = 50,
                    Value = comment4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_audit_record] @site_id, @user_id, @operation_id, @l_datetime, @a_datetime, @egm_serialno, @player_id, @amount, @comment, @amount_2, @comment1, @comment2, @comment3, @comment4", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_barrel_draw_logAsync(short? site_id, decimal? promotion_id, int? ticket_number, DateTime? ticket_datetime, int? patron_card_id, decimal? patron_id, int? member_id, int? egm_serial_number, decimal? criterion_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_datetime",
                    Value = ticket_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "patron_card_id",
                    Value = patron_card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "member_id",
                    Value = member_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "criterion_id",
                    Precision = 18,
                    Value = criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_barrel_draw_log] @site_id, @promotion_id, @ticket_number, @ticket_datetime, @patron_card_id, @patron_id, @member_id, @egm_serial_number, @criterion_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_barrel_draw_log_v2Async(short? site_id, decimal? promotion_id, int? ticket_number, DateTime? ticket_datetime, int? patron_card_id, decimal? patron_id, int? member_id, int? egm_serial_number, decimal? criterion_id, DateTime? purge_datetime, string printed_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_datetime",
                    Value = ticket_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "patron_card_id",
                    Value = patron_card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "member_id",
                    Value = member_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "criterion_id",
                    Precision = 18,
                    Value = criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "purge_datetime",
                    Value = purge_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "printed_flag",
                    Size = 1,
                    Value = printed_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_barrel_draw_log_v2] @site_id, @promotion_id, @ticket_number, @ticket_datetime, @patron_card_id, @patron_id, @member_id, @egm_serial_number, @criterion_id, @purge_datetime, @printed_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_acc_balance_varianceAsync(short? site_id, DateTime? variance_datetime, decimal? cbg_account_id, int? actual_balance, int? expected_balance, int? variance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "variance_datetime",
                    Value = variance_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "actual_balance",
                    Value = actual_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "expected_balance",
                    Value = expected_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "variance",
                    Value = variance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_acc_balance_variance] @site_id, @variance_datetime, @cbg_account_id, @actual_balance, @expected_balance, @variance", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_account_cash_transactionAsync(decimal? cbg_account_id, DateTime? transaction_dt, int? card_id, byte? cbg_account_trans_type, short? site_id, decimal? amount, decimal? new_balance, int? egm_serial_number, string user_id, short? css_site_id, int? transaction_id, decimal? employee_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_dt",
                    Value = transaction_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_trans_type",
                    Value = cbg_account_trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_balance",
                    Precision = 18,
                    Value = new_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_account_cash_transaction] @cbg_account_id, @transaction_dt, @card_id, @cbg_account_trans_type, @site_id, @amount, @new_balance, @egm_serial_number, @user_id, @css_site_id, @transaction_id, @employee_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_account_cash_transaction_v2Async(decimal? cbg_account_id, DateTime? transaction_dt, int? card_id, byte? cbg_account_trans_type, short? site_id, decimal? amount, decimal? new_balance, int? egm_serial_number, string user_id, short? css_site_id, int? transaction_id, decimal? employee_id, short? floor, short? bank, short? position, string ssan, short? denomination_id, decimal? cheque_amount, string cheque_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_dt",
                    Value = transaction_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_trans_type",
                    Value = cbg_account_trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_balance",
                    Precision = 18,
                    Value = new_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Precision = 18,
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 30,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_account_cash_transaction_v2] @cbg_account_id, @transaction_dt, @card_id, @cbg_account_trans_type, @site_id, @amount, @new_balance, @egm_serial_number, @user_id, @css_site_id, @transaction_id, @employee_id, @floor, @bank, @position, @ssan, @denomination_id, @cheque_amount, @cheque_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_account_cash_transaction_v3Async(decimal? cbg_account_id, DateTime? transaction_dt, int? card_id, byte? cbg_account_trans_type, short? site_id, decimal? amount, decimal? new_balance, int? egm_serial_number, string user_id, short? css_site_id, int? transaction_id, decimal? employee_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_dt",
                    Value = transaction_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_trans_type",
                    Value = cbg_account_trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_balance",
                    Precision = 18,
                    Value = new_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 15,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_account_cash_transaction_v3] @cbg_account_id, @transaction_dt, @card_id, @cbg_account_trans_type, @site_id, @amount, @new_balance, @egm_serial_number, @user_id, @css_site_id, @transaction_id, @employee_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_account_cash_transaction_v4Async(decimal? cbg_account_id, DateTime? transaction_dt, int? card_id, byte? cbg_account_trans_type, short? site_id, decimal? amount, decimal? new_balance, int? egm_serial_number, string user_id, short? css_site_id, int? transaction_id, decimal? employee_id, short? floor, short? bank, short? position, string ssan, short? denomination_id, decimal? cheque_amount, string cheque_number, decimal? cash_amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_dt",
                    Value = transaction_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_trans_type",
                    Value = cbg_account_trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_balance",
                    Precision = 18,
                    Value = new_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Precision = 18,
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 30,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Precision = 18,
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_account_cash_transaction_v4] @cbg_account_id, @transaction_dt, @card_id, @cbg_account_trans_type, @site_id, @amount, @new_balance, @egm_serial_number, @user_id, @css_site_id, @transaction_id, @employee_id, @floor, @bank, @position, @ssan, @denomination_id, @cheque_amount, @cheque_number, @cash_amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_account_patronAsync(decimal? patron_id, decimal? cbg_account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_account_patron] @patron_id, @cbg_account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_account_pinAsync(decimal? cbg_account_id, string pin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pin",
                    Size = 16,
                    Value = pin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_account_pin] @cbg_account_id, @pin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_auditAsync(short? site_id, decimal? cbg_account_id, short? cbg_audit_operation_id, DateTime? audit_operation_datetime, DateTime? logged_datetime, string description, string user_id, string supervisor_id, int? egm_serial_number, decimal? amount_1, decimal? amount_2, string comment_1, string comment_2, string comment_3, string comment_4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_audit_operation_id",
                    Value = cbg_audit_operation_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "audit_operation_datetime",
                    Value = audit_operation_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 255,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "supervisor_id",
                    Size = 10,
                    Value = supervisor_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount_1",
                    Precision = 18,
                    Value = amount_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount_2",
                    Precision = 18,
                    Value = amount_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 255,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 255,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 255,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 255,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_audit] @site_id, @cbg_account_id, @cbg_audit_operation_id, @audit_operation_datetime, @logged_datetime, @description, @user_id, @supervisor_id, @egm_serial_number, @amount_1, @amount_2, @comment_1, @comment_2, @comment_3, @comment_4", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_audit_v2Async(short? site_id, decimal? cbg_account_id, short? cbg_audit_operation_id, DateTime? audit_operation_datetime, DateTime? logged_datetime, string description, string user_id, string supervisor_id, int? egm_serial_number, decimal? amount_1, decimal? amount_2, string comment_1, string comment_2, string comment_3, string comment_4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_audit_operation_id",
                    Value = cbg_audit_operation_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "audit_operation_datetime",
                    Value = audit_operation_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 255,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "supervisor_id",
                    Size = 10,
                    Value = supervisor_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount_1",
                    Precision = 18,
                    Value = amount_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount_2",
                    Precision = 18,
                    Value = amount_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 255,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 255,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 255,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 255,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_audit_v2] @site_id, @cbg_account_id, @cbg_audit_operation_id, @audit_operation_datetime, @logged_datetime, @description, @user_id, @supervisor_id, @egm_serial_number, @amount_1, @amount_2, @comment_1, @comment_2, @comment_3, @comment_4", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_audit_v3Async(short? site_id, decimal? cbg_account_id, short? cbg_audit_operation_id, DateTime? audit_operation_datetime, DateTime? logged_datetime, string description, string user_id, string supervisor_id, int? egm_serial_number, decimal? amount_1, decimal? amount_2, string comment_1, string comment_2, string comment_3, string comment_4, int? session_id, int? device_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_audit_operation_id",
                    Value = cbg_audit_operation_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "audit_operation_datetime",
                    Value = audit_operation_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 255,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "supervisor_id",
                    Size = 10,
                    Value = supervisor_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount_1",
                    Precision = 18,
                    Value = amount_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount_2",
                    Precision = 18,
                    Value = amount_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 255,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 255,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 255,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 255,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "session_id",
                    Value = session_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "device_id",
                    Value = device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_audit_v3] @site_id, @cbg_account_id, @cbg_audit_operation_id, @audit_operation_datetime, @logged_datetime, @description, @user_id, @supervisor_id, @egm_serial_number, @amount_1, @amount_2, @comment_1, @comment_2, @comment_3, @comment_4, @session_id, @device_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_inactive_accountsAsync(decimal? cbg_account_id, short? site_id, int? account_balance, DateTime? inactive_datetime, string inactive_account_status, DateTime? closed_datetime, string funds_transferred_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "account_balance",
                    Value = account_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inactive_datetime",
                    Value = inactive_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "inactive_account_status",
                    Size = 10,
                    Value = inactive_account_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "closed_datetime",
                    Value = closed_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "funds_transferred_flag",
                    Size = 1,
                    Value = funds_transferred_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_inactive_accounts] @cbg_account_id, @site_id, @account_balance, @inactive_datetime, @inactive_account_status, @closed_datetime, @funds_transferred_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cbg_site_balance_summaryAsync(short? site_id, DateTime? balance_datetime, int? total_player_balance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "balance_datetime",
                    Value = balance_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "total_player_balance",
                    Value = total_player_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cbg_site_balance_summary] @site_id, @balance_datetime, @total_player_balance", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_config_groupAsync(string group_name, string item_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 20,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_config_group] @group_name, @item_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_config_itemAsync(int? site_id, string group_name, string item_name, int? number_1, string string_1, DateTime? date_1, decimal? decimal_1, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 20,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "number_1",
                    Value = number_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "string_1",
                    Size = 50,
                    Value = string_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_1",
                    Value = date_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "decimal_1",
                    Precision = 11,
                    Scale = 2,
                    Value = decimal_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_config_item] @site_id, @group_name, @item_name, @number_1, @string_1, @date_1, @decimal_1", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_cpi_audit_recordAsync(short? site_id, byte? transaction_type_id, DateTime? transaction_datetime, string server, DateTime? response_datetime, int? card_id, int? amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_type_id",
                    Value = transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "server",
                    Size = 20,
                    Value = server ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "response_datetime",
                    Value = response_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_cpi_audit_record] @site_id, @transaction_type_id, @transaction_datetime, @server, @response_datetime, @card_id, @amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_css_audit_recordAsync(string user_id, short? operation_id, DateTime? l_datetime, DateTime? a_datetime, byte? system_id, short? css_site_id, decimal? emp_id, decimal? patron_id, int? device, decimal? amount_1, decimal? amount_2, string comment1, string comment2, string comment3, string comment4, string comment5, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "operation_id",
                    Value = operation_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "l_datetime",
                    Value = l_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "a_datetime",
                    Value = a_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "emp_id",
                    Precision = 18,
                    Value = emp_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "device",
                    Value = device ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount_1",
                    Precision = 18,
                    Value = amount_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount_2",
                    Precision = 18,
                    Value = amount_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "comment1",
                    Size = 50,
                    Value = comment1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment2",
                    Size = 50,
                    Value = comment2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment3",
                    Size = 50,
                    Value = comment3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment4",
                    Size = 50,
                    Value = comment4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment5",
                    Size = 50,
                    Value = comment5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_css_audit_record] @user_id, @operation_id, @l_datetime, @a_datetime, @system_id, @css_site_id, @emp_id, @patron_id, @device, @amount_1, @amount_2, @comment1, @comment2, @comment3, @comment4, @comment5", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_css_config_groupAsync(string group_name, string item_name, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 20,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_css_config_group] @group_name, @item_name, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_css_eventAsync(DateTime? event_dt, DateTime? logged_dt, int? seq_no, byte? system_id, short? css_site_id, int? card_id, int? css_game, short? css_device, int? css_event, decimal? amount_1, decimal? amount_2, string description, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "event_dt",
                    Value = event_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "seq_no",
                    Value = seq_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_game",
                    Value = css_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_device",
                    Value = css_device ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_event",
                    Value = css_event ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount_1",
                    Precision = 18,
                    Value = amount_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount_2",
                    Precision = 18,
                    Value = amount_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 100,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_css_event] @event_dt, @logged_dt, @seq_no, @system_id, @css_site_id, @card_id, @css_game, @css_device, @css_event, @amount_1, @amount_2, @description, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_css_event_v2Async(DateTime? event_dt, DateTime? logged_dt, int? seq_no, byte? system_id, short? css_site_id, int? card_id, int? css_game, short? css_device, int? css_event, decimal? amount_1, decimal? amount_2, string description, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "event_dt",
                    Value = event_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "seq_no",
                    Value = seq_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_game",
                    Value = css_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_device",
                    Value = css_device ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_event",
                    Value = css_event ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount_1",
                    Precision = 18,
                    Value = amount_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount_2",
                    Precision = 18,
                    Value = amount_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 100,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_css_event_v2] @event_dt, @logged_dt, @seq_no, @system_id, @css_site_id, @card_id, @css_game, @css_device, @css_event, @amount_1, @amount_2, @description, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_css_site_to_groupAsync(byte? system_id, short? css_site_id, short? group_id, string site_premises, string grp_premises, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_id",
                    Value = group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_premises",
                    Size = 60,
                    Value = site_premises ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "grp_premises",
                    Size = 60,
                    Value = grp_premises ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_css_site_to_group] @system_id, @css_site_id, @group_id, @site_premises, @grp_premises, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_egmAsync(short? cur_site_id, int? egm_ser_num, short? template_id, int? plate_num, short? man_id, string type, string status, short? token_id, short? denom_id, short? max_games, short? cur_game, string cur_state, string protocol, string protocol_ver, string cabinet, string desc, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? poll_addr, int? tick_lim, string v_note_flg, string jt_id, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? rntl_amnt, int? max_all_inc, int? base_g_verno, short? prog_sig_tim, string touch_scrn, string coin_accptr, string hop_pres, string tik_ptr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "template_id",
                    Value = template_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "plate_num",
                    Value = plate_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 8,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_game",
                    Value = cur_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_state",
                    Size = 8,
                    Value = cur_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "poll_addr",
                    Value = poll_addr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jt_id",
                    Size = 12,
                    Value = jt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rntl_amnt",
                    Value = rntl_amnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_verno",
                    Value = base_g_verno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_accptr",
                    Size = 1,
                    Value = coin_accptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hop_pres",
                    Size = 1,
                    Value = hop_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_ptr_pres",
                    Size = 1,
                    Value = tik_ptr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 12,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 12,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 12,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 12,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 12,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_egm] @cur_site_id, @egm_ser_num, @template_id, @plate_num, @man_id, @type, @status, @token_id, @denom_id, @max_games, @cur_game, @cur_state, @protocol, @protocol_ver, @cabinet, @desc, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @poll_addr, @tick_lim, @v_note_flg, @jt_id, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @rntl_amnt, @max_all_inc, @base_g_verno, @prog_sig_tim, @touch_scrn, @coin_accptr, @hop_pres, @tik_ptr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_egm_gameAsync(int? egm_ser_num, short? gme_num, int? gme_type_id, int? curr_var_num, short? jp_grp_id, string enbld_flag, short? jp_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gme_num",
                    Value = gme_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "gme_type_id",
                    Value = gme_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "curr_var_num",
                    Value = curr_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jp_grp_id",
                    Value = jp_grp_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "enbld_flag",
                    Size = 1,
                    Value = enbld_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "jp_site",
                    Value = jp_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_egm_game] @egm_ser_num, @gme_num, @gme_type_id, @curr_var_num, @jp_grp_id, @enbld_flag, @jp_site", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<add_floor_controlResult>> add_floor_controlAsync(short? site_id, int? host_sn, string fc_name, short? weighting, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_sn",
                    Value = host_sn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fc_name",
                    Size = 8,
                    Value = fc_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "weighting",
                    Value = weighting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<add_floor_controlResult>("EXEC @returnValue = [dbo].[add_floor_control] @site_id, @host_sn, @fc_name, @weighting", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_game_typeAsync(int? id, short? gme_ver_num, string desc, string style, short? jp_levels, short? man_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gme_ver_num",
                    Value = gme_ver_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "style",
                    Size = 8,
                    Value = style ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jp_levels",
                    Value = jp_levels ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_game_type] @id, @gme_ver_num, @desc, @style, @jp_levels, @man_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_game_variationAsync(int? game_type_id, int? game_var_no, int? rtp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "game_type_id",
                    Value = game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_no",
                    Value = game_var_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rtp",
                    Value = rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_game_variation] @game_type_id, @game_var_no, @rtp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_locationAsync(short? site_id, short? floor, short? bank, short? pos, int? egm_ser_num, string pager_pos, string sec_id, string loop_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pos",
                    Value = pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pager_pos",
                    Size = 20,
                    Value = pager_pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sec_id",
                    Size = 20,
                    Value = sec_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 8,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_location] @site_id, @floor, @bank, @pos, @egm_ser_num, @pager_pos, @sec_id, @loop_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_loopAsync(short? site_id, string loop_name, string fc_name, string loop_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 8,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "fc_name",
                    Size = 8,
                    Value = fc_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "loop_type",
                    Size = 8,
                    Value = loop_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_loop] @site_id, @loop_name, @fc_name, @loop_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_loop_V2Async(short? site_id, string loop_name, string fc_name, string loop_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 8,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fc_name",
                    Size = 8,
                    Value = fc_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loop_type",
                    Size = 8,
                    Value = loop_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_loop_V2] @site_id, @loop_name, @fc_name, @loop_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_network_device_eventAsync(short? site_id, DateTime? event_datetime, DateTime? logged_datetime, decimal? network_device_id, short? event_category_id, string event_description, int? amount, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "event_datetime",
                    Value = event_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_id",
                    Precision = 18,
                    Value = network_device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "event_category_id",
                    Value = event_category_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "event_description",
                    Size = 255,
                    Value = event_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_network_device_event] @site_id, @event_datetime, @logged_datetime, @network_device_id, @event_category_id, @event_description, @amount, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_network_device_transactionAsync(int? site_id, decimal? network_device_id, DateTime? transaction_datetime, decimal? transaction_id, int? network_device_transaction_type_id, decimal? ticket_number, int? egm_serial_number, decimal? cbg_account_id, int? card_id, decimal? amount, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_id",
                    Precision = 18,
                    Value = network_device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_transaction_type_id",
                    Value = network_device_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_network_device_transaction] @site_id, @network_device_id, @transaction_datetime, @transaction_id, @network_device_transaction_type_id, @ticket_number, @egm_serial_number, @cbg_account_id, @card_id, @amount, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_network_device_transaction_v2Async(int? site_id, decimal? network_device_id, DateTime? transaction_datetime, decimal? transaction_id, int? network_device_transaction_type_id, decimal? ticket_number, int? egm_serial_number, decimal? cbg_account_id, int? card_id, decimal? amount, string user_id, decimal? barcode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_id",
                    Precision = 18,
                    Value = network_device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_transaction_type_id",
                    Value = network_device_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "barcode",
                    Precision = 18,
                    Value = barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_network_device_transaction_v2] @site_id, @network_device_id, @transaction_datetime, @transaction_id, @network_device_transaction_type_id, @ticket_number, @egm_serial_number, @cbg_account_id, @card_id, @amount, @user_id, @barcode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_pager_rating_gradeAsync(decimal? pager_id, int? rating_grade_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pager_id",
                    Precision = 18,
                    Value = pager_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_pager_rating_grade] @pager_id, @rating_grade_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_patron_accountAsync(decimal? patron_id, decimal? account_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_patron_account] @patron_id, @account_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_player_exclusion_host_auditAsync(decimal? transaction_id, short? site_id, decimal? patron_id, byte? transaction_type_id, byte? exclusion_type_id, DateTime? transaction_datetime, string user_id, string comment_1, string comment_2, string transaction_change_type, DateTime? audit_datetime, string host_user_id, short? new_exclusion_type_id, string new_comment_1, string new_comment_2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_type_id",
                    Value = transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "exclusion_type_id",
                    Value = exclusion_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 255,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 255,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_change_type",
                    Size = 15,
                    Value = transaction_change_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "audit_datetime",
                    Value = audit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "host_user_id",
                    Size = 16,
                    Value = host_user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_exclusion_type_id",
                    Value = new_exclusion_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "new_comment_1",
                    Size = 255,
                    Value = new_comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_comment_2",
                    Size = 255,
                    Value = new_comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_player_exclusion_host_audit] @transaction_id, @site_id, @patron_id, @transaction_type_id, @exclusion_type_id, @transaction_datetime, @user_id, @comment_1, @comment_2, @transaction_change_type, @audit_datetime, @host_user_id, @new_exclusion_type_id, @new_comment_1, @new_comment_2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_player_exclusion_host_audit_V2Async(decimal? transaction_id, short? site_id, decimal? patron_id, byte? transaction_type_id, string exclusion_type_id, DateTime? transaction_datetime, string user_id, string comment_1, string comment_2, string transaction_change_type, DateTime? audit_datetime, string host_user_id, string new_exclusion_type_id, string new_comment_1, string new_comment_2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_type_id",
                    Value = transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "exclusion_type_id",
                    Size = 30,
                    Value = exclusion_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 255,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 255,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_change_type",
                    Size = 15,
                    Value = transaction_change_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "audit_datetime",
                    Value = audit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "host_user_id",
                    Size = 16,
                    Value = host_user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_exclusion_type_id",
                    Size = 30,
                    Value = new_exclusion_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_comment_1",
                    Size = 255,
                    Value = new_comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_comment_2",
                    Size = 255,
                    Value = new_comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_player_exclusion_host_audit_V2] @transaction_id, @site_id, @patron_id, @transaction_type_id, @exclusion_type_id, @transaction_datetime, @user_id, @comment_1, @comment_2, @transaction_change_type, @audit_datetime, @host_user_id, @new_exclusion_type_id, @new_comment_1, @new_comment_2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_player_exclusion_transactionAsync(decimal? transaction_id, short? site_id, decimal? patron_id, byte? transaction_type_id, DateTime? transaction_datetime, string user_id, string comment_1, string comment_2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_type_id",
                    Value = transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 255,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 255,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_player_exclusion_transaction] @transaction_id, @site_id, @patron_id, @transaction_type_id, @transaction_datetime, @user_id, @comment_1, @comment_2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_poolAsync(short? site_id, int? pool_num, string pool_type, string pool_name, int? reset, int? max_val, float? inc, DateTime? created, DateTime? retired, int? current_val, DateTime? cur_val_dt, DateTime? last_hit, string wghted_flag, int? cur_fil_val, int? cur_ovrflow, string prze_share, int? update_time, string sub_type, string status, int? autopay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_type",
                    Size = 8,
                    Value = pool_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_val",
                    Value = max_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inc",
                    Value = inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Real,
                },
                new SqlParameter
                {
                    ParameterName = "created",
                    Value = created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "retired",
                    Value = retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "current_val",
                    Value = current_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_val_dt",
                    Value = cur_val_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_hit",
                    Value = last_hit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cur_fil_val",
                    Value = cur_fil_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_ovrflow",
                    Value = cur_ovrflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "update_time",
                    Value = update_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sub_type",
                    Size = 8,
                    Value = sub_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "autopay",
                    Value = autopay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_pool] @site_id, @pool_num, @pool_type, @pool_name, @reset, @max_val, @inc, @created, @retired, @current_val, @cur_val_dt, @last_hit, @wghted_flag, @cur_fil_val, @cur_ovrflow, @prze_share, @update_time, @sub_type, @status, @autopay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_pool_deviceAsync(short? pl_site_id, int? pool_num, int? egm_ser_num, short? gme_num, int? lh_meter, int? overflow, string dev_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pl_site_id",
                    Value = pl_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gme_num",
                    Value = gme_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "lh_meter",
                    Value = lh_meter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "overflow",
                    Value = overflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dev_type",
                    Size = 8,
                    Value = dev_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_pool_device] @pl_site_id, @pool_num, @egm_ser_num, @gme_num, @lh_meter, @overflow, @dev_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_pool_groupAsync(short? site_id, short? group_id, string desc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_id",
                    Value = group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_pool_group] @site_id, @group_id, @desc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_pool_group_levelAsync(short? site_id, short? jp_grp_id, short? level_num, short? pool_site, int? pool_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "jp_grp_id",
                    Value = jp_grp_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "level_num",
                    Value = level_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site",
                    Value = pool_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_pool_group_level] @site_id, @jp_grp_id, @level_num, @pool_site, @pool_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_pool_group_v2Async(short? site_id, short? group_id, string desc, string group_type, string shared_progressive_flag, DateTime? date_retired, int? approval_number, string approval_name, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_id",
                    Value = group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "group_type",
                    Size = 1,
                    Value = group_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "shared_progressive_flag",
                    Size = 1,
                    Value = shared_progressive_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "date_retired",
                    Value = date_retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "approval_number",
                    Value = approval_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "approval_name",
                    Size = 20,
                    Value = approval_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_pool_group_v2] @site_id, @group_id, @desc, @group_type, @shared_progressive_flag, @date_retired, @approval_number, @approval_name, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_pool_v2Async(short? site_id, int? pool_num, string pool_type, string pool_name, int? reset, int? max_val, float? inc, DateTime? created, DateTime? retired, int? current_val, DateTime? cur_val_dt, DateTime? last_hit, string wghted_flag, int? cur_fil_val, int? cur_ovrflow, string prze_share, int? update_time, string sub_type, string status, int? autopay, double? total_rtp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_type",
                    Size = 8,
                    Value = pool_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_val",
                    Value = max_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inc",
                    Value = inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Real,
                },
                new SqlParameter
                {
                    ParameterName = "created",
                    Value = created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "retired",
                    Value = retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "current_val",
                    Value = current_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_val_dt",
                    Value = cur_val_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_hit",
                    Value = last_hit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cur_fil_val",
                    Value = cur_fil_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_ovrflow",
                    Value = cur_ovrflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "update_time",
                    Value = update_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sub_type",
                    Size = 8,
                    Value = sub_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "autopay",
                    Value = autopay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_pool_v2] @site_id, @pool_num, @pool_type, @pool_name, @reset, @max_val, @inc, @created, @retired, @current_val, @cur_val_dt, @last_hit, @wghted_flag, @cur_fil_val, @cur_ovrflow, @prze_share, @update_time, @sub_type, @status, @autopay, @total_rtp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_pool_v3Async(short? site_id, int? pool_num, string pool_type, string pool_name, int? reset, int? max_val, float? inc, DateTime? created, DateTime? retired, int? current_val, DateTime? cur_val_dt, DateTime? last_hit, string wghted_flag, int? cur_fil_val, int? cur_ovrflow, string prze_share, int? update_time, string sub_type, string status, int? autopay, double? total_rtp, double? auxiliary_rtp, string level_name, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_type",
                    Size = 8,
                    Value = pool_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_val",
                    Value = max_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inc",
                    Value = inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Real,
                },
                new SqlParameter
                {
                    ParameterName = "created",
                    Value = created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "retired",
                    Value = retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "current_val",
                    Value = current_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_val_dt",
                    Value = cur_val_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_hit",
                    Value = last_hit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "cur_fil_val",
                    Value = cur_fil_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_ovrflow",
                    Value = cur_ovrflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "update_time",
                    Value = update_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sub_type",
                    Size = 8,
                    Value = sub_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "autopay",
                    Value = autopay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "auxiliary_rtp",
                    Value = auxiliary_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "level_name",
                    Size = 19,
                    Value = level_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_pool_v3] @site_id, @pool_num, @pool_type, @pool_name, @reset, @max_val, @inc, @created, @retired, @current_val, @cur_val_dt, @last_hit, @wghted_flag, @cur_fil_val, @cur_ovrflow, @prze_share, @update_time, @sub_type, @status, @autopay, @total_rtp, @auxiliary_rtp, @level_name, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_portAsync(short? site_id, int? host_sn, short? port, string loop_name, short? weighting, string remote_port, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_sn",
                    Value = host_sn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "port",
                    Value = port ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 8,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "weighting",
                    Value = weighting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "remote_port",
                    Size = 30,
                    Value = remote_port ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_port] @site_id, @host_sn, @port, @loop_name, @weighting, @remote_port", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_port_V2Async(short? site_id, int? host_sn, short? port, string loop_name, short? weighting, string remote_port, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_sn",
                    Value = host_sn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "port",
                    Value = port ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 8,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "weighting",
                    Value = weighting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "remote_port",
                    Size = 30,
                    Value = remote_port ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_port_V2] @site_id, @host_sn, @port, @loop_name, @weighting, @remote_port", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_qogr_approved_technicianAsync(string name, string licence_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 30,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "licence_number",
                    Size = 15,
                    Value = licence_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_qogr_approved_technician] @name, @licence_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_qogr_files_sent_recordAsync(string filename, string date_sent, string the_file, int? no_of_recs, string date_of_data, short? licence_op_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filename",
                    Size = 12,
                    Value = filename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_sent",
                    Size = 10,
                    Value = date_sent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "the_file",
                    Size = 10,
                    Value = the_file ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_recs",
                    Value = no_of_recs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date_of_data",
                    Size = 10,
                    Value = date_of_data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "licence_op_number",
                    Value = licence_op_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_qogr_files_sent_record] @filename, @date_sent, @the_file, @no_of_recs, @date_of_data, @licence_op_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_qogr_seal_approvalAsync(short? site_id, int? serial_number, DateTime? start_datetime, string name, string licence_number, string old_seal_number, string new_seal_number, int? authority_number, short? device_type_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_number",
                    Value = serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 30,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "licence_number",
                    Size = 15,
                    Value = licence_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "old_seal_number",
                    Size = 15,
                    Value = old_seal_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_seal_number",
                    Size = 15,
                    Value = new_seal_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "authority_number",
                    Value = authority_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "device_type_id",
                    Value = device_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_qogr_seal_approval] @site_id, @serial_number, @start_datetime, @name, @licence_number, @old_seal_number, @new_seal_number, @authority_number, @device_type_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_report_usageAsync(short? site_id, string report_name, DateTime? run_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "report_name",
                    Size = 100,
                    Value = report_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "run_datetime",
                    Value = run_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_report_usage] @site_id, @report_name, @run_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_reports_to_max_sysAsync(string report_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "report_name",
                    Size = 100,
                    Value = report_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_reports_to_max_sys] @report_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_siteAsync(short? id, int? licence_num, string licence_name, string premises, string address, string locality, string state, string country, string post_code, string contact_name, string phone, string fax, string pager, string mobile, string email, string lic_op, short? app_egm_nums, string lic_type, string lic_status, DateTime? lic_date, DateTime? expiry_date, string stat_div, int? app_loc_id, string jurisdiction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "licence_num",
                    Value = licence_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "licence_name",
                    Size = 60,
                    Value = licence_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "premises",
                    Size = 60,
                    Value = premises ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 60,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Size = 30,
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 50,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "contact_name",
                    Size = 40,
                    Value = contact_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phone",
                    Size = 20,
                    Value = phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fax",
                    Size = 20,
                    Value = fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pager",
                    Size = 20,
                    Value = pager ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_op",
                    Size = 30,
                    Value = lic_op ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "app_egm_nums",
                    Value = app_egm_nums ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "lic_type",
                    Size = 4,
                    Value = lic_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_status",
                    Size = 4,
                    Value = lic_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_date",
                    Value = lic_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stat_div",
                    Size = 4,
                    Value = stat_div ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "app_loc_id",
                    Value = app_loc_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction",
                    Size = 20,
                    Value = jurisdiction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_site] @id, @licence_num, @licence_name, @premises, @address, @locality, @state, @country, @post_code, @contact_name, @phone, @fax, @pager, @mobile, @email, @lic_op, @app_egm_nums, @lic_type, @lic_status, @lic_date, @expiry_date, @stat_div, @app_loc_id, @jurisdiction", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_site_controllerAsync(short? site_id, int? host_ser_num, string desc, string prim_na, string sec_na, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_ser_num",
                    Value = host_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prim_na",
                    Size = 30,
                    Value = prim_na ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sec_na",
                    Size = 30,
                    Value = sec_na ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_site_controller] @site_id, @host_ser_num, @desc, @prim_na, @sec_na", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_site_controller_v2Async(short? site_id, int? host_ser_num, string desc, string prim_na, string sec_na, string master, int? mate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_ser_num",
                    Value = host_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prim_na",
                    Size = 30,
                    Value = prim_na ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sec_na",
                    Size = 30,
                    Value = sec_na ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "master",
                    Size = 1,
                    Value = master ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mate",
                    Value = mate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_site_controller_v2] @site_id, @host_ser_num, @desc, @prim_na, @sec_na, @master, @mate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_site_group_memberAsync(byte? gp_host_sys, short? gp_host_site, short? mem_site, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gp_host_sys",
                    Value = gp_host_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "gp_host_site",
                    Value = gp_host_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "mem_site",
                    Value = mem_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_site_group_member] @gp_host_sys, @gp_host_site, @mem_site, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_site_v2Async(short? id, int? licence_num, string licence_name, string premises, string address, string locality, string state, string country, string post_code, string contact_name, string phone, string fax, string pager, string mobile, string email, string lic_op, short? app_egm_nums, string lic_type, string lic_status, DateTime? lic_date, DateTime? expiry_date, string stat_div, int? app_loc_id, string jurisdiction, short? jurisdiction_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "licence_num",
                    Value = licence_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "licence_name",
                    Size = 60,
                    Value = licence_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "premises",
                    Size = 60,
                    Value = premises ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 60,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Size = 30,
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 50,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "contact_name",
                    Size = 40,
                    Value = contact_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phone",
                    Size = 20,
                    Value = phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fax",
                    Size = 20,
                    Value = fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pager",
                    Size = 20,
                    Value = pager ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_op",
                    Size = 30,
                    Value = lic_op ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "app_egm_nums",
                    Value = app_egm_nums ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "lic_type",
                    Size = 4,
                    Value = lic_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_status",
                    Size = 4,
                    Value = lic_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_date",
                    Value = lic_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stat_div",
                    Size = 4,
                    Value = stat_div ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "app_loc_id",
                    Value = app_loc_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction",
                    Size = 20,
                    Value = jurisdiction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction_id",
                    Value = jurisdiction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_site_v2] @id, @licence_num, @licence_name, @premises, @address, @locality, @state, @country, @post_code, @contact_name, @phone, @fax, @pager, @mobile, @email, @lic_op, @app_egm_nums, @lic_type, @lic_status, @lic_date, @expiry_date, @stat_div, @app_loc_id, @jurisdiction, @jurisdiction_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_third_party_eventAsync(int? site_id, DateTime? event_datetime, short? third_party_event_type_id, string source, int? egm_serial_number, decimal? ticket_number, string terminal_id, short? third_party_terminal_type_id, string additional_data, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "event_datetime",
                    Value = event_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "third_party_event_type_id",
                    Value = third_party_event_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "source",
                    Size = 101,
                    Value = source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "terminal_id",
                    Size = 81,
                    Value = terminal_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "third_party_terminal_type_id",
                    Value = third_party_terminal_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "additional_data",
                    Size = 255,
                    Value = additional_data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_third_party_event] @site_id, @event_datetime, @third_party_event_type_id, @source, @egm_serial_number, @ticket_number, @terminal_id, @third_party_terminal_type_id, @additional_data", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<add_tito_lock_transactionResult>> add_tito_lock_transactionAsync(decimal? ticket_barcode, DateTime? transaction_datetime, short? site_id, short? tito_ticket_transaction_type_id, int? amount, short? tito_implementation_type_id, int? egm_serial_number, short? floor, short? bank, short? position, string ssan, short? denomination_id, string user_id, decimal? network_device_id, decimal? ticket_number, string lock_token, string holder, int? duration, string reason, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ticket_barcode",
                    Precision = 18,
                    Value = ticket_barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tito_ticket_transaction_type_id",
                    Value = tito_ticket_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tito_implementation_type_id",
                    Value = tito_implementation_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_id",
                    Precision = 18,
                    Value = network_device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "lock_token",
                    Size = 256,
                    Value = lock_token ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "holder",
                    Size = 256,
                    Value = holder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "duration",
                    Value = duration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reason",
                    Size = 20,
                    Value = reason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<add_tito_lock_transactionResult>("EXEC @returnValue = [dbo].[add_tito_lock_transaction] @ticket_barcode, @transaction_datetime, @site_id, @tito_ticket_transaction_type_id, @amount, @tito_implementation_type_id, @egm_serial_number, @floor, @bank, @position, @ssan, @denomination_id, @user_id, @network_device_id, @ticket_number, @lock_token, @holder, @duration, @reason", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_tito_ticket_transactionAsync(decimal? ticket_barcode, DateTime? transaction_datetime, short? site_id, short? tito_ticket_transaction_type_id, int? amount, short? tito_implementation_type_id, int? egm_serial_number, short? floor, short? bank, short? position, string ssan, short? denomination_id, string user_id, decimal? network_device_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ticket_barcode",
                    Precision = 18,
                    Value = ticket_barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tito_ticket_transaction_type_id",
                    Value = tito_ticket_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tito_implementation_type_id",
                    Value = tito_implementation_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_id",
                    Precision = 18,
                    Value = network_device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_tito_ticket_transaction] @ticket_barcode, @transaction_datetime, @site_id, @tito_ticket_transaction_type_id, @amount, @tito_implementation_type_id, @egm_serial_number, @floor, @bank, @position, @ssan, @denomination_id, @user_id, @network_device_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> add_tito_ticket_transaction_v2Async(decimal? ticket_barcode, DateTime? transaction_datetime, short? site_id, short? tito_ticket_transaction_type_id, int? amount, short? tito_implementation_type_id, int? egm_serial_number, short? floor, short? bank, short? position, string ssan, short? denomination_id, string user_id, decimal? network_device_id, decimal? ticket_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ticket_barcode",
                    Precision = 18,
                    Value = ticket_barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tito_ticket_transaction_type_id",
                    Value = tito_ticket_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tito_implementation_type_id",
                    Value = tito_implementation_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_id",
                    Precision = 18,
                    Value = network_device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[add_tito_ticket_transaction_v2] @ticket_barcode, @transaction_datetime, @site_id, @tito_ticket_transaction_type_id, @amount, @tito_implementation_type_id, @egm_serial_number, @floor, @bank, @position, @ssan, @denomination_id, @user_id, @network_device_id, @ticket_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ALH_new_cardmem_numbersAsync(short? site_id, decimal? card_id, int? membership_id, string card_status, string member_status, string patron_id, string account_id, int? card_type_id, string card_funct, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Precision = 18,
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_status",
                    Size = 10,
                    Value = card_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "member_status",
                    Size = 10,
                    Value = member_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Size = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_type_id",
                    Value = card_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_funct",
                    Size = 60,
                    Value = card_funct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ALH_new_cardmem_numbers] @site_id, @card_id, @membership_id, @card_status, @member_status, @patron_id, @account_id, @card_type_id, @card_funct", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ALH_points_inResult>> ALH_points_inAsync(string transaction_id, decimal? card_id, DateTime? datetime, decimal? points_amount, int? membership_id, string points_category, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Size = 22,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Precision = 18,
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "datetime",
                    Value = datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "points_amount",
                    Precision = 18,
                    Scale = 4,
                    Value = points_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_category",
                    Size = 25,
                    Value = points_category ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ALH_points_inResult>("EXEC @returnValue = [dbo].[ALH_points_in] @transaction_id, @card_id, @datetime, @points_amount, @membership_id, @points_category", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ALH_replacement_cardsAsync(short? site_id, decimal? card_id, int? membership_id, string card_status, int? card_type_id, string card_funct, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Precision = 18,
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_status",
                    Size = 10,
                    Value = card_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_type_id",
                    Value = card_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_funct",
                    Size = 60,
                    Value = card_funct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ALH_replacement_cards] @site_id, @card_id, @membership_id, @card_status, @card_type_id, @card_funct", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ALH_update_member_detailAsync(short? site_id, decimal? card_id, int? membership_id, string name_title, string first_name, string last_name, string pos_addr1, string pos_addr2, string locality, string state_prov, string country, string post_code, string sex, string hm_phone, string mobile, DateTime? dob, int? rating_grade_id, DateTime? creation_date, string status, string mail_out, string patron_groups, DateTime? modified_datetime, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Precision = 18,
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name_title",
                    Size = 15,
                    Value = name_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr1",
                    Size = 60,
                    Value = pos_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr2",
                    Size = 60,
                    Value = pos_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state_prov",
                    Size = 30,
                    Value = state_prov ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 30,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sex",
                    Size = 1,
                    Value = sex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hm_phone",
                    Size = 20,
                    Value = hm_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dob",
                    Value = dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "creation_date",
                    Value = creation_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mail_out",
                    Size = 1,
                    Value = mail_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "patron_groups",
                    Size = 100,
                    Value = patron_groups ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "modified_datetime",
                    Value = modified_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ALH_update_member_detail] @site_id, @card_id, @membership_id, @name_title, @first_name, @last_name, @pos_addr1, @pos_addr2, @locality, @state_prov, @country, @post_code, @sex, @hm_phone, @mobile, @dob, @rating_grade_id, @creation_date, @status, @mail_out, @patron_groups, @modified_datetime, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> authenticate_userAsync(int? card_id, string secret_access_reply, OutputParameter<string> first_name, OutputParameter<string> last_name, OutputParameter<string> email, OutputParameter<string> user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterfirst_name = new SqlParameter
            {
                ParameterName = "first_name",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = first_name?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterlast_name = new SqlParameter
            {
                ParameterName = "last_name",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = last_name?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameteremail = new SqlParameter
            {
                ParameterName = "email",
                Size = 255,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = email?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameteruser_id = new SqlParameter
            {
                ParameterName = "user_id",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = user_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "secret_access_reply",
                    Size = 255,
                    Value = secret_access_reply ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterfirst_name,
                parameterlast_name,
                parameteremail,
                parameteruser_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[authenticate_user] @card_id, @secret_access_reply, @first_name OUTPUT, @last_name OUTPUT, @email OUTPUT, @user_id OUTPUT", sqlParameters, cancellationToken);

            first_name.SetValue(parameterfirst_name.Value);
            last_name.SetValue(parameterlast_name.Value);
            email.SetValue(parameteremail.Value);
            user_id.SetValue(parameteruser_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<card_session_summariseResult>> card_session_summariseAsync(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, decimal? pts_amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Precision = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<card_session_summariseResult>("EXEC @returnValue = [dbo].[card_session_summarise] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<card_session_summarise_v2Result>> card_session_summarise_v2Async(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, decimal? pts_amount, DateTime? session_start_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Precision = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "session_start_datetime",
                    Value = session_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<card_session_summarise_v2Result>("EXEC @returnValue = [dbo].[card_session_summarise_v2] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @session_start_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<card_session_summarise_v3Result>> card_session_summarise_v3Async(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, decimal? pts_amount, DateTime? session_start_datetime, byte? conrad_card_issue_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Precision = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "session_start_datetime",
                    Value = session_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "conrad_card_issue_number",
                    Value = conrad_card_issue_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<card_session_summarise_v3Result>("EXEC @returnValue = [dbo].[card_session_summarise_v3] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @session_start_datetime, @conrad_card_issue_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<card_session_summarise_v4Result>> card_session_summarise_v4Async(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, decimal? pts_amount, DateTime? session_start_datetime, decimal? cbg_account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Precision = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "session_start_datetime",
                    Value = session_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<card_session_summarise_v4Result>("EXEC @returnValue = [dbo].[card_session_summarise_v4] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @session_start_datetime, @cbg_account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> check_batch_update_bet_restrctAsync(decimal? patron_id, byte? system_id, short? css_game_type_id, short? summary_level, int? limit_amount, DateTime? last_update_datetime, string update_this_site_only, short? css_site_id, DateTime? edit_datetime, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Scale = 3,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_game_type_id",
                    Value = css_game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "limit_amount",
                    Value = limit_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_update_datetime",
                    Value = last_update_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "update_this_site_only",
                    Size = 1,
                    Value = update_this_site_only ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "edit_datetime",
                    Value = edit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[check_batch_update_bet_restrct] @patron_id, @system_id, @css_game_type_id, @summary_level, @limit_amount, @last_update_datetime, @update_this_site_only, @css_site_id, @edit_datetime, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<check_batch_update_patronResult>> check_batch_update_patronAsync(decimal? patron_id, string first_name, string middle_initial, string last_name, string other_name, string name_title, string res_address_1, string res_address_2, string res_locality, string res_state_province, string res_country, string res_postal_code, string postal_address_1, string postal_address_2, string locality, string state_province, string country, string postal_code, string home_telephone, string work_telephone, string fax, string mobile, string email, string next_of_kin, string next_of_kin_telephone, DateTime? date_of_birth, string sex, string status, string update_this_site_only, short? system_id, short? css_site_id, DateTime? edit_datetime, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "middle_initial",
                    Size = 10,
                    Value = middle_initial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "other_name",
                    Size = 30,
                    Value = other_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "name_title",
                    Size = 15,
                    Value = name_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_address_1",
                    Size = 60,
                    Value = res_address_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_address_2",
                    Size = 60,
                    Value = res_address_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_locality",
                    Size = 30,
                    Value = res_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_state_province",
                    Size = 30,
                    Value = res_state_province ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_country",
                    Size = 30,
                    Value = res_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_postal_code",
                    Size = 10,
                    Value = res_postal_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "postal_address_1",
                    Size = 60,
                    Value = postal_address_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "postal_address_2",
                    Size = 60,
                    Value = postal_address_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "state_province",
                    Size = 30,
                    Value = state_province ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 30,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "postal_code",
                    Size = 10,
                    Value = postal_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "home_telephone",
                    Size = 20,
                    Value = home_telephone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "work_telephone",
                    Size = 20,
                    Value = work_telephone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "fax",
                    Size = 20,
                    Value = fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "next_of_kin",
                    Size = 40,
                    Value = next_of_kin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "next_of_kin_telephone",
                    Size = 20,
                    Value = next_of_kin_telephone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "date_of_birth",
                    Value = date_of_birth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sex",
                    Size = 1,
                    Value = sex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "update_this_site_only",
                    Size = 1,
                    Value = update_this_site_only ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "edit_datetime",
                    Value = edit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<check_batch_update_patronResult>("EXEC @returnValue = [dbo].[check_batch_update_patron] @patron_id, @first_name, @middle_initial, @last_name, @other_name, @name_title, @res_address_1, @res_address_2, @res_locality, @res_state_province, @res_country, @res_postal_code, @postal_address_1, @postal_address_2, @locality, @state_province, @country, @postal_code, @home_telephone, @work_telephone, @fax, @mobile, @email, @next_of_kin, @next_of_kin_telephone, @date_of_birth, @sex, @status, @update_this_site_only, @system_id, @css_site_id, @edit_datetime, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> check_batch_update_patron_bankAsync(decimal? patron_banking_id, decimal? patron_id, string banking_type, string sub_banking_type, DateTime? expiry_datetime, string detail_1, string detail_2, string detail_3, short? priority, string update_this_site_only, short? system_id, short? css_site_id, DateTime? edit_datetime, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_banking_id",
                    Precision = 18,
                    Value = patron_banking_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "banking_type",
                    Size = 8,
                    Value = banking_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sub_banking_type",
                    Size = 20,
                    Value = sub_banking_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_datetime",
                    Value = expiry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "detail_1",
                    Size = 64,
                    Value = detail_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_2",
                    Size = 64,
                    Value = detail_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_3",
                    Size = 150,
                    Value = detail_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "update_this_site_only",
                    Size = 1,
                    Value = update_this_site_only ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "edit_datetime",
                    Value = edit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[check_batch_update_patron_bank] @patron_banking_id, @patron_id, @banking_type, @sub_banking_type, @expiry_datetime, @detail_1, @detail_2, @detail_3, @priority, @update_this_site_only, @system_id, @css_site_id, @edit_datetime, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> check_batch_update_single_colAsync(byte? system_id, short? css_site_id, string table_name, string column_name, string identity_description, string record_unique_id, DateTime? edit_datetime, string update_this_site_only, string user_id, string old_string, DateTime? old_datetime, int? old_int, OutputParameter<string> new_string, OutputParameter<DateTime?> new_datetime, OutputParameter<int?> new_int, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_string = new SqlParameter
            {
                ParameterName = "new_string",
                Size = 255,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_string?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameternew_datetime = new SqlParameter
            {
                ParameterName = "new_datetime",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_datetime?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameternew_int = new SqlParameter
            {
                ParameterName = "new_int",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_int?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "table_name",
                    Size = 30,
                    Value = table_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "column_name",
                    Size = 30,
                    Value = column_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "identity_description",
                    Size = 60,
                    Value = identity_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "record_unique_id",
                    Size = 60,
                    Value = record_unique_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "edit_datetime",
                    Value = edit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "update_this_site_only",
                    Size = 1,
                    Value = update_this_site_only ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "old_string",
                    Size = 255,
                    Value = old_string ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameternew_string,
                new SqlParameter
                {
                    ParameterName = "old_datetime",
                    Value = old_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameternew_datetime,
                new SqlParameter
                {
                    ParameterName = "old_int",
                    Value = old_int ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameternew_int,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[check_batch_update_single_col] @system_id, @css_site_id, @table_name, @column_name, @identity_description, @record_unique_id, @edit_datetime, @update_this_site_only, @user_id, @old_string, @new_string OUTPUT, @old_datetime, @new_datetime OUTPUT, @old_int, @new_int OUTPUT", sqlParameters, cancellationToken);

            new_string.SetValue(parameternew_string.Value);
            new_datetime.SetValue(parameternew_datetime.Value);
            new_int.SetValue(parameternew_int.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> check_bet_limitsAsync(int? card_id, string patron_id, byte? system_id, short? css_site_id, int? amount_numeric, short? css_game_type_id, DateTime? start_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Size = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount_numeric",
                    Value = amount_numeric ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_game_type_id",
                    Value = css_game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[check_bet_limits] @card_id, @patron_id, @system_id, @css_site_id, @amount_numeric, @css_game_type_id, @start_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> clean_out_string_for_likeAsync(string replace_character_with, string character_clean_out_list, OutputParameter<string> string_to_be_clean, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterstring_to_be_clean = new SqlParameter
            {
                ParameterName = "string_to_be_clean",
                Size = 255,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = string_to_be_clean?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterstring_to_be_clean,
                new SqlParameter
                {
                    ParameterName = "replace_character_with",
                    Size = 1,
                    Value = replace_character_with ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "character_clean_out_list",
                    Size = 255,
                    Value = character_clean_out_list ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[clean_out_string_for_like] @string_to_be_clean OUTPUT, @replace_character_with, @character_clean_out_list", sqlParameters, cancellationToken);

            string_to_be_clean.SetValue(parameterstring_to_be_clean.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> clear_campaignAsync(string campaign_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "campaign_id",
                    Size = 36,
                    Value = campaign_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[clear_campaign] @campaign_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> clear_cash_withdrawal_balancesAsync(short? site_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[clear_cash_withdrawal_balances] @site_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> clear_cash_withdrawal_balances_v2Async(short? site_id, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[clear_cash_withdrawal_balances_v2] @site_id, @EventTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DatesToReReportDM0Result>> DatesToReReportDM0Async(DateTime? EarliestDate, DateTime? LatestDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EarliestDate",
                    Value = EarliestDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LatestDate",
                    Value = LatestDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DatesToReReportDM0Result>("EXEC @returnValue = [dbo].[DatesToReReportDM0] @EarliestDate, @LatestDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_downtime_summariseResult>> egm_downtime_summariseAsync(int? serial_num, short? site_id, DateTime? start_dt, short? sum_level, int? min_down, int? min_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "min_down",
                    Value = min_down ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_avail",
                    Value = min_avail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_downtime_summariseResult>("EXEC @returnValue = [dbo].[egm_downtime_summarise] @serial_num, @site_id, @start_dt, @sum_level, @min_down, @min_avail", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_game_meters_summariseResult>> egm_game_meters_summariseAsync(short? site_id, int? serial_num, short? denomination, short? game_num, int? game_var_num, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? prog_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_wins",
                    Value = prog_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_game_meters_summariseResult>("EXEC @returnValue = [dbo].[egm_game_meters_summarise] @site_id, @serial_num, @denomination, @game_num, @game_var_num, @sum_level, @start_dt, @stroke, @turnover, @wins, @prog_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_game_meters_summarise_v2Result>> egm_game_meters_summarise_v2Async(short? site_id, int? serial_num, short? denomination, short? game_num, int? game_var_num, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? prog_wins, int? total_games_won, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_wins",
                    Value = prog_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_games_won",
                    Value = total_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_game_meters_summarise_v2Result>("EXEC @returnValue = [dbo].[egm_game_meters_summarise_v2] @site_id, @serial_num, @denomination, @game_num, @game_var_num, @sum_level, @start_dt, @stroke, @turnover, @wins, @prog_wins, @total_games_won", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_game_meters_summarise_v3Result>> egm_game_meters_summarise_v3Async(short? site_id, int? serial_num, short? denomination, short? game_num, int? game_var_num, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? prog_wins, int? total_games_won, int? gvn, int? ssan, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_wins",
                    Value = prog_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_games_won",
                    Value = total_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gvn",
                    Value = gvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_game_meters_summarise_v3Result>("EXEC @returnValue = [dbo].[egm_game_meters_summarise_v3] @site_id, @serial_num, @denomination, @game_num, @game_var_num, @sum_level, @start_dt, @stroke, @turnover, @wins, @prog_wins, @total_games_won, @gvn, @ssan", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_meters_summariseResult>> egm_meters_summariseAsync(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_meters_summariseResult>("EXEC @returnValue = [dbo].[egm_meters_summarise] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_meters_summarise_accountsResult>> egm_meters_summarise_accountsAsync(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? act_short_p, int? act_hop_f, int? act_can_cred, int? cheques, int? floor, int? bank, int? position, int? rec_count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_p",
                    Value = act_short_p ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hop_f",
                    Value = act_hop_f ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_can_cred",
                    Value = act_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheques",
                    Value = cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rec_count",
                    Value = rec_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_meters_summarise_accountsResult>("EXEC @returnValue = [dbo].[egm_meters_summarise_accounts] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @act_short_p, @act_hop_f, @act_can_cred, @cheques, @floor, @bank, @position, @rec_count", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_meters_summarise_accts_v2Result>> egm_meters_summarise_accts_v2Async(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? act_short_p, int? act_hop_f, int? act_can_cred, int? cheques, int? floor, int? bank, int? position, int? rec_count, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_p",
                    Value = act_short_p ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hop_f",
                    Value = act_hop_f ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_can_cred",
                    Value = act_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheques",
                    Value = cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rec_count",
                    Value = rec_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_meters_summarise_accts_v2Result>("EXEC @returnValue = [dbo].[egm_meters_summarise_accts_v2] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @act_short_p, @act_hop_f, @act_can_cred, @cheques, @floor, @bank, @position, @rec_count, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_meters_summarise_accts_v3Result>> egm_meters_summarise_accts_v3Async(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? act_short_p, int? act_hop_f, int? act_can_cred, int? cheques, int? floor, int? bank, int? position, int? rec_count, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, int? actual_total_egm_cash_ticket_in, int? actual_ticket_printer_out, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_p",
                    Value = act_short_p ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hop_f",
                    Value = act_hop_f ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_can_cred",
                    Value = act_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheques",
                    Value = cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rec_count",
                    Value = rec_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_total_egm_cash_ticket_in",
                    Value = actual_total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_ticket_printer_out",
                    Value = actual_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_meters_summarise_accts_v3Result>("EXEC @returnValue = [dbo].[egm_meters_summarise_accts_v3] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @act_short_p, @act_hop_f, @act_can_cred, @cheques, @floor, @bank, @position, @rec_count, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins, @actual_total_egm_cash_ticket_in, @actual_ticket_printer_out", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_meters_summarise_accts_v4Result>> egm_meters_summarise_accts_v4Async(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? act_short_p, int? act_hop_f, int? act_can_cred, int? cheques, int? floor, int? bank, int? position, int? rec_count, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, int? actual_total_egm_cash_ticket_in, int? actual_ticket_printer_out, int? i_ssan, int? i_bgvn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_p",
                    Value = act_short_p ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hop_f",
                    Value = act_hop_f ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_can_cred",
                    Value = act_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheques",
                    Value = cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rec_count",
                    Value = rec_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_total_egm_cash_ticket_in",
                    Value = actual_total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_ticket_printer_out",
                    Value = actual_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "i_ssan",
                    Value = i_ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "i_bgvn",
                    Value = i_bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_meters_summarise_accts_v4Result>("EXEC @returnValue = [dbo].[egm_meters_summarise_accts_v4] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @act_short_p, @act_hop_f, @act_can_cred, @cheques, @floor, @bank, @position, @rec_count, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins, @actual_total_egm_cash_ticket_in, @actual_ticket_printer_out, @i_ssan, @i_bgvn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_meters_summarise_v2Result>> egm_meters_summarise_v2Async(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? bgvn, int? egm_config_num, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? actualshortpays, int? a_hopper_fills, int? a_can_credits, int? gamingcheques, int? rec_count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_num",
                    Value = egm_config_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actualshortpays",
                    Value = actualshortpays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hopper_fills",
                    Value = a_hopper_fills ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_credits",
                    Value = a_can_credits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gamingcheques",
                    Value = gamingcheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rec_count",
                    Value = rec_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_meters_summarise_v2Result>("EXEC @returnValue = [dbo].[egm_meters_summarise_v2] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @bgvn, @egm_config_num, @floor, @bank, @position, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @actualshortpays, @a_hopper_fills, @a_can_credits, @gamingcheques, @rec_count", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_meters_summarise_v3Result>> egm_meters_summarise_v3Async(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? bgvn, int? egm_config_num, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? actualshortpays, int? a_hopper_fills, int? a_can_credits, int? gamingcheques, int? rec_count, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_num",
                    Value = egm_config_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actualshortpays",
                    Value = actualshortpays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hopper_fills",
                    Value = a_hopper_fills ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_credits",
                    Value = a_can_credits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gamingcheques",
                    Value = gamingcheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rec_count",
                    Value = rec_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_meters_summarise_v3Result>("EXEC @returnValue = [dbo].[egm_meters_summarise_v3] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @bgvn, @egm_config_num, @floor, @bank, @position, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @actualshortpays, @a_hopper_fills, @a_can_credits, @gamingcheques, @rec_count, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<egm_meters_summarise_v4Result>> egm_meters_summarise_v4Async(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? bgvn, int? egm_config_num, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? actualshortpays, int? a_hopper_fills, int? a_can_credits, int? gamingcheques, int? rec_count, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, int? actual_total_egm_cash_ticket_in, int? actual_ticket_printer_out, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_num",
                    Value = egm_config_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actualshortpays",
                    Value = actualshortpays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hopper_fills",
                    Value = a_hopper_fills ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_credits",
                    Value = a_can_credits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gamingcheques",
                    Value = gamingcheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rec_count",
                    Value = rec_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_total_egm_cash_ticket_in",
                    Value = actual_total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_ticket_printer_out",
                    Value = actual_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<egm_meters_summarise_v4Result>("EXEC @returnValue = [dbo].[egm_meters_summarise_v4] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @bgvn, @egm_config_num, @floor, @bank, @position, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @actualshortpays, @a_hopper_fills, @a_can_credits, @gamingcheques, @rec_count, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins, @actual_total_egm_cash_ticket_in, @actual_ticket_printer_out", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> egm_note_countAsync(short? site_id, DateTime? buy_date, int? no_5, int? no_10, int? no_20, int? no_50, int? no_100, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "buy_date",
                    Value = buy_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "no_5",
                    Value = no_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_10",
                    Value = no_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_20",
                    Value = no_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_50",
                    Value = no_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_100",
                    Value = no_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[egm_note_count] @site_id, @buy_date, @no_5, @no_10, @no_20, @no_50, @no_100", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> expire_card_based_accountsAsync(short? creation_site_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "creation_site_id",
                    Value = creation_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[expire_card_based_accounts] @creation_site_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> expire_cardsAsync(short? creation_css_site, DateTime? last_mod, DateTime? exp_date, int? exp_months, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "creation_css_site",
                    Value = creation_css_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_months",
                    Value = exp_months ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[expire_cards] @creation_css_site, @last_mod, @exp_date, @exp_months", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> expire_cards_v2Async(short? creation_css_site, DateTime? last_mod, DateTime? exp_date, int? exp_months, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "creation_css_site",
                    Value = creation_css_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_months",
                    Value = exp_months ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[expire_cards_v2] @creation_css_site, @last_mod, @exp_date, @exp_months", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<expire_egm_ticket_transactionsResult>> expire_egm_ticket_transactionsAsync(short? site, DateTime? last_action_date, int? min_tr_cashier_time, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site",
                    Value = site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_date",
                    Value = last_action_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "min_tr_cashier_time",
                    Value = min_tr_cashier_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<expire_egm_ticket_transactionsResult>("EXEC @returnValue = [dbo].[expire_egm_ticket_transactions] @site, @last_action_date, @min_tr_cashier_time", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> expire_egm_transactionsAsync(short? site, DateTime? last_action_date, DateTime? exp_date, int? exp_months, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site",
                    Value = site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_date",
                    Value = last_action_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_months",
                    Value = exp_months ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[expire_egm_transactions] @site, @last_action_date, @exp_date, @exp_months", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> expire_patronsAsync(short? creation_css_site, DateTime? last_mod, DateTime? exp_date, int? exp_months, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "creation_css_site",
                    Value = creation_css_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_months",
                    Value = exp_months ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[expire_patrons] @creation_css_site, @last_mod, @exp_date, @exp_months", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> expire_patrons_v2Async(short? creation_css_site, DateTime? last_mod, DateTime? exp_date, int? exp_months, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "creation_css_site",
                    Value = creation_css_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_months",
                    Value = exp_months ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[expire_patrons_v2] @creation_css_site, @last_mod, @exp_date, @exp_months", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> expire_vouchersAsync(short? css_site, DateTime? exp_date, int? exp_months, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site",
                    Value = css_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_months",
                    Value = exp_months ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[expire_vouchers] @css_site, @exp_date, @exp_months", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<extract_barrel_draw_log_from_summaryResult>> extract_barrel_draw_log_from_summaryAsync(int? site_id, DateTime? from_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "from_datetime",
                    Value = from_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<extract_barrel_draw_log_from_summaryResult>("EXEC @returnValue = [dbo].[extract_barrel_draw_log_from_summary] @site_id, @from_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<F1SAFFileDataResult>> F1SAFFileDataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<F1SAFFileDataResult>("EXEC @returnValue = [dbo].[F1SAFFileData]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> fri_upd_statsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[fri_upd_stats]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<game_meters_perfmon_summariseResult>> game_meters_perfmon_summariseAsync(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? gvn, int? rtp, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? lp_wins, int? erp_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gvn",
                    Value = gvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rtp",
                    Value = rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "erp_wins",
                    Value = erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<game_meters_perfmon_summariseResult>("EXEC @returnValue = [dbo].[game_meters_perfmon_summarise] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @gvn, @rtp, @floor, @bank, @position, @stroke, @turnover, @wins, @lp_wins, @erp_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<game_meters_summariseResult>> game_meters_summariseAsync(short? site_id, short? summary_level, DateTime? start_datetime, int? ssan, int? game_version_number, short? denomination_id, int? rtp, int? egm_serial_number, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? lp_wins, int? erp_wins, int? wa_lp_wins, int? wa_erp_wins, int? wa_contributions, int? minutes_play_in_period, int? total_playable_minutes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_version_number",
                    Value = game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "rtp",
                    Value = rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "erp_wins",
                    Value = erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wa_lp_wins",
                    Value = wa_lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wa_erp_wins",
                    Value = wa_erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wa_contributions",
                    Value = wa_contributions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "minutes_play_in_period",
                    Value = minutes_play_in_period ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_playable_minutes",
                    Value = total_playable_minutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<game_meters_summariseResult>("EXEC @returnValue = [dbo].[game_meters_summarise] @site_id, @summary_level, @start_datetime, @ssan, @game_version_number, @denomination_id, @rtp, @egm_serial_number, @floor, @bank, @position, @stroke, @turnover, @wins, @lp_wins, @erp_wins, @wa_lp_wins, @wa_erp_wins, @wa_contributions, @minutes_play_in_period, @total_playable_minutes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_account_balancesResult>> get_account_balancesAsync(decimal? account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_account_balancesResult>("EXEC @returnValue = [dbo].[get_account_balances] @account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_accounts_to_purgeResult>> get_accounts_to_purgeAsync(short? css_site_id, decimal? point_purge_configuruation_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_configuruation_id",
                    Precision = 18,
                    Value = point_purge_configuruation_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_accounts_to_purgeResult>("EXEC @returnValue = [dbo].[get_accounts_to_purge] @css_site_id, @point_purge_configuruation_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_ALH_balance_summaryAsync(DateTime? start_datetime, OutputParameter<string> balance_summary, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbalance_summary = new SqlParameter
            {
                ParameterName = "balance_summary",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = balance_summary?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterbalance_summary,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_ALH_balance_summary] @start_datetime, @balance_summary OUTPUT", sqlParameters, cancellationToken);

            balance_summary.SetValue(parameterbalance_summary.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_ALH_rating_gradeAsync(string description, OutputParameter<int?> rating_grade_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrating_grade_id = new SqlParameter
            {
                ParameterName = "rating_grade_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rating_grade_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterrating_grade_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_ALH_rating_grade] @description, @rating_grade_id OUTPUT", sqlParameters, cancellationToken);

            rating_grade_id.SetValue(parameterrating_grade_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_alh_session_id_processedAsync(string session_id, OutputParameter<string> processed, OutputParameter<DateTime?> processed_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterprocessed = new SqlParameter
            {
                ParameterName = "processed",
                Size = 5,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = processed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterprocessed_datetime = new SqlParameter
            {
                ParameterName = "processed_datetime",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = processed_datetime?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "session_id",
                    Size = 22,
                    Value = session_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterprocessed,
                parameterprocessed_datetime,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_alh_session_id_processed] @session_id, @processed OUTPUT, @processed_datetime OUTPUT", sqlParameters, cancellationToken);

            processed.SetValue(parameterprocessed.Value);
            processed_datetime.SetValue(parameterprocessed_datetime.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_atc_default_card_typeAsync(OutputParameter<int?> card_type_id, OutputParameter<string> card_funct, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercard_type_id = new SqlParameter
            {
                ParameterName = "card_type_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_type_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercard_funct = new SqlParameter
            {
                ParameterName = "card_funct",
                Size = 60,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_funct?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parametercard_type_id,
                parametercard_funct,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_atc_default_card_type] @card_type_id OUTPUT, @card_funct OUTPUT", sqlParameters, cancellationToken);

            card_type_id.SetValue(parametercard_type_id.Value);
            card_funct.SetValue(parametercard_funct.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_atc_file_in_detailAsync(OutputParameter<DateTime?> file_datetime, OutputParameter<int?> increment, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterfile_datetime = new SqlParameter
            {
                ParameterName = "file_datetime",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = file_datetime?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterincrement = new SqlParameter
            {
                ParameterName = "increment",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = increment?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterfile_datetime,
                parameterincrement,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_atc_file_in_detail] @file_datetime OUTPUT, @increment OUTPUT", sqlParameters, cancellationToken);

            file_datetime.SetValue(parameterfile_datetime.Value);
            increment.SetValue(parameterincrement.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_atc_file_out_incrementAsync(DateTime? file_datetime, OutputParameter<int?> file_increment, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterfile_increment = new SqlParameter
            {
                ParameterName = "file_increment",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = file_increment?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "file_datetime",
                    Value = file_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterfile_increment,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_atc_file_out_increment] @file_datetime, @file_increment OUTPUT", sqlParameters, cancellationToken);

            file_increment.SetValue(parameterfile_increment.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_barrel_draw_log_records_to_summariseResult>> get_barrel_draw_log_records_to_summariseAsync(DateTime? from_datetime, int? period, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "from_datetime",
                    Value = from_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period",
                    Value = period ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_barrel_draw_log_records_to_summariseResult>("EXEC @returnValue = [dbo].[get_barrel_draw_log_records_to_summarise] @from_datetime, @period", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_base_detailsAsync(int? card_id, OutputParameter<string> first_name, OutputParameter<string> mid_initial, OutputParameter<string> last_name, OutputParameter<string> other_name, OutputParameter<DateTime?> dob, OutputParameter<string> email, OutputParameter<string> pos_addr1, OutputParameter<string> pos_addr2, OutputParameter<string> locality, OutputParameter<string> post_code, OutputParameter<string> state_prov, OutputParameter<string> country, OutputParameter<string> hm_phone, OutputParameter<string> wk_phone, OutputParameter<string> mobile, OutputParameter<string> detail_1, OutputParameter<string> detail_2, OutputParameter<string> user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterfirst_name = new SqlParameter
            {
                ParameterName = "first_name",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = first_name?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametermid_initial = new SqlParameter
            {
                ParameterName = "mid_initial",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = mid_initial?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterlast_name = new SqlParameter
            {
                ParameterName = "last_name",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = last_name?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterother_name = new SqlParameter
            {
                ParameterName = "other_name",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = other_name?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterdob = new SqlParameter
            {
                ParameterName = "dob",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = dob?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameteremail = new SqlParameter
            {
                ParameterName = "email",
                Size = 255,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = email?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterpos_addr1 = new SqlParameter
            {
                ParameterName = "pos_addr1",
                Size = 60,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pos_addr1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterpos_addr2 = new SqlParameter
            {
                ParameterName = "pos_addr2",
                Size = 60,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pos_addr2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterlocality = new SqlParameter
            {
                ParameterName = "locality",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = locality?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterpost_code = new SqlParameter
            {
                ParameterName = "post_code",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = post_code?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterstate_prov = new SqlParameter
            {
                ParameterName = "state_prov",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = state_prov?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametercountry = new SqlParameter
            {
                ParameterName = "country",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = country?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterhm_phone = new SqlParameter
            {
                ParameterName = "hm_phone",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = hm_phone?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterwk_phone = new SqlParameter
            {
                ParameterName = "wk_phone",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = wk_phone?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametermobile = new SqlParameter
            {
                ParameterName = "mobile",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = mobile?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterdetail_1 = new SqlParameter
            {
                ParameterName = "detail_1",
                Size = 64,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = detail_1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterdetail_2 = new SqlParameter
            {
                ParameterName = "detail_2",
                Size = 64,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = detail_2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameteruser_id = new SqlParameter
            {
                ParameterName = "user_id",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = user_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterfirst_name,
                parametermid_initial,
                parameterlast_name,
                parameterother_name,
                parameterdob,
                parameteremail,
                parameterpos_addr1,
                parameterpos_addr2,
                parameterlocality,
                parameterpost_code,
                parameterstate_prov,
                parametercountry,
                parameterhm_phone,
                parameterwk_phone,
                parametermobile,
                parameterdetail_1,
                parameterdetail_2,
                parameteruser_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_base_details] @card_id, @first_name OUTPUT, @mid_initial OUTPUT, @last_name OUTPUT, @other_name OUTPUT, @dob OUTPUT, @email OUTPUT, @pos_addr1 OUTPUT, @pos_addr2 OUTPUT, @locality OUTPUT, @post_code OUTPUT, @state_prov OUTPUT, @country OUTPUT, @hm_phone OUTPUT, @wk_phone OUTPUT, @mobile OUTPUT, @detail_1 OUTPUT, @detail_2 OUTPUT, @user_id OUTPUT", sqlParameters, cancellationToken);

            first_name.SetValue(parameterfirst_name.Value);
            mid_initial.SetValue(parametermid_initial.Value);
            last_name.SetValue(parameterlast_name.Value);
            other_name.SetValue(parameterother_name.Value);
            dob.SetValue(parameterdob.Value);
            email.SetValue(parameteremail.Value);
            pos_addr1.SetValue(parameterpos_addr1.Value);
            pos_addr2.SetValue(parameterpos_addr2.Value);
            locality.SetValue(parameterlocality.Value);
            post_code.SetValue(parameterpost_code.Value);
            state_prov.SetValue(parameterstate_prov.Value);
            country.SetValue(parametercountry.Value);
            hm_phone.SetValue(parameterhm_phone.Value);
            wk_phone.SetValue(parameterwk_phone.Value);
            mobile.SetValue(parametermobile.Value);
            detail_1.SetValue(parameterdetail_1.Value);
            detail_2.SetValue(parameterdetail_2.Value);
            user_id.SetValue(parameteruser_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_batch_confirm_pendingResult>> get_batch_confirm_pendingAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_batch_confirm_pendingResult>("EXEC @returnValue = [dbo].[get_batch_confirm_pending]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_bet_limitsAsync(int? card_id, byte? system_id, short? css_site_id, short? css_game_type_id, OutputParameter<int?> month_restriction, OutputParameter<int?> month_restriction_rem, OutputParameter<DateTime?> month_update_dt, OutputParameter<int?> day_restriction, OutputParameter<int?> day_restriction_rem, OutputParameter<DateTime?> day_update_dt, OutputParameter<int?> day_pending, OutputParameter<int?> month_pending, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametermonth_restriction = new SqlParameter
            {
                ParameterName = "month_restriction",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = month_restriction?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametermonth_restriction_rem = new SqlParameter
            {
                ParameterName = "month_restriction_rem",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = month_restriction_rem?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametermonth_update_dt = new SqlParameter
            {
                ParameterName = "month_update_dt",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = month_update_dt?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterday_restriction = new SqlParameter
            {
                ParameterName = "day_restriction",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = day_restriction?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterday_restriction_rem = new SqlParameter
            {
                ParameterName = "day_restriction_rem",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = day_restriction_rem?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterday_update_dt = new SqlParameter
            {
                ParameterName = "day_update_dt",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = day_update_dt?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterday_pending = new SqlParameter
            {
                ParameterName = "day_pending",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = day_pending?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametermonth_pending = new SqlParameter
            {
                ParameterName = "month_pending",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = month_pending?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_game_type_id",
                    Value = css_game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parametermonth_restriction,
                parametermonth_restriction_rem,
                parametermonth_update_dt,
                parameterday_restriction,
                parameterday_restriction_rem,
                parameterday_update_dt,
                parameterday_pending,
                parametermonth_pending,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_bet_limits] @card_id, @system_id, @css_site_id, @css_game_type_id, @month_restriction OUTPUT, @month_restriction_rem OUTPUT, @month_update_dt OUTPUT, @day_restriction OUTPUT, @day_restriction_rem OUTPUT, @day_update_dt OUTPUT, @day_pending OUTPUT, @month_pending OUTPUT", sqlParameters, cancellationToken);

            month_restriction.SetValue(parametermonth_restriction.Value);
            month_restriction_rem.SetValue(parametermonth_restriction_rem.Value);
            month_update_dt.SetValue(parametermonth_update_dt.Value);
            day_restriction.SetValue(parameterday_restriction.Value);
            day_restriction_rem.SetValue(parameterday_restriction_rem.Value);
            day_update_dt.SetValue(parameterday_update_dt.Value);
            day_pending.SetValue(parameterday_pending.Value);
            month_pending.SetValue(parametermonth_pending.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_cash_balanceAsync(int? card_id, string user_id, OutputParameter<string> available_balance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteravailable_balance = new SqlParameter
            {
                ParameterName = "available_balance",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = available_balance?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteravailable_balance,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_cash_balance] @card_id, @available_balance OUTPUT, @user_id", sqlParameters, cancellationToken);

            available_balance.SetValue(parameteravailable_balance.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_cbg_account_cash_balanceAsync(decimal? cbg_account_id, OutputParameter<string> balance, OutputParameter<decimal?> cash_withdrawal_balance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbalance = new SqlParameter
            {
                ParameterName = "balance",
                Size = 16,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = balance?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametercash_withdrawal_balance = new SqlParameter
            {
                ParameterName = "cash_withdrawal_balance",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cash_withdrawal_balance?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterbalance,
                parametercash_withdrawal_balance,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_cbg_account_cash_balance] @cbg_account_id, @balance OUTPUT, @cash_withdrawal_balance OUTPUT", sqlParameters, cancellationToken);

            balance.SetValue(parameterbalance.Value);
            cash_withdrawal_balance.SetValue(parametercash_withdrawal_balance.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_cbg_account_pinAsync(decimal? cbg_account_id, OutputParameter<string> pin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpin = new SqlParameter
            {
                ParameterName = "pin",
                Size = 16,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pin?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterpin,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_cbg_account_pin] @cbg_account_id, @pin OUTPUT", sqlParameters, cancellationToken);

            pin.SetValue(parameterpin.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_cbg_host_inactive_accountsResult>> get_cbg_host_inactive_accountsAsync(DateTime? reconciliation_date, string zero_balance_cipher_text, short? restrict_to_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reconciliation_date",
                    Value = reconciliation_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "zero_balance_cipher_text",
                    Size = 16,
                    Value = zero_balance_cipher_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "restrict_to_site",
                    Value = restrict_to_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_cbg_host_inactive_accountsResult>("EXEC @returnValue = [dbo].[get_cbg_host_inactive_accounts] @reconciliation_date, @zero_balance_cipher_text, @restrict_to_site", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_cbg_host_site_account_balancesResult>> get_cbg_host_site_account_balancesAsync(DateTime? reconciliation_date, string zero_balance_cipher_text, short? restrict_to_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reconciliation_date",
                    Value = reconciliation_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "zero_balance_cipher_text",
                    Size = 16,
                    Value = zero_balance_cipher_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "restrict_to_site",
                    Value = restrict_to_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_cbg_host_site_account_balancesResult>("EXEC @returnValue = [dbo].[get_cbg_host_site_account_balances] @reconciliation_date, @zero_balance_cipher_text, @restrict_to_site", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_cbg_site_session_keyAsync(short? site_id, OutputParameter<string> session_key, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersession_key = new SqlParameter
            {
                ParameterName = "session_key",
                Size = 32,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = session_key?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parametersession_key,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_cbg_site_session_key] @site_id, @session_key OUTPUT", sqlParameters, cancellationToken);

            session_key.SetValue(parametersession_key.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_cbg_terminal_master_keyAsync(short? site_id, string term_id, OutputParameter<string> master_key, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametermaster_key = new SqlParameter
            {
                ParameterName = "master_key",
                Size = 32,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = master_key?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "term_id",
                    Size = 10,
                    Value = term_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametermaster_key,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_cbg_terminal_master_key] @site_id, @term_id, @master_key OUTPUT", sqlParameters, cancellationToken);

            master_key.SetValue(parametermaster_key.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_cbg_unreconciled_transactionsResult>> get_cbg_unreconciled_transactionsAsync(DateTime? reconciliation_date, short? restrict_to_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reconciliation_date",
                    Value = reconciliation_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "restrict_to_site",
                    Value = restrict_to_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_cbg_unreconciled_transactionsResult>("EXEC @returnValue = [dbo].[get_cbg_unreconciled_transactions] @reconciliation_date, @restrict_to_site", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_clearance_configAsync(int? site_id, DateTime? clearance_start_datetime, OutputParameter<DateTime?> day_start_datetime, OutputParameter<DateTime?> session_start_datetime, OutputParameter<DateTime?> session_end_datetime, OutputParameter<DateTime?> month_start_datetime, OutputParameter<DateTime?> year_start_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterday_start_datetime = new SqlParameter
            {
                ParameterName = "day_start_datetime",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = day_start_datetime?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parametersession_start_datetime = new SqlParameter
            {
                ParameterName = "session_start_datetime",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = session_start_datetime?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parametersession_end_datetime = new SqlParameter
            {
                ParameterName = "session_end_datetime",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = session_end_datetime?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parametermonth_start_datetime = new SqlParameter
            {
                ParameterName = "month_start_datetime",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = month_start_datetime?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameteryear_start_datetime = new SqlParameter
            {
                ParameterName = "year_start_datetime",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = year_start_datetime?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterday_start_datetime,
                parametersession_start_datetime,
                parametersession_end_datetime,
                parametermonth_start_datetime,
                parameteryear_start_datetime,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_clearance_config] @site_id, @clearance_start_datetime, @day_start_datetime OUTPUT, @session_start_datetime OUTPUT, @session_end_datetime OUTPUT, @month_start_datetime OUTPUT, @year_start_datetime OUTPUT", sqlParameters, cancellationToken);

            day_start_datetime.SetValue(parameterday_start_datetime.Value);
            session_start_datetime.SetValue(parametersession_start_datetime.Value);
            session_end_datetime.SetValue(parametersession_end_datetime.Value);
            month_start_datetime.SetValue(parametermonth_start_datetime.Value);
            year_start_datetime.SetValue(parameteryear_start_datetime.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_css_site_aging_detailsAsync(byte? system_id, short? css_site_id, byte? track_type, DateTime? cur_per_dt, OutputParameter<int?> cur_period, OutputParameter<byte?> mths_per_p, OutputParameter<short?> aging_pds, OutputParameter<DateTime?> first_p_dt, OutputParameter<int?> mths_to_cm, OutputParameter<int?> mths_to_cp, OutputParameter<short?> first_aging, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercur_period = new SqlParameter
            {
                ParameterName = "cur_period",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = cur_period?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametermths_per_p = new SqlParameter
            {
                ParameterName = "mths_per_p",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = mths_per_p?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.TinyInt,
            };
            var parameteraging_pds = new SqlParameter
            {
                ParameterName = "aging_pds",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = aging_pds?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterfirst_p_dt = new SqlParameter
            {
                ParameterName = "first_p_dt",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = first_p_dt?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parametermths_to_cm = new SqlParameter
            {
                ParameterName = "mths_to_cm",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = mths_to_cm?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametermths_to_cp = new SqlParameter
            {
                ParameterName = "mths_to_cp",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = mths_to_cp?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterfirst_aging = new SqlParameter
            {
                ParameterName = "first_aging",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = first_aging?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_per_dt",
                    Value = cur_per_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametercur_period,
                parametermths_per_p,
                parameteraging_pds,
                parameterfirst_p_dt,
                parametermths_to_cm,
                parametermths_to_cp,
                parameterfirst_aging,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_css_site_aging_details] @system_id, @css_site_id, @track_type, @cur_per_dt, @cur_period OUTPUT, @mths_per_p OUTPUT, @aging_pds OUTPUT, @first_p_dt OUTPUT, @mths_to_cm OUTPUT, @mths_to_cp OUTPUT, @first_aging OUTPUT", sqlParameters, cancellationToken);

            cur_period.SetValue(parametercur_period.Value);
            mths_per_p.SetValue(parametermths_per_p.Value);
            aging_pds.SetValue(parameteraging_pds.Value);
            first_p_dt.SetValue(parameterfirst_p_dt.Value);
            mths_to_cm.SetValue(parametermths_to_cm.Value);
            mths_to_cp.SetValue(parametermths_to_cp.Value);
            first_aging.SetValue(parameterfirst_aging.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_daily_spendAsync(int? card_id, OutputParameter<int?> daily_spend, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterdaily_spend = new SqlParameter
            {
                ParameterName = "daily_spend",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = daily_spend?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterdaily_spend,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_daily_spend] @card_id, @daily_spend OUTPUT", sqlParameters, cancellationToken);

            daily_spend.SetValue(parameterdaily_spend.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_device_configResult>> get_device_configAsync(int? site_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_device_configResult>("EXEC @returnValue = [dbo].[get_device_config] @site_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_excluded_patron_analysisResult>> get_excluded_patron_analysisAsync(string filter_site_selection, string filter_patron_selection, string filter_by_first_name, string filter_by_other_name, string filter_by_locality, string filter_by_country, string filter_by_postal_code, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filter_site_selection",
                    Size = 255,
                    Value = filter_site_selection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_patron_selection",
                    Size = 255,
                    Value = filter_patron_selection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_first_name",
                    Size = 1,
                    Value = filter_by_first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_other_name",
                    Size = 1,
                    Value = filter_by_other_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_locality",
                    Size = 1,
                    Value = filter_by_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_country",
                    Size = 1,
                    Value = filter_by_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_postal_code",
                    Size = 1,
                    Value = filter_by_postal_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_excluded_patron_analysisResult>("EXEC @returnValue = [dbo].[get_excluded_patron_analysis] @filter_site_selection, @filter_patron_selection, @filter_by_first_name, @filter_by_other_name, @filter_by_locality, @filter_by_country, @filter_by_postal_code", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_excluded_s_patron_analysisResult>> get_excluded_s_patron_analysisAsync(decimal? id, DateTime? date_of_birth, string last_name, string first_name, string other_name, string res_address_1, string res_address_2, string res_locality, string res_state_province, string res_country, string res_postal_code, string filter_by_first_name, string filter_by_other_name, string filter_by_locality, string filter_by_country, string filter_by_postal_code, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "date_of_birth",
                    Value = date_of_birth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "other_name",
                    Size = 30,
                    Value = other_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_address_1",
                    Size = 60,
                    Value = res_address_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_address_2",
                    Size = 60,
                    Value = res_address_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_locality",
                    Size = 30,
                    Value = res_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_state_province",
                    Size = 30,
                    Value = res_state_province ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_country",
                    Size = 30,
                    Value = res_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "res_postal_code",
                    Size = 10,
                    Value = res_postal_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_first_name",
                    Size = 1,
                    Value = filter_by_first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_other_name",
                    Size = 1,
                    Value = filter_by_other_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_locality",
                    Size = 1,
                    Value = filter_by_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_country",
                    Size = 1,
                    Value = filter_by_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "filter_by_postal_code",
                    Size = 1,
                    Value = filter_by_postal_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_excluded_s_patron_analysisResult>("EXEC @returnValue = [dbo].[get_excluded_s_patron_analysis] @id, @date_of_birth, @last_name, @first_name, @other_name, @res_address_1, @res_address_2, @res_locality, @res_state_province, @res_country, @res_postal_code, @filter_by_first_name, @filter_by_other_name, @filter_by_locality, @filter_by_country, @filter_by_postal_code", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_floor_crt_available_payoutsResult>> get_floor_crt_available_payoutsAsync(decimal? employee_id, string include_cheque_payouts, decimal? ticket_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "include_cheque_payouts",
                    Size = 1,
                    Value = include_cheque_payouts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_floor_crt_available_payoutsResult>("EXEC @returnValue = [dbo].[get_floor_crt_available_payouts] @employee_id, @include_cheque_payouts, @ticket_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_keno_ticket_statusAsync(string ticket_number, string user_id, OutputParameter<int?> amount_bet, OutputParameter<int?> amount_won, OutputParameter<int?> amount_cancelled, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteramount_bet = new SqlParameter
            {
                ParameterName = "amount_bet",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = amount_bet?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteramount_won = new SqlParameter
            {
                ParameterName = "amount_won",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = amount_won?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteramount_cancelled = new SqlParameter
            {
                ParameterName = "amount_cancelled",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = amount_cancelled?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Size = 18,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameteramount_bet,
                parameteramount_won,
                parameteramount_cancelled,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_keno_ticket_status] @ticket_number, @amount_bet OUTPUT, @amount_won OUTPUT, @amount_cancelled OUTPUT, @user_id", sqlParameters, cancellationToken);

            amount_bet.SetValue(parameteramount_bet.Value);
            amount_won.SetValue(parameteramount_won.Value);
            amount_cancelled.SetValue(parameteramount_cancelled.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_monthly_depositAsync(decimal? cbg_account_id, OutputParameter<decimal?> monthly_deposit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametermonthly_deposit = new SqlParameter
            {
                ParameterName = "monthly_deposit",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = monthly_deposit?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parametermonthly_deposit,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_monthly_deposit] @cbg_account_id, @monthly_deposit OUTPUT", sqlParameters, cancellationToken);

            monthly_deposit.SetValue(parametermonthly_deposit.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_next_id_controlAsync(string table_name, string column_name, OutputParameter<int?> id_value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterid_value = new SqlParameter
            {
                ParameterName = "id_value",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = id_value?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "table_name",
                    Size = 30,
                    Value = table_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "column_name",
                    Size = 30,
                    Value = column_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterid_value,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_next_id_control] @table_name, @column_name, @id_value OUTPUT", sqlParameters, cancellationToken);

            id_value.SetValue(parameterid_value.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_patron_group_membershipAsync(string patron_id, OutputParameter<string> group_string, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametergroup_string = new SqlParameter
            {
                ParameterName = "group_string",
                Size = 60,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = group_string?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Size = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parametergroup_string,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_patron_group_membership] @patron_id, @group_string OUTPUT", sqlParameters, cancellationToken);

            group_string.SetValue(parametergroup_string.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_point_purge_config_for_dateResult>> get_point_purge_config_for_dateAsync(short? css_site_id, DateTime? searchdate, string dayofweek, byte? weeknum, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "searchdate",
                    Value = searchdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dayofweek",
                    Size = 10,
                    Value = dayofweek ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "weeknum",
                    Value = weeknum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_point_purge_config_for_dateResult>("EXEC @returnValue = [dbo].[get_point_purge_config_for_date] @css_site_id, @searchdate, @dayofweek, @weeknum", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_qogr_limitAsync(decimal? cbg_account_id, byte? qogr_type_id, OutputParameter<decimal?> amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = amount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "qogr_type_id",
                    Value = qogr_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameteramount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_qogr_limit] @cbg_account_id, @qogr_type_id, @amount OUTPUT", sqlParameters, cancellationToken);

            amount.SetValue(parameteramount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_spend_reward_for_cardResult>> get_spend_reward_for_cardAsync(int? card_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_spend_reward_for_cardResult>("EXEC @returnValue = [dbo].[get_spend_reward_for_card] @card_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_spend_time_periodAsync(byte? time_period, OutputParameter<int?> card_id, OutputParameter<int?> daily_spend, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercard_id = new SqlParameter
            {
                ParameterName = "card_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterdaily_spend = new SqlParameter
            {
                ParameterName = "daily_spend",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = daily_spend?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parametercard_id,
                new SqlParameter
                {
                    ParameterName = "time_period",
                    Value = time_period ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterdaily_spend,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_spend_time_period] @card_id OUTPUT, @time_period, @daily_spend OUTPUT", sqlParameters, cancellationToken);

            card_id.SetValue(parametercard_id.Value);
            daily_spend.SetValue(parameterdaily_spend.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_summary_level_configAsync(int? sum_lev, int? site_id, DateTime? start_dt, OutputParameter<DateTime?> ret_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterret_dt = new SqlParameter
            {
                ParameterName = "ret_dt",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ret_dt?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sum_lev",
                    Value = sum_lev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterret_dt,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_summary_level_config] @sum_lev, @site_id, @start_dt, @ret_dt OUTPUT", sqlParameters, cancellationToken);

            ret_dt.SetValue(parameterret_dt.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> get_summary_level_config_cssAsync(int? sum_lev, int? css_site_id, DateTime? start_dt, OutputParameter<DateTime?> ret_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterret_dt = new SqlParameter
            {
                ParameterName = "ret_dt",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ret_dt?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sum_lev",
                    Value = sum_lev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterret_dt,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[get_summary_level_config_css] @sum_lev, @css_site_id, @start_dt, @ret_dt OUTPUT", sqlParameters, cancellationToken);

            ret_dt.SetValue(parameterret_dt.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_tag_configResult>> get_tag_configAsync(int? site_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_tag_configResult>("EXEC @returnValue = [dbo].[get_tag_config] @site_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_transaction_lockResult>> get_transaction_lockAsync(short? site_id, decimal? target_id, string target_type, int? duration, string holder, OutputParameter<string> token, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertoken = new SqlParameter
            {
                ParameterName = "token",
                Size = 256,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = token?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "target_id",
                    Precision = 18,
                    Value = target_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "target_type",
                    Size = 100,
                    Value = target_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertoken,
                new SqlParameter
                {
                    ParameterName = "duration",
                    Value = duration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "holder",
                    Size = 256,
                    Value = holder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_transaction_lockResult>("EXEC @returnValue = [dbo].[get_transaction_lock] @site_id, @target_id, @target_type, @token OUTPUT, @duration, @holder", sqlParameters, cancellationToken);

            token.SetValue(parametertoken.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> increment_master_cardAsync(int? increment, OutputParameter<int?> init_value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterinit_value = new SqlParameter
            {
                ParameterName = "init_value",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = init_value?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "increment",
                    Value = increment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterinit_value,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[increment_master_card] @increment, @init_value OUTPUT", sqlParameters, cancellationToken);

            init_value.SetValue(parameterinit_value.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_egm_metersAsync(short? site_id, DateTime? log_dt, int? ser_num, short? denom, short? game_num, int? game_var_num, int? stroke, int? turnover, int? wins, int? can_cred, int? hop_fil, int? coins_in, int? coins_out, int? coins_to_cb, int? cless_cr_in, int? cless_cr_out, int? notes_in, int? notes_count, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, OutputParameter<decimal?> i_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteri_id = new SqlParameter
            {
                ParameterName = "i_id",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = i_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "log_dt",
                    Value = log_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ser_num",
                    Value = ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom",
                    Value = denom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "can_cred",
                    Value = can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_in",
                    Value = coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_out",
                    Value = coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_cb",
                    Value = coins_to_cb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cless_cr_in",
                    Value = cless_cr_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cless_cr_out",
                    Value = cless_cr_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in",
                    Value = notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_count",
                    Value = notes_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteri_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_egm_meters] @site_id, @log_dt, @ser_num, @denom, @game_num, @game_var_num, @stroke, @turnover, @wins, @can_cred, @hop_fil, @coins_in, @coins_out, @coins_to_cb, @cless_cr_in, @cless_cr_out, @notes_in, @notes_count, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @i_id OUTPUT", sqlParameters, cancellationToken);

            i_id.SetValue(parameteri_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insert_egm_meters_v2Async(short? site_id, DateTime? log_dt, int? ser_num, short? denom, short? game_num, int? game_var_num, int? stroke, int? turnover, int? wins, int? can_cred, int? hop_fil, int? coins_in, int? coins_out, int? coins_to_cb, int? cless_cr_in, int? cless_cr_out, int? notes_in, int? notes_count, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, OutputParameter<decimal?> i_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteri_id = new SqlParameter
            {
                ParameterName = "i_id",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = i_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "log_dt",
                    Value = log_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ser_num",
                    Value = ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom",
                    Value = denom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "can_cred",
                    Value = can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_in",
                    Value = coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_out",
                    Value = coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_cb",
                    Value = coins_to_cb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cless_cr_in",
                    Value = cless_cr_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cless_cr_out",
                    Value = cless_cr_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in",
                    Value = notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_count",
                    Value = notes_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteri_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_egm_meters_v2] @site_id, @log_dt, @ser_num, @denom, @game_num, @game_var_num, @stroke, @turnover, @wins, @can_cred, @hop_fil, @coins_in, @coins_out, @coins_to_cb, @cless_cr_in, @cless_cr_out, @notes_in, @notes_count, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins, @i_id OUTPUT", sqlParameters, cancellationToken);

            i_id.SetValue(parameteri_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> is_hostAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[is_host]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> is_jackpot_pool_suspendedAsync(short? site_id, int? pool_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[is_jackpot_pool_suspended] @site_id, @pool_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<jackpot_meters_summariseResult>> jackpot_meters_summariseAsync(short? site_id, int? pool_number, short? pool_site_id, DateTime? start_dt, short? sum_level, int? serial_num, short? denomination, int? ssan, int? bgvn, short? floor, short? bank, short? position, short? pool_group_id, double? total_rtp, double? increment, int? reset, int? maximum, int? turnover, int? wins, int? lp_wins, int? sap_wins, int? erp_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_group_id",
                    Value = pool_group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "increment",
                    Value = increment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "maximum",
                    Value = maximum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "erp_wins",
                    Value = erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<jackpot_meters_summariseResult>("EXEC @returnValue = [dbo].[jackpot_meters_summarise] @site_id, @pool_number, @pool_site_id, @start_dt, @sum_level, @serial_num, @denomination, @ssan, @bgvn, @floor, @bank, @position, @pool_group_id, @total_rtp, @increment, @reset, @maximum, @turnover, @wins, @lp_wins, @sap_wins, @erp_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<jackpot_summariseResult>> jackpot_summariseAsync(short? p_site_id, int? pool_num, int? serial_num, short? egm_site_id, short? game_num, int? var_num, short? denomination, short? sum_level, DateTime? start_dt, int? contribution, int? increment, int? rounding, int? hit_count, int? hit_amt, int? sp_1, int? sp_2, int? sp_3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_site_id",
                    Value = p_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_site_id",
                    Value = egm_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "var_num",
                    Value = var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "contribution",
                    Value = contribution ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "increment",
                    Value = increment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rounding",
                    Value = rounding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hit_count",
                    Value = hit_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hit_amt",
                    Value = hit_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sp_1",
                    Value = sp_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sp_2",
                    Value = sp_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sp_3",
                    Value = sp_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<jackpot_summariseResult>("EXEC @returnValue = [dbo].[jackpot_summarise] @p_site_id, @pool_num, @serial_num, @egm_site_id, @game_num, @var_num, @denomination, @sum_level, @start_dt, @contribution, @increment, @rounding, @hit_count, @hit_amt, @sp_1, @sp_2, @sp_3", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<jng_lockResult>> jng_lockAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<jng_lockResult>("EXEC @returnValue = [dbo].[jng_lock]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_poolAsync(short? site_id, int? pool_num, int? cur_value, DateTime? cur_val_dt, DateTime? last_hit, int? cur_ovrflw, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_value",
                    Value = cur_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_val_dt",
                    Value = cur_val_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_hit",
                    Value = last_hit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cur_ovrflw",
                    Value = cur_ovrflw ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool] @site_id, @pool_num, @cur_value, @cur_val_dt, @last_hit, @cur_ovrflw", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_cur_fillAsync(short? site_id, int? pool_num, int? cur_fil_val, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_fil_val",
                    Value = cur_fil_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_cur_fill] @site_id, @pool_num, @cur_fil_val", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_cur_ovrflowAsync(short? site_id, int? pool_num, int? cur_ovrflw, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_ovrflw",
                    Value = cur_ovrflw ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_cur_ovrflow] @site_id, @pool_num, @cur_ovrflw", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_cur_valAsync(short? site_id, int? pool_num, int? cur_value, DateTime? cur_val_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_value",
                    Value = cur_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cur_val_dt",
                    Value = cur_val_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_cur_val] @site_id, @pool_num, @cur_value, @cur_val_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_date_retiredAsync(short? site_id, int? pool_num, DateTime? retired, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "retired",
                    Value = retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_date_retired] @site_id, @pool_num, @retired", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_incrementAsync(short? site_id, int? pool_num, double? inc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inc",
                    Value = inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_increment] @site_id, @pool_num, @inc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_last_hitAsync(short? site_id, int? pool_num, DateTime? last_hit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_hit",
                    Value = last_hit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_last_hit] @site_id, @pool_num, @last_hit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_max_autopayAsync(short? site_id, int? pool_num, int? autopay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "autopay",
                    Value = autopay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_max_autopay] @site_id, @pool_num, @autopay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_otherAsync(short? site_id, int? pool_num, string pool_name, string wghted_flag, string prze_share, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_other] @site_id, @pool_num, @pool_name, @wghted_flag, @prze_share", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_other_v2Async(short? site_id, int? pool_num, string pool_name, string wghted_flag, string prze_share, string sub_pool, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sub_pool",
                    Size = 8,
                    Value = sub_pool ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_other_v2] @site_id, @pool_num, @pool_name, @wghted_flag, @prze_share, @sub_pool", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_other_v3Async(short? site_id, int? pool_num, string pool_name, string wghted_flag, string prze_share, string sub_pool, double? total_rtp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sub_pool",
                    Size = 8,
                    Value = sub_pool ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_other_v3] @site_id, @pool_num, @pool_name, @wghted_flag, @prze_share, @sub_pool, @total_rtp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_other_v4Async(short? site_id, int? pool_num, string pool_name, string wghted_flag, string prze_share, string sub_pool, double? total_rtp, double? auxiliary_rtp, string level_name, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sub_pool",
                    Size = 8,
                    Value = sub_pool ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "auxiliary_rtp",
                    Value = auxiliary_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "level_name",
                    Size = 19,
                    Value = level_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_other_v4] @site_id, @pool_num, @pool_name, @wghted_flag, @prze_share, @sub_pool, @total_rtp, @auxiliary_rtp, @level_name, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_reset_and_maxAsync(short? site_id, int? pool_num, int? reset, int? max_val, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_val",
                    Value = max_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_reset_and_max] @site_id, @pool_num, @reset, @max_val", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_statusAsync(short? site_id, int? pool_num, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_status] @site_id, @pool_num, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> jpc_update_pool_update_timeAsync(short? site_id, int? pool_num, int? update_time, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "update_time",
                    Value = update_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[jpc_update_pool_update_time] @site_id, @pool_num, @update_time", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> k_get_patron_extraAsync(int? card_id, string patron_extra_type_id, string user_id, OutputParameter<string> detail_value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterdetail_value = new SqlParameter
            {
                ParameterName = "detail_value",
                Size = 255,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = detail_value?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patron_extra_type_id",
                    Size = 18,
                    Value = patron_extra_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterdetail_value,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[k_get_patron_extra] @card_id, @patron_extra_type_id, @detail_value OUTPUT, @user_id", sqlParameters, cancellationToken);

            detail_value.SetValue(parameterdetail_value.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_get_patron_statementResult>> k_get_patron_statementAsync(string account_id, int? card_id, DateTime? from_datetime, DateTime? to_datetime, DateTime? last_logged_datetime, int? max_no_of_transactions, byte? tracking_type_id, int? system_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "from_datetime",
                    Value = from_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "to_datetime",
                    Value = to_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_logged_datetime",
                    Value = last_logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "max_no_of_transactions",
                    Value = max_no_of_transactions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_get_patron_statementResult>("EXEC @returnValue = [dbo].[k_get_patron_statement] @account_id, @card_id, @from_datetime, @to_datetime, @last_logged_datetime, @max_no_of_transactions, @tracking_type_id, @system_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> k_i_g_play_summariseAsync(int? card_id, int? css_site_id, short? sum_level, DateTime? start_datetime, short? css_game_type_id, DateTime? logged_datetime, int? no_of_games, int? bet, int? win, int? cancelled, int? cancelled_game, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_game_type_id",
                    Value = css_game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_games",
                    Value = no_of_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bet",
                    Value = bet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "win",
                    Value = win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled",
                    Value = cancelled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled_game",
                    Value = cancelled_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[k_i_g_play_summarise] @card_id, @css_site_id, @sum_level, @start_datetime, @css_game_type_id, @logged_datetime, @no_of_games, @bet, @win, @cancelled, @cancelled_game", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> k_keno_agency_reconcileAsync(int? reconcile_day, short? css_site_id, DateTime? logged_datetime, int? cash_deposit, int? cash_withdrawal, int? bet, int? win, int? cancelled, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reconcile_day",
                    Value = reconcile_day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cash_deposit",
                    Value = cash_deposit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_withdrawal",
                    Value = cash_withdrawal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bet",
                    Value = bet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "win",
                    Value = win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled",
                    Value = cancelled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[k_keno_agency_reconcile] @reconcile_day, @css_site_id, @logged_datetime, @cash_deposit, @cash_withdrawal, @bet, @win, @cancelled", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> k_keno_play_summariseAsync(int? card_id, short? sum_level, DateTime? start_datetime, short? css_site_id, DateTime? logged_datetime, string keno_ticket_number, string ticket_description, int? no_of_games, int? bet, int? win, int? cancelled, int? first_game_number, int? last_game_number, int? cancelled_game, string keno_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "keno_ticket_number",
                    Size = 18,
                    Value = keno_ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_description",
                    Size = 30,
                    Value = ticket_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_games",
                    Value = no_of_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bet",
                    Value = bet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "win",
                    Value = win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled",
                    Value = cancelled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "first_game_number",
                    Value = first_game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_game_number",
                    Value = last_game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled_game",
                    Value = cancelled_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "keno_serial_number",
                    Size = 18,
                    Value = keno_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[k_keno_play_summarise] @card_id, @sum_level, @start_datetime, @css_site_id, @logged_datetime, @keno_ticket_number, @ticket_description, @no_of_games, @bet, @win, @cancelled, @first_game_number, @last_game_number, @cancelled_game, @keno_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_account_trans_combineResult>> k_log_account_trans_combineAsync(int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, string amount, string status, byte? system_id, string desc, string user_id, string call_pending_first, int? reconcile_day, OutputParameter<string> account_id, OutputParameter<string> new_bal, OutputParameter<int?> trans_id, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteraccount_id = new SqlParameter
            {
                ParameterName = "account_id",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = account_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parametertrans_id = new SqlParameter
            {
                ParameterName = "trans_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = trans_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameteraccount_id,
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertrans_id,
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "call_pending_first",
                    Size = 1,
                    Value = call_pending_first ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "reconcile_day",
                    Value = reconcile_day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_account_trans_combineResult>("EXEC @returnValue = [dbo].[k_log_account_trans_combine] @account_id OUTPUT, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id OUTPUT, @rtn_avail OUTPUT, @owner_site OUTPUT, @user_id, @call_pending_first, @reconcile_day", sqlParameters, cancellationToken);

            account_id.SetValue(parameteraccount_id.Value);
            new_bal.SetValue(parameternew_bal.Value);
            trans_id.SetValue(parametertrans_id.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_account_trans_pendingResult>> k_log_account_trans_pendingAsync(int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_datetime, DateTime? period_datetime, string amount, string status, byte? system_id, string desc, string user_id, OutputParameter<string> account_id, OutputParameter<string> new_bal, OutputParameter<int?> trans_id, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteraccount_id = new SqlParameter
            {
                ParameterName = "account_id",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = account_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parametertrans_id = new SqlParameter
            {
                ParameterName = "trans_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = trans_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameteraccount_id,
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_datetime",
                    Value = period_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertrans_id,
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_account_trans_pendingResult>("EXEC @returnValue = [dbo].[k_log_account_trans_pending] @account_id OUTPUT, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_datetime, @period_datetime, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id OUTPUT, @rtn_avail OUTPUT, @owner_site OUTPUT, @user_id", sqlParameters, cancellationToken);

            account_id.SetValue(parameteraccount_id.Value);
            new_bal.SetValue(parameternew_bal.Value);
            trans_id.SetValue(parametertrans_id.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_account_trans_updateResult>> k_log_account_trans_updateAsync(short? css_site_id, int? trans_id, string status, DateTime? period_datetime, DateTime? logged_datetime, int? reconcile_day, OutputParameter<byte?> track_type, OutputParameter<int?> card_id, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrack_type = new SqlParameter
            {
                ParameterName = "track_type",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = track_type?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.TinyInt,
            };
            var parametercard_id = new SqlParameter
            {
                ParameterName = "card_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "period_datetime",
                    Value = period_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametertrack_type,
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametercard_id,
                parameterreturn_bal,
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "reconcile_day",
                    Value = reconcile_day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_account_trans_updateResult>("EXEC @returnValue = [dbo].[k_log_account_trans_update] @css_site_id, @trans_id, @status, @period_datetime, @track_type OUTPUT, @logged_datetime, @card_id OUTPUT, @return_bal OUTPUT, @rtn_avail OUTPUT, @owner_site OUTPUT, @reconcile_day", sqlParameters, cancellationToken);

            track_type.SetValue(parametertrack_type.Value);
            card_id.SetValue(parametercard_id.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_i_g_bet_trans_completeResult>> k_log_i_g_bet_trans_completeAsync(int? card_id, short? sum_level, DateTime? start_datetime, byte? trans_type, short? css_site_id, DateTime? logged_datetime, string amount, string status, string update_avail, short? css_game_type_id, int? no_of_games, int? no_of_cancelled_games, OutputParameter<string> account_id, OutputParameter<int?> trans_id, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteraccount_id = new SqlParameter
            {
                ParameterName = "account_id",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = account_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parametertrans_id = new SqlParameter
            {
                ParameterName = "trans_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = trans_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameteraccount_id,
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertrans_id,
                new SqlParameter
                {
                    ParameterName = "update_avail",
                    Size = 1,
                    Value = update_avail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "css_game_type_id",
                    Value = css_game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_games",
                    Value = no_of_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_cancelled_games",
                    Value = no_of_cancelled_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturn_bal,
                parameterrtn_avail,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_i_g_bet_trans_completeResult>("EXEC @returnValue = [dbo].[k_log_i_g_bet_trans_complete] @account_id OUTPUT, @card_id, @sum_level, @start_datetime, @trans_type, @css_site_id, @logged_datetime, @amount, @status, @trans_id OUTPUT, @update_avail, @css_game_type_id, @no_of_games, @no_of_cancelled_games, @return_bal OUTPUT, @rtn_avail OUTPUT", sqlParameters, cancellationToken);

            account_id.SetValue(parameteraccount_id.Value);
            trans_id.SetValue(parametertrans_id.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_i_g_bet_trans_pendingResult>> k_log_i_g_bet_trans_pendingAsync(string account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, short? css_site_id, DateTime? logged_datetime, string amount, string status, short? css_game_type_id, string user_id, OutputParameter<int?> trans_id, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrans_id = new SqlParameter
            {
                ParameterName = "trans_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = trans_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertrans_id,
                new SqlParameter
                {
                    ParameterName = "css_game_type_id",
                    Value = css_game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturn_bal,
                parameterrtn_avail,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_i_g_bet_trans_pendingResult>("EXEC @returnValue = [dbo].[k_log_i_g_bet_trans_pending] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @css_site_id, @logged_datetime, @amount, @status, @trans_id OUTPUT, @css_game_type_id, @return_bal OUTPUT, @rtn_avail OUTPUT, @user_id", sqlParameters, cancellationToken);

            trans_id.SetValue(parametertrans_id.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_i_g_bet_trans_updateResult>> k_log_i_g_bet_trans_updateAsync(short? css_site_id, int? trans_id, string status, DateTime? period_datetime, DateTime? logged_datetime, int? css_game_type_id, int? no_of_games, OutputParameter<byte?> track_type, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrack_type = new SqlParameter
            {
                ParameterName = "track_type",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = track_type?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.TinyInt,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "period_datetime",
                    Value = period_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametertrack_type,
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_game_type_id",
                    Value = css_game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_games",
                    Value = no_of_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturn_bal,
                parameterrtn_avail,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_i_g_bet_trans_updateResult>("EXEC @returnValue = [dbo].[k_log_i_g_bet_trans_update] @css_site_id, @trans_id, @status, @period_datetime, @track_type OUTPUT, @logged_datetime, @css_game_type_id, @no_of_games, @return_bal OUTPUT, @rtn_avail OUTPUT", sqlParameters, cancellationToken);

            track_type.SetValue(parametertrack_type.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_keno_bet_cancel_completeResult>> k_log_keno_bet_cancel_completeAsync(string account_id, int? card_id, short? sum_level, DateTime? start_datetime, byte? trans_type, byte? system_id, short? css_site_id, DateTime? logged_datetime, string amount, string status, string desc, string update_avail, int? reconcile_day, string keno_ticket_number, int? first_game_number, int? last_game_number, int? no_of_cancelled_games, string keno_serial_number, short? css_site_id_bet, string user_id, OutputParameter<int?> trans_id, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrans_id = new SqlParameter
            {
                ParameterName = "trans_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = trans_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertrans_id,
                new SqlParameter
                {
                    ParameterName = "update_avail",
                    Size = 1,
                    Value = update_avail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "reconcile_day",
                    Value = reconcile_day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "keno_ticket_number",
                    Size = 18,
                    Value = keno_ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "first_game_number",
                    Value = first_game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_game_number",
                    Value = last_game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_cancelled_games",
                    Value = no_of_cancelled_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "keno_serial_number",
                    Size = 18,
                    Value = keno_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id_bet",
                    Value = css_site_id_bet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturn_bal,
                parameterrtn_avail,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_keno_bet_cancel_completeResult>("EXEC @returnValue = [dbo].[k_log_keno_bet_cancel_complete] @account_id, @card_id, @sum_level, @start_datetime, @trans_type, @system_id, @css_site_id, @logged_datetime, @amount, @status, @desc, @trans_id OUTPUT, @update_avail, @reconcile_day, @keno_ticket_number, @first_game_number, @last_game_number, @no_of_cancelled_games, @keno_serial_number, @css_site_id_bet, @user_id, @return_bal OUTPUT, @rtn_avail OUTPUT", sqlParameters, cancellationToken);

            trans_id.SetValue(parametertrans_id.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_keno_bet_trans_completeResult>> k_log_keno_bet_trans_completeAsync(string account_id, int? card_id, short? sum_level, DateTime? start_datetime, byte? trans_type, byte? system_id, short? css_site_id, DateTime? logged_datetime, string amount, string status, string update_avail, int? reconcile_day, string keno_ticket_number, string ticket_description, int? no_of_games, int? first_game_number, int? last_game_number, string keno_serial_number, OutputParameter<int?> trans_id, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrans_id = new SqlParameter
            {
                ParameterName = "trans_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = trans_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertrans_id,
                new SqlParameter
                {
                    ParameterName = "update_avail",
                    Size = 1,
                    Value = update_avail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "reconcile_day",
                    Value = reconcile_day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "keno_ticket_number",
                    Size = 18,
                    Value = keno_ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_description",
                    Size = 30,
                    Value = ticket_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_games",
                    Value = no_of_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "first_game_number",
                    Value = first_game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_game_number",
                    Value = last_game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "keno_serial_number",
                    Size = 18,
                    Value = keno_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturn_bal,
                parameterrtn_avail,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_keno_bet_trans_completeResult>("EXEC @returnValue = [dbo].[k_log_keno_bet_trans_complete] @account_id, @card_id, @sum_level, @start_datetime, @trans_type, @system_id, @css_site_id, @logged_datetime, @amount, @status, @trans_id OUTPUT, @update_avail, @reconcile_day, @keno_ticket_number, @ticket_description, @no_of_games, @first_game_number, @last_game_number, @keno_serial_number, @return_bal OUTPUT, @rtn_avail OUTPUT", sqlParameters, cancellationToken);

            trans_id.SetValue(parametertrans_id.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_keno_bet_trans_pendingResult>> k_log_keno_bet_trans_pendingAsync(string account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? system_id, short? css_site_id, DateTime? logged_datetime, string amount, string status, string user_id, OutputParameter<int?> trans_id, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrans_id = new SqlParameter
            {
                ParameterName = "trans_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = trans_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertrans_id,
                parameterreturn_bal,
                parameterrtn_avail,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_keno_bet_trans_pendingResult>("EXEC @returnValue = [dbo].[k_log_keno_bet_trans_pending] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @system_id, @css_site_id, @logged_datetime, @amount, @status, @trans_id OUTPUT, @return_bal OUTPUT, @rtn_avail OUTPUT, @user_id", sqlParameters, cancellationToken);

            trans_id.SetValue(parametertrans_id.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<k_log_keno_bet_trans_updateResult>> k_log_keno_bet_trans_updateAsync(byte? system_id, short? css_site_id, int? trans_id, string status, DateTime? period_datetime, DateTime? logged_datetime, int? reconcile_day, string keno_ticket_number, string ticket_description, int? no_of_games, int? first_game_number, int? last_game_number, string keno_serial_number, OutputParameter<byte?> track_type, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrack_type = new SqlParameter
            {
                ParameterName = "track_type",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = track_type?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.TinyInt,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "period_datetime",
                    Value = period_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametertrack_type,
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "reconcile_day",
                    Value = reconcile_day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "keno_ticket_number",
                    Size = 18,
                    Value = keno_ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_description",
                    Size = 30,
                    Value = ticket_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "no_of_games",
                    Value = no_of_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "first_game_number",
                    Value = first_game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_game_number",
                    Value = last_game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "keno_serial_number",
                    Size = 18,
                    Value = keno_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturn_bal,
                parameterrtn_avail,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<k_log_keno_bet_trans_updateResult>("EXEC @returnValue = [dbo].[k_log_keno_bet_trans_update] @system_id, @css_site_id, @trans_id, @status, @period_datetime, @track_type OUTPUT, @logged_datetime, @reconcile_day, @keno_ticket_number, @ticket_description, @no_of_games, @first_game_number, @last_game_number, @keno_serial_number, @return_bal OUTPUT, @rtn_avail OUTPUT", sqlParameters, cancellationToken);

            track_type.SetValue(parametertrack_type.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> k_update_patron_extraAsync(int? card_id, string patron_extra_type_id, string detail_value, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patron_extra_type_id",
                    Size = 18,
                    Value = patron_extra_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "detail_value",
                    Size = 255,
                    Value = detail_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[k_update_patron_extra] @card_id, @patron_extra_type_id, @detail_value, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> link_employee_to_egm_transAsync(short? site_id, int? card_id, int? egm_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[link_employee_to_egm_trans] @site_id, @card_id, @egm_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> link_player_to_egm_transAsync(short? site_id, int? card_id, int? egm_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[link_player_to_egm_trans] @site_id, @card_id, @egm_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> link_player_to_egm_trans_V2Async(short? site_id, int? card_id, int? egm_serial_number, decimal? tick_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[link_player_to_egm_trans_V2] @site_id, @card_id, @egm_serial_number, @tick_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> link_ticket_number_tito_transactionAsync(decimal? ticket_barcode, DateTime? transaction_datetime, decimal? ticket_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ticket_barcode",
                    Precision = 18,
                    Value = ticket_barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[link_ticket_number_tito_transaction] @ticket_barcode, @transaction_datetime, @ticket_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_agingResult>> log_account_trans_agingAsync(string account_id, DateTime? start_dt, byte? track_type, short? css_site_id, DateTime? logged_dt, byte? system_id, OutputParameter<int?> card_id, OutputParameter<string> rtn_age_amt, OutputParameter<string> rtn_new_bal, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercard_id = new SqlParameter
            {
                ParameterName = "card_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterrtn_age_amt = new SqlParameter
            {
                ParameterName = "rtn_age_amt",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_age_amt?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_new_bal = new SqlParameter
            {
                ParameterName = "rtn_new_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parametercard_id,
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterrtn_age_amt,
                parameterrtn_new_bal,
                parameterrtn_avail,
                parameterowner_site,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_agingResult>("EXEC @returnValue = [dbo].[log_account_trans_aging] @account_id, @card_id OUTPUT, @start_dt, @track_type, @css_site_id, @logged_dt, @system_id, @rtn_age_amt OUTPUT, @rtn_new_bal OUTPUT, @rtn_avail OUTPUT, @owner_site OUTPUT", sqlParameters, cancellationToken);

            card_id.SetValue(parametercard_id.Value);
            rtn_age_amt.SetValue(parameterrtn_age_amt.Value);
            rtn_new_bal.SetValue(parameterrtn_new_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_aging_gResult>> log_account_trans_aging_gAsync(decimal? account_id, DateTime? start_dt, byte? track_type, short? css_site_id, DateTime? logged_dt, byte? system_id, OutputParameter<int?> card_id, OutputParameter<decimal?> rtn_age_amt, OutputParameter<decimal?> rtn_new_bal, OutputParameter<decimal?> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercard_id = new SqlParameter
            {
                ParameterName = "card_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterrtn_age_amt = new SqlParameter
            {
                ParameterName = "rtn_age_amt",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_age_amt?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterrtn_new_bal = new SqlParameter
            {
                ParameterName = "rtn_new_bal",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parametercard_id,
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterrtn_age_amt,
                parameterrtn_new_bal,
                parameterrtn_avail,
                parameterowner_site,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_aging_gResult>("EXEC @returnValue = [dbo].[log_account_trans_aging_g] @account_id, @card_id OUTPUT, @start_dt, @track_type, @css_site_id, @logged_dt, @system_id, @rtn_age_amt OUTPUT, @rtn_new_bal OUTPUT, @rtn_avail OUTPUT, @owner_site OUTPUT", sqlParameters, cancellationToken);

            card_id.SetValue(parametercard_id.Value);
            rtn_age_amt.SetValue(parameterrtn_age_amt.Value);
            rtn_new_bal.SetValue(parameterrtn_new_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_aging_hostResult>> log_account_trans_aging_hostAsync(byte? css_site_id, byte? system_id, short? owner_site_id, DateTime? start_dt, DateTime? logged_dt, string check_aging_required, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "owner_site_id",
                    Value = owner_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "check_aging_required",
                    Size = 1,
                    Value = check_aging_required ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_aging_hostResult>("EXEC @returnValue = [dbo].[log_account_trans_aging_host] @css_site_id, @system_id, @owner_site_id, @start_dt, @logged_dt, @check_aging_required", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_aging_siteResult>> log_account_trans_aging_siteAsync(string account_id, int? card_id, DateTime? start_dt, byte? tracking_type_id, short? css_site_id, DateTime? logged_dt, byte? system_id, string rtn_age_amt, string rtn_new_bal, string rtn_avail, short? owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "rtn_age_amt",
                    Size = 18,
                    Value = rtn_age_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "rtn_new_bal",
                    Size = 18,
                    Value = rtn_new_bal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "rtn_avail",
                    Size = 18,
                    Value = rtn_avail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "owner_site",
                    Value = owner_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_aging_siteResult>("EXEC @returnValue = [dbo].[log_account_trans_aging_site] @account_id, @card_id, @start_dt, @tracking_type_id, @css_site_id, @logged_dt, @system_id, @rtn_age_amt, @rtn_new_bal, @rtn_avail, @owner_site", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_cancelledResult>> log_account_trans_cancelledAsync(string account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, string amount, string status, byte? system_id, string desc, int? trans_id, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturn_bal,
                parameterrtn_avail,
                parameterowner_site,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_cancelledResult>("EXEC @returnValue = [dbo].[log_account_trans_cancelled] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @amount, @status, @system_id, @desc, @trans_id, @return_bal OUTPUT, @rtn_avail OUTPUT, @owner_site OUTPUT", sqlParameters, cancellationToken);

            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_cancelled_gResult>> log_account_trans_cancelled_gAsync(decimal? account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, decimal? amount, string status, byte? system_id, string desc, int? trans_id, double? exchange_rate, decimal? object_id_1, decimal? object_id_2, OutputParameter<decimal?> return_bal, OutputParameter<decimal?> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturn_bal,
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "exchange_rate",
                    Value = exchange_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "object_id_1",
                    Precision = 18,
                    Value = object_id_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "object_id_2",
                    Precision = 18,
                    Value = object_id_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_cancelled_gResult>("EXEC @returnValue = [dbo].[log_account_trans_cancelled_g] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @amount, @status, @system_id, @desc, @trans_id, @return_bal OUTPUT, @rtn_avail OUTPUT, @owner_site OUTPUT, @exchange_rate, @object_id_1, @object_id_2", sqlParameters, cancellationToken);

            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_completeResult>> log_account_trans_completeAsync(string account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, string amount, string status, byte? system_id, string desc, int? trans_id, string user_id, OutputParameter<string> new_bal, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_completeResult>("EXEC @returnValue = [dbo].[log_account_trans_complete] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id, @rtn_avail OUTPUT, @owner_site OUTPUT, @user_id", sqlParameters, cancellationToken);

            new_bal.SetValue(parameternew_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_complete_gResult>> log_account_trans_complete_gAsync(string account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, string amount, string status, byte? system_id, string desc, int? trans_id, string user_id, OutputParameter<string> new_bal, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_complete_gResult>("EXEC @returnValue = [dbo].[log_account_trans_complete_g] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id, @rtn_avail OUTPUT, @owner_site OUTPUT, @user_id", sqlParameters, cancellationToken);

            new_bal.SetValue(parameternew_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_deltasResult>> log_account_trans_deltasAsync(string account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, string amount, string status, byte? system_id, string desc, int? trans_id, string update_avail, OutputParameter<string> new_bal, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "update_avail",
                    Size = 1,
                    Value = update_avail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterrtn_avail,
                parameterowner_site,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_deltasResult>("EXEC @returnValue = [dbo].[log_account_trans_deltas] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id, @update_avail, @rtn_avail OUTPUT, @owner_site OUTPUT", sqlParameters, cancellationToken);

            new_bal.SetValue(parameternew_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_deltas_gResult>> log_account_trans_deltas_gAsync(decimal? account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, decimal? amount, string status, byte? system_id, string desc, int? trans_id, string update_avail, double? exchange_rate, OutputParameter<decimal?> new_bal, OutputParameter<decimal?> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "update_avail",
                    Size = 1,
                    Value = update_avail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "exchange_rate",
                    Value = exchange_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_deltas_gResult>("EXEC @returnValue = [dbo].[log_account_trans_deltas_g] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id, @update_avail, @rtn_avail OUTPUT, @owner_site OUTPUT, @exchange_rate", sqlParameters, cancellationToken);

            new_bal.SetValue(parameternew_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_mid_status_gResult>> log_account_trans_mid_status_gAsync(decimal? account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, decimal? amount, string status, byte? system_id, string desc, int? trans_id, OutputParameter<decimal?> new_bal, OutputParameter<decimal?> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrtn_avail,
                parameterowner_site,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_mid_status_gResult>("EXEC @returnValue = [dbo].[log_account_trans_mid_status_g] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id, @rtn_avail OUTPUT, @owner_site OUTPUT", sqlParameters, cancellationToken);

            new_bal.SetValue(parameternew_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_pend_tfrResult>> log_account_trans_pend_tfrAsync(string acc_id_from, string acc_id_to, int? card_id_from, int? card_id_to, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, string amount, string status, byte? system_id, string desc_from, string desc_to, int? trans_id, string user_id, OutputParameter<string> new_bal_from, OutputParameter<string> new_bal_to, OutputParameter<string> rtn_avail_frm, OutputParameter<string> rtn_avail_to, OutputParameter<short?> owner_site_fr, OutputParameter<short?> owner_site_to, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal_from = new SqlParameter
            {
                ParameterName = "new_bal_from",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal_from?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameternew_bal_to = new SqlParameter
            {
                ParameterName = "new_bal_to",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal_to?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail_frm = new SqlParameter
            {
                ParameterName = "rtn_avail_frm",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail_frm?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail_to = new SqlParameter
            {
                ParameterName = "rtn_avail_to",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail_to?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site_fr = new SqlParameter
            {
                ParameterName = "owner_site_fr",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site_fr?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterowner_site_to = new SqlParameter
            {
                ParameterName = "owner_site_to",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site_to?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "acc_id_from",
                    Size = 18,
                    Value = acc_id_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "acc_id_to",
                    Size = 18,
                    Value = acc_id_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id_from",
                    Value = card_id_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_id_to",
                    Value = card_id_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameternew_bal_from,
                parameternew_bal_to,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc_from",
                    Size = 255,
                    Value = desc_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc_to",
                    Size = 255,
                    Value = desc_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrtn_avail_frm,
                parameterrtn_avail_to,
                parameterowner_site_fr,
                parameterowner_site_to,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_pend_tfrResult>("EXEC @returnValue = [dbo].[log_account_trans_pend_tfr] @acc_id_from, @acc_id_to, @card_id_from, @card_id_to, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal_from OUTPUT, @new_bal_to OUTPUT, @status, @system_id, @desc_from, @desc_to, @trans_id, @rtn_avail_frm OUTPUT, @rtn_avail_to OUTPUT, @owner_site_fr OUTPUT, @owner_site_to OUTPUT, @user_id", sqlParameters, cancellationToken);

            new_bal_from.SetValue(parameternew_bal_from.Value);
            new_bal_to.SetValue(parameternew_bal_to.Value);
            rtn_avail_frm.SetValue(parameterrtn_avail_frm.Value);
            rtn_avail_to.SetValue(parameterrtn_avail_to.Value);
            owner_site_fr.SetValue(parameterowner_site_fr.Value);
            owner_site_to.SetValue(parameterowner_site_to.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_pend_tfr_gResult>> log_account_trans_pend_tfr_gAsync(decimal? acc_id_from, decimal? acc_id_to, int? card_id_from, int? card_id_to, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, decimal? amount, string status, byte? system_id, string desc_from, string desc_to, int? trans_id, OutputParameter<decimal?> new_bal_from, OutputParameter<decimal?> new_bal_to, OutputParameter<decimal?> rtn_avail_frm, OutputParameter<decimal?> rtn_avail_to, OutputParameter<short?> owner_site_fr, OutputParameter<short?> owner_site_to, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal_from = new SqlParameter
            {
                ParameterName = "new_bal_from",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal_from?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameternew_bal_to = new SqlParameter
            {
                ParameterName = "new_bal_to",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal_to?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterrtn_avail_frm = new SqlParameter
            {
                ParameterName = "rtn_avail_frm",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail_frm?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterrtn_avail_to = new SqlParameter
            {
                ParameterName = "rtn_avail_to",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail_to?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterowner_site_fr = new SqlParameter
            {
                ParameterName = "owner_site_fr",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site_fr?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterowner_site_to = new SqlParameter
            {
                ParameterName = "owner_site_to",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site_to?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "acc_id_from",
                    Precision = 18,
                    Value = acc_id_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "acc_id_to",
                    Precision = 18,
                    Value = acc_id_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id_from",
                    Value = card_id_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_id_to",
                    Value = card_id_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameternew_bal_from,
                parameternew_bal_to,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc_from",
                    Size = 255,
                    Value = desc_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc_to",
                    Size = 255,
                    Value = desc_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrtn_avail_frm,
                parameterrtn_avail_to,
                parameterowner_site_fr,
                parameterowner_site_to,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_pend_tfr_gResult>("EXEC @returnValue = [dbo].[log_account_trans_pend_tfr_g] @acc_id_from, @acc_id_to, @card_id_from, @card_id_to, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal_from OUTPUT, @new_bal_to OUTPUT, @status, @system_id, @desc_from, @desc_to, @trans_id, @rtn_avail_frm OUTPUT, @rtn_avail_to OUTPUT, @owner_site_fr OUTPUT, @owner_site_to OUTPUT", sqlParameters, cancellationToken);

            new_bal_from.SetValue(parameternew_bal_from.Value);
            new_bal_to.SetValue(parameternew_bal_to.Value);
            rtn_avail_frm.SetValue(parameterrtn_avail_frm.Value);
            rtn_avail_to.SetValue(parameterrtn_avail_to.Value);
            owner_site_fr.SetValue(parameterowner_site_fr.Value);
            owner_site_to.SetValue(parameterowner_site_to.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_pendingResult>> log_account_trans_pendingAsync(string account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, string amount, string status, byte? system_id, string desc, int? trans_id, string user_id, OutputParameter<string> new_bal, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Size = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Size = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_pendingResult>("EXEC @returnValue = [dbo].[log_account_trans_pending] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id, @rtn_avail OUTPUT, @owner_site OUTPUT, @user_id", sqlParameters, cancellationToken);

            new_bal.SetValue(parameternew_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_pending_gResult>> log_account_trans_pending_gAsync(decimal? account_id, int? card_id, short? sum_level, DateTime? start_dt, byte? trans_type, byte? track_type, short? css_site_id, DateTime? logged_dt, DateTime? period_dt, decimal? amount, string status, byte? system_id, string desc, int? trans_id, string allow_negative_balance_flag, double? exchange_rate, OutputParameter<decimal?> new_bal, OutputParameter<decimal?> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternew_bal = new SqlParameter
            {
                ParameterName = "new_bal",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = new_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameternew_bal,
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 255,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrtn_avail,
                parameterowner_site,
                new SqlParameter
                {
                    ParameterName = "allow_negative_balance_flag",
                    Size = 1,
                    Value = allow_negative_balance_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "exchange_rate",
                    Value = exchange_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_pending_gResult>("EXEC @returnValue = [dbo].[log_account_trans_pending_g] @account_id, @card_id, @sum_level, @start_dt, @trans_type, @track_type, @css_site_id, @logged_dt, @period_dt, @amount, @new_bal OUTPUT, @status, @system_id, @desc, @trans_id, @rtn_avail OUTPUT, @owner_site OUTPUT, @allow_negative_balance_flag, @exchange_rate", sqlParameters, cancellationToken);

            new_bal.SetValue(parameternew_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_updateResult>> log_account_trans_updateAsync(short? css_site_id, int? trans_id, string status, DateTime? period_dt, DateTime? logged_dt, OutputParameter<byte?> track_type, OutputParameter<int?> card_id, OutputParameter<string> return_bal, OutputParameter<string> rtn_avail, OutputParameter<short?> owner_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrack_type = new SqlParameter
            {
                ParameterName = "track_type",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = track_type?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.TinyInt,
            };
            var parametercard_id = new SqlParameter
            {
                ParameterName = "card_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturn_bal = new SqlParameter
            {
                ParameterName = "return_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = return_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail = new SqlParameter
            {
                ParameterName = "rtn_avail",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site = new SqlParameter
            {
                ParameterName = "owner_site",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametertrack_type,
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametercard_id,
                parameterreturn_bal,
                parameterrtn_avail,
                parameterowner_site,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_updateResult>("EXEC @returnValue = [dbo].[log_account_trans_update] @css_site_id, @trans_id, @status, @period_dt, @track_type OUTPUT, @logged_dt, @card_id OUTPUT, @return_bal OUTPUT, @rtn_avail OUTPUT, @owner_site OUTPUT", sqlParameters, cancellationToken);

            track_type.SetValue(parametertrack_type.Value);
            card_id.SetValue(parametercard_id.Value);
            return_bal.SetValue(parameterreturn_bal.Value);
            rtn_avail.SetValue(parameterrtn_avail.Value);
            owner_site.SetValue(parameterowner_site.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_account_trans_update_tfrResult>> log_account_trans_update_tfrAsync(short? css_site_id, int? trans_id, string status, DateTime? period_dt, DateTime? logged_dt, OutputParameter<byte?> track_type, OutputParameter<int?> card_id_1, OutputParameter<int?> card_id_2, OutputParameter<string> ret_bal_1, OutputParameter<string> ret_bal_2, OutputParameter<string> rtn_avail_1, OutputParameter<string> rtn_avail_2, OutputParameter<short?> owner_site_1, OutputParameter<short?> owner_site_2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertrack_type = new SqlParameter
            {
                ParameterName = "track_type",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = track_type?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.TinyInt,
            };
            var parametercard_id_1 = new SqlParameter
            {
                ParameterName = "card_id_1",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_id_1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercard_id_2 = new SqlParameter
            {
                ParameterName = "card_id_2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_id_2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterret_bal_1 = new SqlParameter
            {
                ParameterName = "ret_bal_1",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ret_bal_1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterret_bal_2 = new SqlParameter
            {
                ParameterName = "ret_bal_2",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ret_bal_2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail_1 = new SqlParameter
            {
                ParameterName = "rtn_avail_1",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail_1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterrtn_avail_2 = new SqlParameter
            {
                ParameterName = "rtn_avail_2",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rtn_avail_2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterowner_site_1 = new SqlParameter
            {
                ParameterName = "owner_site_1",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site_1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterowner_site_2 = new SqlParameter
            {
                ParameterName = "owner_site_2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = owner_site_2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametertrack_type,
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parametercard_id_1,
                parametercard_id_2,
                parameterret_bal_1,
                parameterret_bal_2,
                parameterrtn_avail_1,
                parameterrtn_avail_2,
                parameterowner_site_1,
                parameterowner_site_2,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_account_trans_update_tfrResult>("EXEC @returnValue = [dbo].[log_account_trans_update_tfr] @css_site_id, @trans_id, @status, @period_dt, @track_type OUTPUT, @logged_dt, @card_id_1 OUTPUT, @card_id_2 OUTPUT, @ret_bal_1 OUTPUT, @ret_bal_2 OUTPUT, @rtn_avail_1 OUTPUT, @rtn_avail_2 OUTPUT, @owner_site_1 OUTPUT, @owner_site_2 OUTPUT", sqlParameters, cancellationToken);

            track_type.SetValue(parametertrack_type.Value);
            card_id_1.SetValue(parametercard_id_1.Value);
            card_id_2.SetValue(parametercard_id_2.Value);
            ret_bal_1.SetValue(parameterret_bal_1.Value);
            ret_bal_2.SetValue(parameterret_bal_2.Value);
            rtn_avail_1.SetValue(parameterrtn_avail_1.Value);
            rtn_avail_2.SetValue(parameterrtn_avail_2.Value);
            owner_site_1.SetValue(parameterowner_site_1.Value);
            owner_site_2.SetValue(parameterowner_site_2.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_ALH_balance_historyAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_ALH_balance_history]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_atc_file_in_processedAsync(DateTime? file_datetime, int? increment, string success, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "file_datetime",
                    Value = file_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "increment",
                    Value = increment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "success",
                    Size = 1,
                    Value = success ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_atc_file_in_processed] @file_datetime, @increment, @success", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_card_session_deltasResult>> log_card_session_deltasAsync(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, string pts_amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Size = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_card_session_deltasResult>("EXEC @returnValue = [dbo].[log_card_session_deltas] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_card_session_deltas_gResult>> log_card_session_deltas_gAsync(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, decimal? pts_amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Precision = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_card_session_deltas_gResult>("EXEC @returnValue = [dbo].[log_card_session_deltas_g] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_card_session_deltas_g_v2Result>> log_card_session_deltas_g_v2Async(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, decimal? pts_amount, DateTime? session_start_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Precision = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "session_start_datetime",
                    Value = session_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_card_session_deltas_g_v2Result>("EXEC @returnValue = [dbo].[log_card_session_deltas_g_v2] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @session_start_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_card_session_deltas_g_v3Result>> log_card_session_deltas_g_v3Async(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, decimal? pts_amount, DateTime? session_start_datetime, decimal? cbg_account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Precision = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "session_start_datetime",
                    Value = session_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_card_session_deltas_g_v3Result>("EXEC @returnValue = [dbo].[log_card_session_deltas_g_v3] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @session_start_datetime, @cbg_account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_card_session_deltas_v2Result>> log_card_session_deltas_v2Async(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, string pts_amount, DateTime? session_start_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Size = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "session_start_datetime",
                    Value = session_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_card_session_deltas_v2Result>("EXEC @returnValue = [dbo].[log_card_session_deltas_v2] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @session_start_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_card_session_deltas_v3Result>> log_card_session_deltas_v3Async(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, string pts_amount, DateTime? session_start_datetime, decimal? cbg_account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Size = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "session_start_datetime",
                    Value = session_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_card_session_deltas_v3Result>("EXEC @returnValue = [dbo].[log_card_session_deltas_v3] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @session_start_datetime, @cbg_account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_conrad_session_detailsResult>> log_conrad_session_detailsAsync(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, string pts_amount, DateTime? end_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Size = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "end_dt",
                    Value = end_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_conrad_session_detailsResult>("EXEC @returnValue = [dbo].[log_conrad_session_details] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @end_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_conrad_session_details_v2Result>> log_conrad_session_details_v2Async(byte? system_id, int? card_id, short? sum_level, DateTime? start_dt, short? css_site_id, DateTime? logged_dt, int? egm_ser_no, short? denom_id, short? game_no, int? game_var, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? jackpot_wins, string pts_amount, DateTime? end_dt, byte? conrad_card_issue_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_no",
                    Value = egm_ser_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_no",
                    Value = game_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var",
                    Value = game_var ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_wins",
                    Value = jackpot_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pts_amount",
                    Size = 18,
                    Value = pts_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "end_dt",
                    Value = end_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "conrad_card_issue_number",
                    Value = conrad_card_issue_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_conrad_session_details_v2Result>("EXEC @returnValue = [dbo].[log_conrad_session_details_v2] @system_id, @card_id, @sum_level, @start_dt, @css_site_id, @logged_dt, @egm_ser_no, @denom_id, @game_no, @game_var, @floor, @bank, @position, @stroke, @turnover, @wins, @jackpot_wins, @pts_amount, @end_dt, @conrad_card_issue_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_cashless_transaction_summaryResult>> log_egm_cashless_transaction_summaryAsync(short? site_id, int? egm_serial_number, short? summary_level, DateTime? transaction_datetime, short? floor, short? bank, short? position, string ssan, short? denomination_id, int? egm_cashless_transaction_type_id, decimal? cashless_credit_in, decimal? cashless_credit_out, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_cashless_transaction_type_id",
                    Value = egm_cashless_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_in",
                    Precision = 18,
                    Value = cashless_credit_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_out",
                    Precision = 18,
                    Value = cashless_credit_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_cashless_transaction_summaryResult>("EXEC @returnValue = [dbo].[log_egm_cashless_transaction_summary] @site_id, @egm_serial_number, @summary_level, @transaction_datetime, @floor, @bank, @position, @ssan, @denomination_id, @egm_cashless_transaction_type_id, @cashless_credit_in, @cashless_credit_out", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltasResult>> log_egm_deltasAsync(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltasResult>("EXEC @returnValue = [dbo].[log_egm_deltas] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltas_accountsResult>> log_egm_deltas_accountsAsync(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? act_short_p, int? act_hop_f, int? act_can_cred, int? cheques, int? floor, int? bank, int? position, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_p",
                    Value = act_short_p ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hop_f",
                    Value = act_hop_f ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_can_cred",
                    Value = act_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheques",
                    Value = cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltas_accountsResult>("EXEC @returnValue = [dbo].[log_egm_deltas_accounts] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @act_short_p, @act_hop_f, @act_can_cred, @cheques, @floor, @bank, @position", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltas_accounts_v2Result>> log_egm_deltas_accounts_v2Async(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? act_short_p, int? act_hop_f, int? act_can_cred, int? cheques, int? floor, int? bank, int? position, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_p",
                    Value = act_short_p ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hop_f",
                    Value = act_hop_f ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_can_cred",
                    Value = act_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheques",
                    Value = cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltas_accounts_v2Result>("EXEC @returnValue = [dbo].[log_egm_deltas_accounts_v2] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @act_short_p, @act_hop_f, @act_can_cred, @cheques, @floor, @bank, @position, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltas_accounts_v3Result>> log_egm_deltas_accounts_v3Async(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? act_short_p, int? act_hop_f, int? act_can_cred, int? cheques, int? floor, int? bank, int? position, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, int? actual_total_egm_cash_ticket_in, int? actual_ticket_printer_out, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_p",
                    Value = act_short_p ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hop_f",
                    Value = act_hop_f ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_can_cred",
                    Value = act_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheques",
                    Value = cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_total_egm_cash_ticket_in",
                    Value = actual_total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_ticket_printer_out",
                    Value = actual_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltas_accounts_v3Result>("EXEC @returnValue = [dbo].[log_egm_deltas_accounts_v3] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @act_short_p, @act_hop_f, @act_can_cred, @cheques, @floor, @bank, @position, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins, @actual_total_egm_cash_ticket_in, @actual_ticket_printer_out", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltas_accounts_v4Result>> log_egm_deltas_accounts_v4Async(short? site_id, int? serial_num, short? denomination, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? act_short_p, int? act_hop_f, int? act_can_cred, int? cheques, int? floor, int? bank, int? position, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, int? actual_total_egm_cash_ticket_in, int? actual_ticket_printer_out, int? ssan, int? bgvn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_p",
                    Value = act_short_p ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hop_f",
                    Value = act_hop_f ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_can_cred",
                    Value = act_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheques",
                    Value = cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_total_egm_cash_ticket_in",
                    Value = actual_total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_ticket_printer_out",
                    Value = actual_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltas_accounts_v4Result>("EXEC @returnValue = [dbo].[log_egm_deltas_accounts_v4] @site_id, @serial_num, @denomination, @sum_level, @start_dt, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @act_short_p, @act_hop_f, @act_can_cred, @cheques, @floor, @bank, @position, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins, @actual_total_egm_cash_ticket_in, @actual_ticket_printer_out, @ssan, @bgvn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltas_v2Result>> log_egm_deltas_v2Async(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? bgvn, int? egm_config_num, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? actualshortpays, int? a_hopper_fills, int? a_can_credits, int? gamingcheques, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_num",
                    Value = egm_config_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actualshortpays",
                    Value = actualshortpays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hopper_fills",
                    Value = a_hopper_fills ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_credits",
                    Value = a_can_credits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gamingcheques",
                    Value = gamingcheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltas_v2Result>("EXEC @returnValue = [dbo].[log_egm_deltas_v2] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @bgvn, @egm_config_num, @floor, @bank, @position, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @actualshortpays, @a_hopper_fills, @a_can_credits, @gamingcheques", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltas_v3Result>> log_egm_deltas_v3Async(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? bgvn, int? egm_config_num, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? actualshortpays, int? a_hopper_fills, int? a_can_credits, int? gamingcheques, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_num",
                    Value = egm_config_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actualshortpays",
                    Value = actualshortpays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hopper_fills",
                    Value = a_hopper_fills ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_credits",
                    Value = a_can_credits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gamingcheques",
                    Value = gamingcheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltas_v3Result>("EXEC @returnValue = [dbo].[log_egm_deltas_v3] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @bgvn, @egm_config_num, @floor, @bank, @position, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @actualshortpays, @a_hopper_fills, @a_can_credits, @gamingcheques, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltas_v4Result>> log_egm_deltas_v4Async(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? bgvn, int? egm_config_num, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? actualshortpays, int? a_hopper_fills, int? a_can_credits, int? gamingcheques, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, int? actual_total_egm_cash_ticket_in, int? actual_ticket_printer_out, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_num",
                    Value = egm_config_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actualshortpays",
                    Value = actualshortpays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hopper_fills",
                    Value = a_hopper_fills ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_credits",
                    Value = a_can_credits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gamingcheques",
                    Value = gamingcheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_total_egm_cash_ticket_in",
                    Value = actual_total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_ticket_printer_out",
                    Value = actual_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltas_v4Result>("EXEC @returnValue = [dbo].[log_egm_deltas_v4] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @bgvn, @egm_config_num, @floor, @bank, @position, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @actualshortpays, @a_hopper_fills, @a_can_credits, @gamingcheques, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins, @actual_total_egm_cash_ticket_in, @actual_ticket_printer_out", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_deltas_v5Result>> log_egm_deltas_v5Async(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? bgvn, int? egm_config_num, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? a_can_cred, int? a_hop_fil, int? a_coins_in, int? a_coins_out, int? a_exp_ctcb, int? a_act_ctcb, int? a_cc_in, int? a_cc_out, int? a_exp_naa, int? a_act_naa, int? a_exp_nic, int? a_act_nic, int? a_short_pays, int? a_jackpots, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? hopper, int? actualshortpays, int? a_hopper_fills, int? a_can_credits, int? gamingcheques, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, int? actual_total_egm_cash_ticket_in, int? actual_ticket_printer_out, string downloadable_flag, int? is_host_ret, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_num",
                    Value = egm_config_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_cred",
                    Value = a_can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hop_fil",
                    Value = a_hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_in",
                    Value = a_coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_coins_out",
                    Value = a_coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_ctcb",
                    Value = a_exp_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_ctcb",
                    Value = a_act_ctcb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_in",
                    Value = a_cc_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_cc_out",
                    Value = a_cc_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_naa",
                    Value = a_exp_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_naa",
                    Value = a_act_naa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_exp_nic",
                    Value = a_exp_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_act_nic",
                    Value = a_act_nic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_short_pays",
                    Value = a_short_pays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_jackpots",
                    Value = a_jackpots ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper",
                    Value = hopper ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actualshortpays",
                    Value = actualshortpays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_hopper_fills",
                    Value = a_hopper_fills ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "a_can_credits",
                    Value = a_can_credits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gamingcheques",
                    Value = gamingcheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_total_egm_cash_ticket_in",
                    Value = actual_total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_ticket_printer_out",
                    Value = actual_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "downloadable_flag",
                    Size = 1,
                    Value = downloadable_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "is_host_ret",
                    Value = is_host_ret ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_deltas_v5Result>("EXEC @returnValue = [dbo].[log_egm_deltas_v5] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @bgvn, @egm_config_num, @floor, @bank, @position, @stroke, @turnover, @wins, @a_can_cred, @a_hop_fil, @a_coins_in, @a_coins_out, @a_exp_ctcb, @a_act_ctcb, @a_cc_in, @a_cc_out, @a_exp_naa, @a_act_naa, @a_exp_nic, @a_act_nic, @a_short_pays, @a_jackpots, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @hopper, @actualshortpays, @a_hopper_fills, @a_can_credits, @gamingcheques, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins, @actual_total_egm_cash_ticket_in, @actual_ticket_printer_out, @downloadable_flag, @is_host_ret", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_egm_downtimeResult>> log_egm_downtimeAsync(int? serial_num, short? site_id, DateTime? start_dt, int? min_down, int? min_avail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "min_down",
                    Value = min_down ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_avail",
                    Value = min_avail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_egm_downtimeResult>("EXEC @returnValue = [dbo].[log_egm_downtime] @serial_num, @site_id, @start_dt, @min_down, @min_avail", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_eventAsync(short? site_id, DateTime? event_dt, DateTime? logged_dt, int? seq_number, short? event_type, short? man_id, int? serial_num, short? denom, short? game_num, int? game_var_num, decimal? meters_id, int? amount, int? amount2, int? pool_num, string add_data, int? psite_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "event_dt",
                    Value = event_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "seq_number",
                    Value = seq_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "event_type",
                    Value = event_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom",
                    Value = denom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "meters_id",
                    Precision = 18,
                    Value = meters_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount2",
                    Value = amount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add_data",
                    Size = 100,
                    Value = add_data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "psite_id",
                    Value = psite_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_event] @site_id, @event_dt, @logged_dt, @seq_number, @event_type, @man_id, @serial_num, @denom, @game_num, @game_var_num, @meters_id, @amount, @amount2, @pool_num, @add_data, @psite_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_event_with_metersAsync(short? site_id, DateTime? event_dt, DateTime? logged_dt, int? seq_number, short? event_type, short? man_id, int? serial_num, short? denom, short? game_num, int? game_var_num, int? amount, int? amount2, int? pool_num, string add_data, int? psite_id, int? stroke, int? turnover, int? wins, int? can_cred, int? hop_fil, int? coins_in, int? coins_out, int? coins_to_cb, int? cless_cr_in, int? cless_cr_out, int? notes_in, int? notes_count, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "event_dt",
                    Value = event_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "seq_number",
                    Value = seq_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "event_type",
                    Value = event_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom",
                    Value = denom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount2",
                    Value = amount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add_data",
                    Size = 100,
                    Value = add_data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "psite_id",
                    Value = psite_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "can_cred",
                    Value = can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_in",
                    Value = coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_out",
                    Value = coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_cb",
                    Value = coins_to_cb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cless_cr_in",
                    Value = cless_cr_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cless_cr_out",
                    Value = cless_cr_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in",
                    Value = notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_count",
                    Value = notes_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_event_with_meters] @site_id, @event_dt, @logged_dt, @seq_number, @event_type, @man_id, @serial_num, @denom, @game_num, @game_var_num, @amount, @amount2, @pool_num, @add_data, @psite_id, @stroke, @turnover, @wins, @can_cred, @hop_fil, @coins_in, @coins_out, @coins_to_cb, @cless_cr_in, @cless_cr_out, @notes_in, @notes_count, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_event_with_meters_v2Async(short? site_id, DateTime? event_dt, DateTime? logged_dt, int? seq_number, short? event_type, short? man_id, int? serial_num, short? denom, short? game_num, int? game_var_num, int? amount, int? amount2, int? pool_num, string add_data, int? psite_id, int? stroke, int? turnover, int? wins, int? can_cred, int? hop_fil, int? coins_in, int? coins_out, int? coins_to_cb, int? cless_cr_in, int? cless_cr_out, int? notes_in, int? notes_count, int? sap_wins, int? lp_wins, int? notes_5, int? notes_10, int? notes_20, int? notes_50, int? notes_100, int? trcr_turn, int? trcr_wins, int? reserve_1, int? reserve_2, int? reserve_3, int? ticket_out, int? cents_in, int? cents_out, int? spare_1, int? spare_2, int? spare_3, int? total_egm_cash_ticket_in, int? total_egm_pid_accessed, int? total_egm_games_won, int? new_sap_wins, int? total_rejected_enabled_notes, int? total_egm_gamble_turnover, int? total_egm_gamble_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "event_dt",
                    Value = event_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "seq_number",
                    Value = seq_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "event_type",
                    Value = event_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom",
                    Value = denom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount2",
                    Value = amount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add_data",
                    Size = 100,
                    Value = add_data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "psite_id",
                    Value = psite_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "can_cred",
                    Value = can_cred ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_in",
                    Value = coins_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_out",
                    Value = coins_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_cb",
                    Value = coins_to_cb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cless_cr_in",
                    Value = cless_cr_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cless_cr_out",
                    Value = cless_cr_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in",
                    Value = notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_count",
                    Value = notes_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_5",
                    Value = notes_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_10",
                    Value = notes_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_20",
                    Value = notes_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_50",
                    Value = notes_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_100",
                    Value = notes_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_turn",
                    Value = trcr_turn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trcr_wins",
                    Value = trcr_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_1",
                    Value = reserve_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_2",
                    Value = reserve_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserve_3",
                    Value = reserve_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_out",
                    Value = ticket_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_cash_ticket_in",
                    Value = total_egm_cash_ticket_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_pid_accessed",
                    Value = total_egm_pid_accessed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_games_won",
                    Value = total_egm_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_sap_wins",
                    Value = new_sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rejected_enabled_notes",
                    Value = total_rejected_enabled_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_turnover",
                    Value = total_egm_gamble_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_egm_gamble_wins",
                    Value = total_egm_gamble_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_event_with_meters_v2] @site_id, @event_dt, @logged_dt, @seq_number, @event_type, @man_id, @serial_num, @denom, @game_num, @game_var_num, @amount, @amount2, @pool_num, @add_data, @psite_id, @stroke, @turnover, @wins, @can_cred, @hop_fil, @coins_in, @coins_out, @coins_to_cb, @cless_cr_in, @cless_cr_out, @notes_in, @notes_count, @sap_wins, @lp_wins, @notes_5, @notes_10, @notes_20, @notes_50, @notes_100, @trcr_turn, @trcr_wins, @reserve_1, @reserve_2, @reserve_3, @ticket_out, @cents_in, @cents_out, @spare_1, @spare_2, @spare_3, @total_egm_cash_ticket_in, @total_egm_pid_accessed, @total_egm_games_won, @new_sap_wins, @total_rejected_enabled_notes, @total_egm_gamble_turnover, @total_egm_gamble_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_game_deltasResult>> log_game_deltasAsync(short? site_id, int? serial_num, short? denomination, short? game_num, int? game_var_num, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? prog_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_wins",
                    Value = prog_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_game_deltasResult>("EXEC @returnValue = [dbo].[log_game_deltas] @site_id, @serial_num, @denomination, @game_num, @game_var_num, @sum_level, @start_dt, @stroke, @turnover, @wins, @prog_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_game_deltas_v2Result>> log_game_deltas_v2Async(short? site_id, int? serial_num, short? denomination, short? game_num, int? game_var_num, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? prog_wins, int? total_games_won, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_wins",
                    Value = prog_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_games_won",
                    Value = total_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_game_deltas_v2Result>("EXEC @returnValue = [dbo].[log_game_deltas_v2] @site_id, @serial_num, @denomination, @game_num, @game_var_num, @sum_level, @start_dt, @stroke, @turnover, @wins, @prog_wins, @total_games_won", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_game_deltas_v3Result>> log_game_deltas_v3Async(short? site_id, int? serial_num, short? denomination, short? game_num, int? game_var_num, short? sum_level, DateTime? start_dt, int? stroke, int? turnover, int? wins, int? prog_wins, int? total_games_won, int? game_version_number, int? software_set_approval_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_wins",
                    Value = prog_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_games_won",
                    Value = total_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_version_number",
                    Value = game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "software_set_approval_number",
                    Value = software_set_approval_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_game_deltas_v3Result>("EXEC @returnValue = [dbo].[log_game_deltas_v3] @site_id, @serial_num, @denomination, @game_num, @game_var_num, @sum_level, @start_dt, @stroke, @turnover, @wins, @prog_wins, @total_games_won, @game_version_number, @software_set_approval_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_game_meters_summaryResult>> log_game_meters_summaryAsync(short? site_id, short? summary_level, DateTime? start_datetime, int? ssan, int? game_version_number, short? denomination_id, int? rtp, int? egm_serial_number, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? lp_wins, int? erp_wins, int? wa_lp_wins, int? wa_erp_wins, int? wa_contributions, int? minutes_play_in_period, int? total_playable_minutes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_version_number",
                    Value = game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "rtp",
                    Value = rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "erp_wins",
                    Value = erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wa_lp_wins",
                    Value = wa_lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wa_erp_wins",
                    Value = wa_erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wa_contributions",
                    Value = wa_contributions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "minutes_play_in_period",
                    Value = minutes_play_in_period ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_playable_minutes",
                    Value = total_playable_minutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_game_meters_summaryResult>("EXEC @returnValue = [dbo].[log_game_meters_summary] @site_id, @summary_level, @start_datetime, @ssan, @game_version_number, @denomination_id, @rtp, @egm_serial_number, @floor, @bank, @position, @stroke, @turnover, @wins, @lp_wins, @erp_wins, @wa_lp_wins, @wa_erp_wins, @wa_contributions, @minutes_play_in_period, @total_playable_minutes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_game_perfom_meter_deltasResult>> log_game_perfom_meter_deltasAsync(short? site_id, int? serial_num, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? gvn, int? rtp, short? floor, short? bank, short? position, int? stroke, int? turnover, int? wins, int? lp_wins, int? erp_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gvn",
                    Value = gvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rtp",
                    Value = rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "erp_wins",
                    Value = erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_game_perfom_meter_deltasResult>("EXEC @returnValue = [dbo].[log_game_perfom_meter_deltas] @site_id, @serial_num, @sum_level, @start_dt, @denomination, @ssan, @gvn, @rtp, @floor, @bank, @position, @stroke, @turnover, @wins, @lp_wins, @erp_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_headcountAsync(short? site_id, DateTime? time_int, short? floor, short? bank, int? head_count, int? turnover, int? wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "time_int",
                    Value = time_int ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "head_count",
                    Value = head_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_headcount] @site_id, @time_int, @floor, @bank, @head_count, @turnover, @wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_jackpot_contributionsAsync(short? site_id, int? pool_number, short? fcc_site_id, string fcc_name, int? current_amount, int? last_ref_amount, decimal? overflow, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fcc_site_id",
                    Value = fcc_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "fcc_name",
                    Size = 10,
                    Value = fcc_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "current_amount",
                    Value = current_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_ref_amount",
                    Value = last_ref_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "overflow",
                    Precision = 18,
                    Value = overflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_jackpot_contributions] @site_id, @pool_number, @fcc_site_id, @fcc_name, @current_amount, @last_ref_amount, @overflow", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_jackpot_deltasResult>> log_jackpot_deltasAsync(short? site_id, int? egm_serial_number, short? sum_level, DateTime? start_dt, short? denomination, int? ssan, int? bgvn, short? floor, short? bank, short? position, int? turnover, int? wins, int? sap_wins, int? lp_wins, int? erp_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "erp_wins",
                    Value = erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_jackpot_deltasResult>("EXEC @returnValue = [dbo].[log_jackpot_deltas] @site_id, @egm_serial_number, @sum_level, @start_dt, @denomination, @ssan, @bgvn, @floor, @bank, @position, @turnover, @wins, @sap_wins, @lp_wins, @erp_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_jackpot_deltas_hitsResult>> log_jackpot_deltas_hitsAsync(short? site_id, int? pool_number, int? egm_serial_number, double? hit_amount, DateTime? hit_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hit_amount",
                    Value = hit_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "hit_datetime",
                    Value = hit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_jackpot_deltas_hitsResult>("EXEC @returnValue = [dbo].[log_jackpot_deltas_hits] @site_id, @pool_number, @egm_serial_number, @hit_amount, @hit_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_jackpot_deltas_waResult>> log_jackpot_deltas_waAsync(short? site_id, int? pool_number, int? egm_serial_number, double? hit_amount, DateTime? hit_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hit_amount",
                    Value = hit_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "hit_datetime",
                    Value = hit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_jackpot_deltas_waResult>("EXEC @returnValue = [dbo].[log_jackpot_deltas_wa] @site_id, @pool_number, @egm_serial_number, @hit_amount, @hit_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_jackpot_eventAsync(short? site_id, DateTime? event_dt, DateTime? logged_dt, int? seq_number, short? event_type, short? man_id, int? serial_num, short? denom, short? game_num, int? game_var_num, decimal? meters_id, int? amount, int? amount2, int? pool_num, string add_data, int? psite_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "event_dt",
                    Value = event_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_dt",
                    Value = logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "seq_number",
                    Value = seq_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "event_type",
                    Value = event_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom",
                    Value = denom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_num",
                    Value = game_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "meters_id",
                    Precision = 18,
                    Value = meters_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "amount2",
                    Value = amount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "add_data",
                    Size = 100,
                    Value = add_data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "psite_id",
                    Value = psite_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_jackpot_event] @site_id, @event_dt, @logged_dt, @seq_number, @event_type, @man_id, @serial_num, @denom, @game_num, @game_var_num, @meters_id, @amount, @amount2, @pool_num, @add_data, @psite_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_jackpot_hit_adjustmentResult>> log_jackpot_hit_adjustmentAsync(short? site_id, int? pool_number, short? summary_level, DateTime? start_dt, int? egm_serial_number, short? denomination, int? ssan, int? bgvn, short? floor, short? bank, short? position, double? increment, double? total_rtp, int? reset, int? maximum, short? pool_group_id, short? pool_site_id, int? turnover, int? wins, int? sap_wins, int? lp_wins, int? erp_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "increment",
                    Value = increment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "maximum",
                    Value = maximum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_group_id",
                    Value = pool_group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "erp_wins",
                    Value = erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_jackpot_hit_adjustmentResult>("EXEC @returnValue = [dbo].[log_jackpot_hit_adjustment] @site_id, @pool_number, @summary_level, @start_dt, @egm_serial_number, @denomination, @ssan, @bgvn, @floor, @bank, @position, @increment, @total_rtp, @reset, @maximum, @pool_group_id, @pool_site_id, @turnover, @wins, @sap_wins, @lp_wins, @erp_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<log_jackpot_summaryResult>> log_jackpot_summaryAsync(short? p_site_id, int? pool_num, int? serial_num, short? egm_site_id, short? game_num, int? var_num, short? denomination, short? sum_level, DateTime? start_dt, int? contribution, int? increment, int? rounding, int? hit_count, int? hit_amt, int? sp_1, int? sp_2, int? sp_3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_site_id",
                    Value = p_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "serial_num",
                    Value = serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_site_id",
                    Value = egm_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "var_num",
                    Value = var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "contribution",
                    Value = contribution ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "increment",
                    Value = increment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rounding",
                    Value = rounding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hit_count",
                    Value = hit_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hit_amt",
                    Value = hit_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sp_1",
                    Value = sp_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sp_2",
                    Value = sp_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sp_3",
                    Value = sp_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<log_jackpot_summaryResult>("EXEC @returnValue = [dbo].[log_jackpot_summary] @p_site_id, @pool_num, @serial_num, @egm_site_id, @game_num, @var_num, @denomination, @sum_level, @start_dt, @contribution, @increment, @rounding, @hit_count, @hit_amt, @sp_1, @sp_2, @sp_3", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_jackpot_valuesAsync(short? site_id, DateTime? snapshot_datetime, int? current_value, int? pool_number, int? egm_serial_number, short? progressive_level, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "snapshot_datetime",
                    Value = snapshot_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "current_value",
                    Value = current_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "progressive_level",
                    Value = progressive_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_jackpot_values] @site_id, @snapshot_datetime, @current_value, @pool_number, @egm_serial_number, @progressive_level", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_points_play_configuration_auditAsync(short? css_site_id, decimal? points_play_configuration_id, DateTime? audit_datetime, string user_id, string action, string description, string enabled_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "points_play_configuration_id",
                    Precision = 18,
                    Value = points_play_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "audit_datetime",
                    Value = audit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "action",
                    Size = 1,
                    Value = action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_points_play_configuration_audit] @css_site_id, @points_play_configuration_id, @audit_datetime, @user_id, @action, @description, @enabled_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_pos_transaction_itemAsync(short? site_id, short? css_site_id, string sales_id, string item_code, string description, string category_code, string category_description, int? unit_price, int? cost_price, int? qty, int? sale_value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sales_id",
                    Size = 15,
                    Value = sales_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_code",
                    Size = 20,
                    Value = item_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "category_code",
                    Size = 10,
                    Value = category_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "category_description",
                    Size = 30,
                    Value = category_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "unit_price",
                    Value = unit_price ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cost_price",
                    Value = cost_price ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "qty",
                    Value = qty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sale_value",
                    Value = sale_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_pos_transaction_item] @site_id, @css_site_id, @sales_id, @item_code, @description, @category_code, @category_description, @unit_price, @cost_price, @qty, @sale_value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_pos_transaction_paymentAsync(short? site_id, short? css_site_id, string sales_id, string payment_code, string description, bool? is_points_payment, bool? is_cash_purchase_payment, int? tendered_amount, int? change_amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sales_id",
                    Size = 15,
                    Value = sales_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "payment_code",
                    Size = 20,
                    Value = payment_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "is_points_payment",
                    Value = is_points_payment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "is_cash_purchase_payment",
                    Value = is_cash_purchase_payment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "tendered_amount",
                    Value = tendered_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "change_amount",
                    Value = change_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_pos_transaction_payment] @site_id, @css_site_id, @sales_id, @payment_code, @description, @is_points_payment, @is_cash_purchase_payment, @tendered_amount, @change_amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_pos_transaction_saleAsync(short? site_id, short? css_site_id, string sales_id, string terminal_id, string terminal_name, string location_id, string location_name, int? card_id, DateTime? sale_date, int? sale_total, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sales_id",
                    Size = 15,
                    Value = sales_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "terminal_id",
                    Size = 15,
                    Value = terminal_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "terminal_name",
                    Size = 20,
                    Value = terminal_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location_id",
                    Size = 15,
                    Value = location_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location_name",
                    Size = 20,
                    Value = location_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sale_date",
                    Value = sale_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sale_total",
                    Value = sale_total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_pos_transaction_sale] @site_id, @css_site_id, @sales_id, @terminal_id, @terminal_name, @location_id, @location_name, @card_id, @sale_date, @sale_total", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_pos_transaction_sale_v2Async(short? site_id, short? css_site_id, string sales_id, string terminal_id, string terminal_name, string location_id, string location_name, int? card_id, DateTime? sale_date, int? sale_total, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sales_id",
                    Size = 15,
                    Value = sales_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "terminal_id",
                    Size = 15,
                    Value = terminal_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "terminal_name",
                    Size = 20,
                    Value = terminal_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location_id",
                    Size = 15,
                    Value = location_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location_name",
                    Size = 20,
                    Value = location_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sale_date",
                    Value = sale_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sale_total",
                    Value = sale_total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_pos_transaction_sale_v2] @site_id, @css_site_id, @sales_id, @terminal_id, @terminal_name, @location_id, @location_name, @card_id, @sale_date, @sale_total", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_pos_transaction_taxAsync(short? site_id, short? css_site_id, string sales_id, string tax_code, string description, int? amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sales_id",
                    Size = 15,
                    Value = sales_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tax_code",
                    Size = 20,
                    Value = tax_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_pos_transaction_tax] @site_id, @css_site_id, @sales_id, @tax_code, @description, @amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_pos_transaction_valueAsync(short? css_site_id, int? transaction_id, decimal? value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "value",
                    Precision = 18,
                    Value = value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_pos_transaction_value] @css_site_id, @transaction_id, @value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_processed_alh_session_idAsync(string session_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "session_id",
                    Size = 22,
                    Value = session_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_processed_alh_session_id] @session_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_spend_reward_criterion_auditAsync(short? css_site_id, decimal? spend_reward_criterion_id, DateTime? audit_datetime, string user_id, string criteria, string action, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "spend_reward_criterion_id",
                    Precision = 18,
                    Value = spend_reward_criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "audit_datetime",
                    Value = audit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "criteria",
                    Size = 255,
                    Value = criteria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "action",
                    Size = 1,
                    Value = action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_spend_reward_criterion_audit] @css_site_id, @spend_reward_criterion_id, @audit_datetime, @user_id, @criteria, @action", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_spend_reward_eventAsync(decimal? spend_reward_criterion_id, short? css_site_id, int? card_id, int? egm_serial_number, DateTime? reward_datetime, decimal? rating_grade_id, short? tracking_type_id, short? spend_reward_reset_timer_id, int? points_value, int? spend_value, short? repeat_count, int? actual_spend_value, short? actual_repeat_count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "spend_reward_criterion_id",
                    Precision = 18,
                    Value = spend_reward_criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reward_datetime",
                    Value = reward_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Precision = 18,
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "spend_reward_reset_timer_id",
                    Value = spend_reward_reset_timer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spend_value",
                    Value = spend_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "repeat_count",
                    Value = repeat_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "actual_spend_value",
                    Value = actual_spend_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_repeat_count",
                    Value = actual_repeat_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_spend_reward_event] @spend_reward_criterion_id, @css_site_id, @card_id, @egm_serial_number, @reward_datetime, @rating_grade_id, @tracking_type_id, @spend_reward_reset_timer_id, @points_value, @spend_value, @repeat_count, @actual_spend_value, @actual_repeat_count", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_win_reward_conversion_auditAsync(short? css_site_id, decimal? win_reward_criterion_id, DateTime? audit_datetime, string user_id, string action, int? rating_grade_id, short? tracking_type_id, short? conversion_rate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "win_reward_criterion_id",
                    Precision = 18,
                    Value = win_reward_criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "audit_datetime",
                    Value = audit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "action",
                    Size = 1,
                    Value = action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "conversion_rate",
                    Value = conversion_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_win_reward_conversion_audit] @css_site_id, @win_reward_criterion_id, @audit_datetime, @user_id, @action, @rating_grade_id, @tracking_type_id, @conversion_rate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_win_reward_criterion_auditAsync(short? css_site_id, decimal? win_reward_criterion_id, DateTime? audit_datetime, string user_id, string action, string description, int? minimum_win_threshold, short? tracking_type_id, string colour, string enabled_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "win_reward_criterion_id",
                    Precision = 18,
                    Value = win_reward_criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "audit_datetime",
                    Value = audit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "action",
                    Size = 1,
                    Value = action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minimum_win_threshold",
                    Value = minimum_win_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "colour",
                    Size = 20,
                    Value = colour ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_win_reward_criterion_audit] @css_site_id, @win_reward_criterion_id, @audit_datetime, @user_id, @action, @description, @minimum_win_threshold, @tracking_type_id, @colour, @enabled_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> log_win_reward_eventAsync(decimal? win_reward_criterion_id, short? css_site_id, int? card_id, int? egm_serial_number, DateTime? reward_datetime, short? tracking_type_id, int? win_value, int? actual_win_value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "win_reward_criterion_id",
                    Precision = 18,
                    Value = win_reward_criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reward_datetime",
                    Value = reward_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "win_value",
                    Value = win_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actual_win_value",
                    Value = actual_win_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[log_win_reward_event] @win_reward_criterion_id, @css_site_id, @card_id, @egm_serial_number, @reward_datetime, @tracking_type_id, @win_value, @actual_win_value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<max_epay_get_payments_v2Result>> max_epay_get_payments_v2Async(short? SiteID, DateTime? StartDate, DateTime? EndDate, int? PageNumber, int? ItemsPerPage, OutputParameter<int?> TotalPages, OutputParameter<int?> TotalRecords, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterTotalRecords = new SqlParameter
            {
                ParameterName = "TotalRecords",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalRecords?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ItemsPerPage",
                    Value = ItemsPerPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterTotalRecords,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<max_epay_get_payments_v2Result>("EXEC @returnValue = [dbo].[max_epay_get_payments_v2] @SiteID, @StartDate, @EndDate, @PageNumber, @ItemsPerPage, @TotalPages OUTPUT, @TotalRecords OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            TotalRecords.SetValue(parameterTotalRecords.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<max_epay_pending_payouts_v2Result>> max_epay_pending_payouts_v2Async(short? SiteID, string UserID, decimal? TicketID, byte? Threshold, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 255,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TicketID",
                    Precision = 12,
                    Value = TicketID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Threshold",
                    Value = Threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<max_epay_pending_payouts_v2Result>("EXEC @returnValue = [dbo].[max_epay_pending_payouts_v2] @SiteID, @UserID, @TicketID, @Threshold", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<meters_txt_fileResult>> meters_txt_fileAsync(int? siteid, DateTime? date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "siteid",
                    Value = siteid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<meters_txt_fileResult>("EXEC @returnValue = [dbo].[meters_txt_file] @siteid, @date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<meters_txt_headerResult>> meters_txt_headerAsync(int? siteid, DateTime? date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "siteid",
                    Value = siteid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<meters_txt_headerResult>("EXEC @returnValue = [dbo].[meters_txt_header] @siteid, @date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> mon_upd_statsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[mon_upd_stats]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> purge_deleteAsync(string sql, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sql",
                    Size = 255,
                    Value = sql ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[purge_delete] @sql", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> purge_delete_v2Async(string sql, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sql",
                    Size = 2500,
                    Value = sql ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[purge_delete_v2] @sql", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> QOGRReportDatesUpdateAsync(int? YYYY, byte? MM, byte? DD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "YYYY",
                    Value = YYYY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MM",
                    Value = MM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "DD",
                    Value = DD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[QOGRReportDatesUpdate] @YYYY, @MM, @DD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> QOGRSetEODDefaultReportDateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[QOGRSetEODDefaultReportDate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<reassign_egm_transactionResult>> reassign_egm_transactionAsync(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, decimal? new_tick_num, string new_status, string location, int? cash_amount, int? cheque_amount, string cheque_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_tick_num",
                    Precision = 12,
                    Value = new_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 20,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<reassign_egm_transactionResult>("EXEC @returnValue = [dbo].[reassign_egm_transaction] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @new_tick_num, @new_status, @location, @cash_amount, @cheque_amount, @cheque_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> reissue_egm_transactionAsync(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, string cancelled, int? amount, short? pool_site_id, int? pool_num, string user_id, int? player_id, string comment_1, string comment_2, string comment_3, decimal? new_tick_num, string new_status, string new_cancel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 8,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 8,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled",
                    Size = 1,
                    Value = cancelled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_tick_num",
                    Precision = 12,
                    Value = new_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 8,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_cancel",
                    Size = 1,
                    Value = new_cancel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[reissue_egm_transaction] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @cancelled, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3, @new_tick_num, @new_status, @new_cancel", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> reissue_egm_transaction_v2Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, string cancelled, int? amount, short? pool_site_id, int? pool_num, string user_id, int? player_id, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, decimal? new_tick_num, string new_status, string new_cancel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 8,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 8,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled",
                    Size = 1,
                    Value = cancelled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_tick_num",
                    Precision = 12,
                    Value = new_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 8,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_cancel",
                    Size = 1,
                    Value = new_cancel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[reissue_egm_transaction_v2] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @cancelled, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @new_tick_num, @new_status, @new_cancel", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<reissue_egm_transaction_v3Result>> reissue_egm_transaction_v3Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, decimal? new_tick_num, string new_status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_tick_num",
                    Precision = 12,
                    Value = new_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 20,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<reissue_egm_transaction_v3Result>("EXEC @returnValue = [dbo].[reissue_egm_transaction_v3] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @new_tick_num, @new_status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<reissue_egm_transaction_v4Result>> reissue_egm_transaction_v4Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, decimal? new_tick_num, string new_status, string location, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_tick_num",
                    Precision = 12,
                    Value = new_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 20,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<reissue_egm_transaction_v4Result>("EXEC @returnValue = [dbo].[reissue_egm_transaction_v4] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @new_tick_num, @new_status, @location", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<reissue_egm_transaction_v5Result>> reissue_egm_transaction_v5Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, decimal? new_tick_num, string new_status, string location, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_tick_num",
                    Precision = 12,
                    Value = new_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 20,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<reissue_egm_transaction_v5Result>("EXEC @returnValue = [dbo].[reissue_egm_transaction_v5] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @new_tick_num, @new_status, @location", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<reissue_egm_transaction_v6Result>> reissue_egm_transaction_v6Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, decimal? new_tick_num, string new_status, string location, int? cash_amount, int? cheque_amount, string cheque_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_tick_num",
                    Precision = 12,
                    Value = new_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 20,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<reissue_egm_transaction_v6Result>("EXEC @returnValue = [dbo].[reissue_egm_transaction_v6] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @new_tick_num, @new_status, @location, @cash_amount, @cheque_amount, @cheque_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> reissue_redemption_voucherAsync(decimal? voucher_num, short? system_id, short? css_site_id, decimal? account_id, decimal? patron_id, DateTime? creation_dt, DateTime? expiry_dt, decimal? redemption_id, int? amount, int? quantity, string comment_1, string comment_2, string comment_3, string status, DateTime? last_dt, decimal? new_voucher_num, string new_status, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "voucher_num",
                    Precision = 18,
                    Value = voucher_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creation_dt",
                    Value = creation_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_dt",
                    Value = expiry_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "redemption_id",
                    Precision = 18,
                    Value = redemption_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "quantity",
                    Value = quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 60,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 60,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 60,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "new_voucher_num",
                    Precision = 18,
                    Value = new_voucher_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 10,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[reissue_redemption_voucher] @voucher_num, @system_id, @css_site_id, @account_id, @patron_id, @creation_dt, @expiry_dt, @redemption_id, @amount, @quantity, @comment_1, @comment_2, @comment_3, @status, @last_dt, @new_voucher_num, @new_status, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_accountAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_account] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_account_summaryAsync(decimal? account_id, int? card_id, byte? track_type, short? first_aging, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "first_aging",
                    Value = first_aging ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_account_summary] @account_id, @card_id, @track_type, @first_aging", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_all_pool_devicesAsync(short? pl_site_id, int? egm_ser_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pl_site_id",
                    Value = pl_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_all_pool_devices] @pl_site_id, @egm_ser_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_all_pool_group_levelsAsync(short? site_id, short? jp_grp_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "jp_grp_id",
                    Value = jp_grp_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_all_pool_group_levels] @site_id, @jp_grp_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_barrel_draw_criterionAsync(short? site_id, decimal? promotion_id, decimal? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_barrel_draw_criterion] @site_id, @promotion_id, @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_barrel_draw_locationAsync(short? site_id, decimal? promotion_id, decimal? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_barrel_draw_location] @site_id, @promotion_id, @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_barrel_draw_messageAsync(short? site_id, decimal? promotion_id, byte? priority, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_barrel_draw_message] @site_id, @promotion_id, @priority", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_barrel_draw_prizeAsync(short? site_id, decimal? promotion_id, short? draw_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "draw_number",
                    Value = draw_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_barrel_draw_prize] @site_id, @promotion_id, @draw_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_barrel_draw_promotionAsync(short? site_id, decimal? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_barrel_draw_promotion] @site_id, @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_barrel_draw_ticket_eligibilityAsync(short? site_id, decimal? promotion_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_barrel_draw_ticket_eligibility] @site_id, @promotion_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_batch_cardAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_batch_card] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_batch_confirm_typeAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_batch_confirm_type] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_bet_restrictionAsync(decimal? patron_id, byte? system_id, int? game_type, short? summary, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_type",
                    Value = game_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "summary",
                    Value = summary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_bet_restriction] @patron_id, @system_id, @game_type, @summary, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_campaign_patronAsync(string campaign_id, decimal? patron_id, short? site_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "campaign_id",
                    Size = 36,
                    Value = campaign_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_campaign_patron] @campaign_id, @patron_id, @site_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_cardAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_card] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_card_accountAsync(byte? system_id, int? card_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_card_account] @system_id, @card_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_card_typeAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_card_type] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_categoryAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_category] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_category_pager_eventAsync(decimal? pager_event_id, decimal? category_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pager_event_id",
                    Precision = 18,
                    Value = pager_event_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "category_id",
                    Precision = 18,
                    Value = category_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_category_pager_event] @pager_event_id, @category_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_cbg_account_pinAsync(decimal? cbg_account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_cbg_account_pin] @cbg_account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_cbg_card_accountAsync(decimal? cbg_account_id, int? card_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_cbg_card_account] @cbg_account_id, @card_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_charge_groupAsync(short? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_charge_group] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_charge_group_memberAsync(short? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_charge_group_member] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_charge_itemAsync(string id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_charge_item] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_chart_of_accountsAsync(string gl_code, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 5,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_chart_of_accounts] @gl_code, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_cheque_levelAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_cheque_level] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_component_configAsync(short? site_id, int? h_serial_num, string inst_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "h_serial_num",
                    Value = h_serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inst_name",
                    Size = 8,
                    Value = inst_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_component_config] @site_id, @h_serial_num, @inst_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_config_groupAsync(string group_name, string item_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 20,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_config_group] @group_name, @item_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_config_itemAsync(int? site_id, string group_name, string item_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 20,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_config_item] @site_id, @group_name, @item_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_conrad_accountAsync(int? account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_conrad_account] @account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_count_file_typeAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_count_file_type] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_countryAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_country] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_css_config_groupAsync(string group_name, string group_item, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "group_item",
                    Size = 20,
                    Value = group_item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_css_config_group] @group_name, @group_item, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_css_config_itemAsync(byte? system_id, short? site_id, string group_name, string item_name, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 20,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_css_config_item] @system_id, @site_id, @group_name, @item_name, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_css_siteAsync(short? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_css_site] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_css_site_from_groupAsync(byte? system_id, short? css_site_id, short? group_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_id",
                    Value = group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_css_site_from_group] @system_id, @css_site_id, @group_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_db_purge_recordAsync(short? site_id, string table_name, int? priority, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "table_name",
                    Size = 30,
                    Value = table_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_db_purge_record] @site_id, @table_name, @priority", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_eft_end_of_dayAsync(short? site_id, DateTime? start_dt, string gl_code, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 10,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_eft_end_of_day] @site_id, @start_dt, @gl_code", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_eft_end_of_day_v2Async(string charge_item_id, short? site_id, DateTime? start_datetime, string gl_code, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "charge_item_id",
                    Size = 18,
                    Value = charge_item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 10,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_eft_end_of_day_v2] @charge_item_id, @site_id, @start_datetime, @gl_code, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_eft_gl_mappingsAsync(string feeline_gl_code, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "feeline_gl_code",
                    Size = 5,
                    Value = feeline_gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_eft_gl_mappings] @feeline_gl_code, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_eft_rejectionAsync(short? site_id, DateTime? logged_date, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "logged_date",
                    Value = logged_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_eft_rejection] @site_id, @logged_date, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egmAsync(int? egm_ser_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm] @egm_ser_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_clearanceAsync(short? site_id, string clearance_type, DateTime? start_datetime, int? egm_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_type",
                    Size = 30,
                    Value = clearance_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_clearance] @site_id, @clearance_type, @start_datetime, @egm_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_clearance_entryAsync(short? site_id, DateTime? entry_datetime, int? egm_serial_number, string clearance_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_type",
                    Size = 30,
                    Value = clearance_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_clearance_entry] @site_id, @entry_datetime, @egm_serial_number, @clearance_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_device_configAsync(int? egm_serial_number, short? device_type_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "device_type_id",
                    Value = device_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_device_config] @egm_serial_number, @device_type_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_gameAsync(int? egm_ser_num, short? gme_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gme_num",
                    Value = gme_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_game] @egm_ser_num, @gme_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_meters_limitAsync(string type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_meters_limit] @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_network_limitAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_network_limit] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_services_loopAsync(short? current_site_id, int? egm_ser_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "current_site_id",
                    Value = current_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_services_loop] @current_site_id, @egm_ser_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_tedAsync(int? egm_serial_number, byte? ted_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ted_number",
                    Value = ted_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_ted] @egm_serial_number, @ted_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_templateAsync(short? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_template] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_transactionAsync(short? site_id, int? tick_num, int? egm_ser_num, DateTime? trans_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_transaction] @site_id, @tick_num, @egm_ser_num, @trans_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_egm_turbo_wedgeAsync(int? egm_serial_number, short? site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_egm_turbo_wedge] @egm_serial_number, @site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_employeeAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_employee] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_equationAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_equation] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_file_distributionAsync(short? site_id, string set_name, string set_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "set_name",
                    Size = 30,
                    Value = set_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "set_type",
                    Size = 10,
                    Value = set_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_file_distribution] @site_id, @set_name, @set_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_file_storeAsync(string file_name, string version, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "file_name",
                    Size = 50,
                    Value = file_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "version",
                    Size = 20,
                    Value = version ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_file_store] @file_name, @version", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_file_working_setAsync(string file_name, string version, string set_name, string set_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "file_name",
                    Size = 50,
                    Value = file_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "version",
                    Size = 20,
                    Value = version ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "set_name",
                    Size = 30,
                    Value = set_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "set_type",
                    Size = 10,
                    Value = set_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_file_working_set] @file_name, @version, @set_name, @set_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<remove_floor_controlResult>> remove_floor_controlAsync(short? site_id, int? host_sn, string fc_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_sn",
                    Value = host_sn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fc_name",
                    Size = 8,
                    Value = fc_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<remove_floor_controlResult>("EXEC @returnValue = [dbo].[remove_floor_control] @site_id, @host_sn, @fc_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_floor_view_detailAsync(short? site_id, int? ser_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ser_num",
                    Value = ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_floor_view_detail] @site_id, @ser_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_floor_view_masterAsync(short? site_id, short? floor_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor_num",
                    Value = floor_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_floor_view_master] @site_id, @floor_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_game_typeAsync(short? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_game_type] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_game_variationAsync(short? game_type_id, int? game_var_no, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "game_type_id",
                    Value = game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_no",
                    Value = game_var_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_game_variation] @game_type_id, @game_var_no", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_identification_groupAsync(short? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_identification_group] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_identification_itemAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_identification_item] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_jackpot_contributionsAsync(short? site_id, int? pool_number, short? fcc_site_id, string fcc_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fcc_site_id",
                    Value = fcc_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "fcc_name",
                    Size = 10,
                    Value = fcc_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_jackpot_contributions] @site_id, @pool_number, @fcc_site_id, @fcc_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_jurisdictionAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_jurisdiction] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_locationAsync(short? site_id, short? floor, short? bank, short? pos, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pos",
                    Value = pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_location] @site_id, @floor, @bank, @pos", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_location_midmAsync(short? site_id, short? floor, short? bank, short? pos, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pos",
                    Value = pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_location_midm] @site_id, @floor, @bank, @pos", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_loopAsync(short? site_id, string loop_name, string fc_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 8,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "fc_name",
                    Size = 8,
                    Value = fc_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_loop] @site_id, @loop_name, @fc_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_loop_device_applicationAsync(byte? system_id, short? css_site_id, byte? hw_dev, string app_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "hw_dev",
                    Value = hw_dev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "app_id",
                    Size = 32,
                    Value = app_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_loop_device_application] @system_id, @css_site_id, @hw_dev, @app_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_loop_device_msg_textAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_loop_device_msg_text] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_loyalty_unitAsync(short? site_id, int? egm_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_loyalty_unit] @site_id, @egm_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_manufacturerAsync(short? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_manufacturer] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<remove_max_change_game_configResult>> remove_max_change_game_configAsync(string id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 36,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<remove_max_change_game_configResult>("EXEC @returnValue = [dbo].[remove_max_change_game_config] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_max_change_request_detailAsync(string id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 36,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_max_change_request_detail] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_maxbonus_ticketAsync(short? site_id, int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_maxbonus_ticket] @site_id, @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_membership_typeAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_membership_type] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_money_boxAsync(short? site_id, int? box_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "box_number",
                    Value = box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_money_box] @site_id, @box_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_network_deviceAsync(decimal? id, short? site_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_network_device] @id, @site_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_network_device_typeAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_network_device_type] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_network_device_v2Async(decimal? id, short? site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_network_device_v2] @id, @site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pagerAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pager] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pager_categoryAsync(decimal? pager_id, decimal? category_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pager_id",
                    Precision = 18,
                    Value = pager_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "category_id",
                    Precision = 18,
                    Value = category_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pager_category] @pager_id, @category_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pager_eventAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pager_event] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pager_rating_gradeAsync(decimal? pager_id, int? rating_grade_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pager_id",
                    Precision = 18,
                    Value = pager_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pager_rating_grade] @pager_id, @rating_grade_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pager_transportAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pager_transport] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pager_zoneAsync(decimal? pager_id, int? zone_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pager_id",
                    Precision = 18,
                    Value = pager_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "zone_id",
                    Value = zone_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pager_zone] @pager_id, @zone_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patronAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_acc_permissionAsync(decimal? account_id, decimal? patron_id, short? permission, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "permission",
                    Value = permission ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_acc_permission] @account_id, @patron_id, @permission, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_accountAsync(decimal? patron_id, decimal? account_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_account] @patron_id, @account_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_age_groupAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_age_group] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_associationAsync(short? css_site_id, decimal? parent_patron_id, decimal? associate_patron_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "parent_patron_id",
                    Precision = 18,
                    Value = parent_patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "associate_patron_id",
                    Precision = 18,
                    Value = associate_patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_association] @css_site_id, @parent_patron_id, @associate_patron_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_bankingAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_banking] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_extraAsync(decimal? patron_id, decimal? patron_extra_type_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_extra_type_id",
                    Precision = 18,
                    Value = patron_extra_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_extra] @patron_id, @patron_extra_type_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_extra_typeAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_extra_type] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_groupAsync(int? group, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group",
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_group] @group, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_group_memberAsync(decimal? patron, int? group, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron",
                    Precision = 18,
                    Value = patron ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "group",
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_group_member] @patron, @group, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_identificationAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_identification] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_preferenceAsync(decimal? patron, int? group, int? type, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron",
                    Precision = 18,
                    Value = patron ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "group",
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_preference] @patron, @group, @type, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_preference_groupAsync(int? group, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group",
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_preference_group] @group, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_patron_preference_typeAsync(int? group, int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group",
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_patron_preference_type] @group, @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_player_exclusion_patron_typesAsync(short? site_id, decimal? transaction_id, decimal? patron_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_player_exclusion_patron_types] @site_id, @transaction_id, @patron_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_player_exclusion_transactionAsync(decimal? transaction_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_player_exclusion_transaction] @transaction_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_point_purge_configurationAsync(decimal? id, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_point_purge_configuration] @id, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_point_purge_membership_noAsync(decimal? id, decimal? point_purge_configuration_id, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_point_purge_membership_no] @id, @point_purge_configuration_id, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_point_purge_membership_typeAsync(decimal? point_purge_configuration_id, int? membership_type_id, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_point_purge_membership_type] @point_purge_configuration_id, @membership_type_id, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_point_purge_pat_statusAsync(decimal? point_purge_configuration_id, string patron_status, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_status",
                    Size = 10,
                    Value = patron_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_point_purge_pat_status] @point_purge_configuration_id, @patron_status, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_point_purge_ratingAsync(decimal? point_purge_configuration_id, int? rating_grade_id, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_point_purge_rating] @point_purge_configuration_id, @rating_grade_id, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_point_purge_timeframeAsync(decimal? id, decimal? point_purge_configuration_id, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_point_purge_timeframe] @id, @point_purge_configuration_id, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_points_play_configurationAsync(decimal? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_points_play_configuration] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_points_play_denominationAsync(decimal? points_play_configuration_id, decimal? drawdown_denomination_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "points_play_configuration_id",
                    Precision = 18,
                    Value = points_play_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "drawdown_denomination_id",
                    Precision = 18,
                    Value = drawdown_denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_points_play_denomination] @points_play_configuration_id, @drawdown_denomination_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_points_play_rating_gradeAsync(decimal? points_play_configuration_id, decimal? rating_grade_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "points_play_configuration_id",
                    Precision = 18,
                    Value = points_play_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Precision = 18,
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_points_play_rating_grade] @points_play_configuration_id, @rating_grade_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_points_play_tracking_typeAsync(decimal? points_play_configuration_id, byte? tracking_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "points_play_configuration_id",
                    Precision = 18,
                    Value = points_play_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_points_play_tracking_type] @points_play_configuration_id, @tracking_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_poolAsync(short? site_id, int? pool_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pool] @site_id, @pool_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pool_deviceAsync(short? pl_site_id, int? pool_num, int? egm_ser_num, short? game_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pl_site_id",
                    Value = pl_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_num",
                    Value = game_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pool_device] @pl_site_id, @pool_num, @egm_ser_num, @game_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pool_groupAsync(short? site_id, short? group_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_id",
                    Value = group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pool_group] @site_id, @group_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_pool_group_levelAsync(short? site_id, short? jp_grp_id, short? level_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "jp_grp_id",
                    Value = jp_grp_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "level_num",
                    Value = level_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_pool_group_level] @site_id, @jp_grp_id, @level_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_portAsync(short? site_id, int? host_sn, short? port, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_sn",
                    Value = host_sn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "port",
                    Value = port ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_port] @site_id, @host_sn, @port", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_port_v2Async(short? site_id, int? host_sn, short? port, string loop_name, short? weighting, string remote_port, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_sn",
                    Value = host_sn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "port",
                    Value = port ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 8,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "weighting",
                    Value = weighting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "remote_port",
                    Size = 30,
                    Value = remote_port ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_port_v2] @site_id, @host_sn, @port, @loop_name, @weighting, @remote_port", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_prizedrawAsync(int? id, int? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_prizedraw] @id, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_rating_gradeAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_rating_grade] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_redemption_itemAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_redemption_item] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_redemption_voucherAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_redemption_voucher] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_reports_to_max_sysAsync(string report_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "report_name",
                    Size = 100,
                    Value = report_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_reports_to_max_sys] @report_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_s_batch_confirm_typeAsync(decimal? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_s_batch_confirm_type] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_security_groupingsAsync(short? site_id, string group_name, string user_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 16,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_name",
                    Size = 16,
                    Value = user_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_security_groupings] @site_id, @group_name, @user_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_security_groupings_unloadAsync(short? site_id, string group_name, string user_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 16,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_name",
                    Size = 16,
                    Value = user_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_security_groupings_unload] @site_id, @group_name, @user_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_security_infoAsync(short? site_id, string application, string window, string control, string user_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "application",
                    Size = 32,
                    Value = application ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "window",
                    Size = 64,
                    Value = window ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "control",
                    Size = 128,
                    Value = control ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_name",
                    Size = 16,
                    Value = user_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_security_info] @site_id, @application, @window, @control, @user_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_security_usersAsync(short? site_id, string name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 16,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_security_users] @site_id, @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_security_users_unloadAsync(short? site_id, string name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 16,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_security_users_unload] @site_id, @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_site_controllerAsync(short? site_id, int? host_ser_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "host_ser_num",
                    Value = host_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_site_controller] @site_id, @host_ser_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_site_drop_varianceAsync(short? site_id, DateTime? start_datetime, string entry_type, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 255,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_site_drop_variance] @site_id, @start_datetime, @entry_type, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_site_group_memberAsync(byte? gp_host_sys, short? gp_host_site, short? mem_site, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gp_host_sys",
                    Value = gp_host_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "gp_host_site",
                    Value = gp_host_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "mem_site",
                    Value = mem_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_site_group_member] @gp_host_sys, @gp_host_site, @mem_site, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_spend_reward_criterionAsync(decimal? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_spend_reward_criterion] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_state_provinceAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_state_province] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_system_siteAsync(short? css_site_id, byte? system_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_system_site] @css_site_id, @system_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_system_site_track_typeAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_system_site_track_type] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_tax_rateAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_tax_rate] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_track_type_permissionAsync(int? track_id, byte? trans_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_track_type_permission] @track_id, @trans_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_turnover_thresholdAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_turnover_threshold] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_turnover_threshold_grpAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_turnover_threshold_grp] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_voucher_configAsync(short? site_id, int? voucher_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "voucher_type_id",
                    Value = voucher_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_voucher_config] @site_id, @voucher_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_voucher_sig_configAsync(int? id, short? site_id, int? voucher_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "voucher_type_id",
                    Value = voucher_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_voucher_sig_config] @id, @site_id, @voucher_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_voucher_signatureAsync(short? site_id, int? voucher_type_id, int? config_id, int? row_number, int? col_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "voucher_type_id",
                    Value = voucher_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "config_id",
                    Value = config_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "row_number",
                    Value = row_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "col_number",
                    Value = col_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_voucher_signature] @site_id, @voucher_type_id, @config_id, @row_number, @col_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_wab_group_memberAsync(short? group_site_id, short? member_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group_site_id",
                    Value = group_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "member_site_id",
                    Value = member_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_wab_group_member] @group_site_id, @member_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_win_reward_conversionAsync(short? css_site_id, decimal? win_reward_criterion_id, int? rating_grade_id, short? tracking_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "win_reward_criterion_id",
                    Precision = 18,
                    Value = win_reward_criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_win_reward_conversion] @css_site_id, @win_reward_criterion_id, @rating_grade_id, @tracking_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_win_reward_criterionAsync(decimal? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_win_reward_criterion] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_working_setAsync(string set_name, string set_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "set_name",
                    Size = 30,
                    Value = set_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "set_type",
                    Size = 10,
                    Value = set_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_working_set] @set_name, @set_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> remove_zoneAsync(int? id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[remove_zone] @id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_coin_count_clearanceResult>> report_coin_count_clearanceAsync(short? site_id, DateTime? count_start_datetime, DateTime? count_end_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "count_start_datetime",
                    Value = count_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "count_end_datetime",
                    Value = count_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_coin_count_clearanceResult>("EXEC @returnValue = [dbo].[report_coin_count_clearance] @site_id, @count_start_datetime, @count_end_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_egm_jackpot_group_multi_variationsResult>> report_egm_jackpot_group_multi_variationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_egm_jackpot_group_multi_variationsResult>("EXEC @returnValue = [dbo].[report_egm_jackpot_group_multi_variations]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_machine_note_denomResult>> report_machine_note_denomAsync(short? site_id, DateTime? count_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "count_datetime",
                    Value = count_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_machine_note_denomResult>("EXEC @returnValue = [dbo].[report_machine_note_denom] @site_id, @count_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_machine_note_denom_2Result>> report_machine_note_denom_2Async(short? site_id, DateTime? count_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "count_datetime",
                    Value = count_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_machine_note_denom_2Result>("EXEC @returnValue = [dbo].[report_machine_note_denom_2] @site_id, @count_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_machine_revenue_statResult>> report_machine_revenue_statAsync(short? site_id, DateTime? day_start_datetime, string financial_year, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "day_start_datetime",
                    Value = day_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "financial_year",
                    Size = 1,
                    Value = financial_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_machine_revenue_statResult>("EXEC @returnValue = [dbo].[report_machine_revenue_stat] @site_id, @day_start_datetime, @financial_year", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_non_compliant_egm_jackpot_pool_game_variationsResult>> report_non_compliant_egm_jackpot_pool_game_variationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_non_compliant_egm_jackpot_pool_game_variationsResult>("EXEC @returnValue = [dbo].[report_non_compliant_egm_jackpot_pool_game_variations]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_non_compliant_egm_jackpot_poolsResult>> report_non_compliant_egm_jackpot_poolsAsync(string linktype, string parameter, int? precision, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "linktype",
                    Size = 3,
                    Value = linktype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "parameter",
                    Size = 15,
                    Value = parameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "precision",
                    Value = precision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_non_compliant_egm_jackpot_poolsResult>("EXEC @returnValue = [dbo].[report_non_compliant_egm_jackpot_pools] @linktype, @parameter, @precision", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_non_compliant_egm_jackpot_pools_v2Result>> report_non_compliant_egm_jackpot_pools_v2Async(string linktype, string parameter, int? precision, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "linktype",
                    Size = 3,
                    Value = linktype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "parameter",
                    Size = 15,
                    Value = parameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "precision",
                    Value = precision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_non_compliant_egm_jackpot_pools_v2Result>("EXEC @returnValue = [dbo].[report_non_compliant_egm_jackpot_pools_v2] @linktype, @parameter, @precision", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_non_compliant_jackpot_configsResult>> report_non_compliant_jackpot_configsAsync(string linktype, string parameter, int? precision, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "linktype",
                    Size = 3,
                    Value = linktype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "parameter",
                    Size = 15,
                    Value = parameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "precision",
                    Value = precision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_non_compliant_jackpot_configsResult>("EXEC @returnValue = [dbo].[report_non_compliant_jackpot_configs] @linktype, @parameter, @precision", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_note_count_clearanceResult>> report_note_count_clearanceAsync(short? site_id, DateTime? count_start_datetime, DateTime? count_end_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "count_start_datetime",
                    Value = count_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "count_end_datetime",
                    Value = count_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<report_note_count_clearanceResult>("EXEC @returnValue = [dbo].[report_note_count_clearance] @site_id, @count_start_datetime, @count_end_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> revoke_transaction_lockAsync(short? site_id, decimal? target_id, string target_type, string holder, string reason, OutputParameter<string> token, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertoken = new SqlParameter
            {
                ParameterName = "token",
                Size = 256,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = token?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "target_id",
                    Precision = 18,
                    Value = target_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "target_type",
                    Size = 100,
                    Value = target_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametertoken,
                new SqlParameter
                {
                    ParameterName = "holder",
                    Size = 256,
                    Value = holder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reason",
                    Size = 20,
                    Value = reason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[revoke_transaction_lock] @site_id, @target_id, @target_type, @token OUTPUT, @holder, @reason", sqlParameters, cancellationToken);

            token.SetValue(parametertoken.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<rpt_WAJWinsResult>> rpt_WAJWinsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<rpt_WAJWinsResult>("EXEC @returnValue = [dbo].[rpt_WAJWins]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sat_upd_statsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sat_upd_stats]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<site_hourly_meters_summaryResult>> site_hourly_meters_summaryAsync(short? site_id, DateTime? start, DateTime? end, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start",
                    Value = start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "end",
                    Value = end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<site_hourly_meters_summaryResult>("EXEC @returnValue = [dbo].[site_hourly_meters_summary] @site_id, @start, @end", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_global_jackpot_performance_monthly_reportResult>> sp_global_jackpot_performance_monthly_reportAsync(DateTime? start_datetime, DateTime? end_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "end_datetime",
                    Value = end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_global_jackpot_performance_monthly_reportResult>("EXEC @returnValue = [dbo].[sp_global_jackpot_performance_monthly_report] @start_datetime, @end_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_mgw_weekly_analysis_reportResult>> sp_mgw_weekly_analysis_reportAsync(DateTime? startdate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startdate",
                    Value = startdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_mgw_weekly_analysis_reportResult>("EXEC @returnValue = [dbo].[sp_mgw_weekly_analysis_report] @startdate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_send_cougar_dbmailAsync(string profile_name, string recipients, string copy_recipients, string blind_copy_recipients, string subject, string body, string body_format, string importance, string sensitivity, string file_attachments, string query, string execute_query_database, bool? attach_query_result_as_file, string query_attachment_filename, bool? query_result_header, int? query_result_width, string query_result_separator, bool? exclude_query_output, bool? append_query_error, bool? query_no_truncate, bool? query_result_no_padding, bool? outputData, OutputParameter<int?> mailitem_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametermailitem_id = new SqlParameter
            {
                ParameterName = "mailitem_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = mailitem_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "profile_name",
                    Size = 256,
                    Value = profile_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "recipients",
                    Size = -1,
                    Value = recipients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "copy_recipients",
                    Size = -1,
                    Value = copy_recipients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blind_copy_recipients",
                    Size = -1,
                    Value = blind_copy_recipients ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "subject",
                    Size = 510,
                    Value = subject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "body",
                    Size = -1,
                    Value = body ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "body_format",
                    Size = 20,
                    Value = body_format ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "importance",
                    Size = 6,
                    Value = importance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sensitivity",
                    Size = 12,
                    Value = sensitivity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "file_attachments",
                    Size = -1,
                    Value = file_attachments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "query",
                    Size = -1,
                    Value = query ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "execute_query_database",
                    Size = 256,
                    Value = execute_query_database ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "attach_query_result_as_file",
                    Value = attach_query_result_as_file ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "query_attachment_filename",
                    Size = 520,
                    Value = query_attachment_filename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "query_result_header",
                    Value = query_result_header ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "query_result_width",
                    Value = query_result_width ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "query_result_separator",
                    Size = 1,
                    Value = query_result_separator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "exclude_query_output",
                    Value = exclude_query_output ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "append_query_error",
                    Value = append_query_error ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "query_no_truncate",
                    Value = query_no_truncate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "query_result_no_padding",
                    Value = query_result_no_padding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parametermailitem_id,
                new SqlParameter
                {
                    ParameterName = "outputData",
                    Value = outputData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_send_cougar_dbmail] @profile_name, @recipients, @copy_recipients, @blind_copy_recipients, @subject, @body, @body_format, @importance, @sensitivity, @file_attachments, @query, @execute_query_database, @attach_query_result_as_file, @query_attachment_filename, @query_result_header, @query_result_width, @query_result_separator, @exclude_query_output, @append_query_error, @query_no_truncate, @query_result_no_padding, @mailitem_id OUTPUT, @outputData", sqlParameters, cancellationToken);

            mailitem_id.SetValue(parametermailitem_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sun_upd_statsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sun_upd_stats]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> thu_upd_statsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[thu_upd_stats]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tp_JackpotMetersVsChargesReconciliationResult>> tp_JackpotMetersVsChargesReconciliationAsync(DateTime? DateFrom, DateTime? DateTo, int? StartDay, int? ThisYear, int? FullYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDay",
                    Value = StartDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ThisYear",
                    Value = ThisYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FullYear",
                    Value = FullYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<tp_JackpotMetersVsChargesReconciliationResult>("EXEC @returnValue = [dbo].[tp_JackpotMetersVsChargesReconciliation] @DateFrom, @DateTo, @StartDay, @ThisYear, @FullYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tp_rptALHWeeklyAnalysisResult>> tp_rptALHWeeklyAnalysisAsync(DateTime? startdate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startdate",
                    Value = startdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<tp_rptALHWeeklyAnalysisResult>("EXEC @returnValue = [dbo].[tp_rptALHWeeklyAnalysis] @startdate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tp_rptColesWeeklyAnalysisResult>> tp_rptColesWeeklyAnalysisAsync(DateTime? startdate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startdate",
                    Value = startdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<tp_rptColesWeeklyAnalysisResult>("EXEC @returnValue = [dbo].[tp_rptColesWeeklyAnalysis] @startdate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tp_rptEGMsIndividualPerformanceResult>> tp_rptEGMsIndividualPerformanceAsync(string Association, int? VenueID, DateTime? DateFrom, DateTime? DateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Association",
                    Size = 100,
                    Value = Association ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VenueID",
                    Value = VenueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<tp_rptEGMsIndividualPerformanceResult>("EXEC @returnValue = [dbo].[tp_rptEGMsIndividualPerformance] @Association, @VenueID, @DateFrom, @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tp_rptEGMsWeeklyPerformanceResult>> tp_rptEGMsWeeklyPerformanceAsync(string Association, int? VenueID, DateTime? DateFrom, DateTime? DateTo, int? StartDay, int? ThisYear, int? FullYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Association",
                    Size = 100,
                    Value = Association ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VenueID",
                    Value = VenueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDay",
                    Value = StartDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ThisYear",
                    Value = ThisYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FullYear",
                    Value = FullYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<tp_rptEGMsWeeklyPerformanceResult>("EXEC @returnValue = [dbo].[tp_rptEGMsWeeklyPerformance] @Association, @VenueID, @DateFrom, @DateTo, @StartDay, @ThisYear, @FullYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tp_rptEGMsWeeklyPerformanceDetailResult>> tp_rptEGMsWeeklyPerformanceDetailAsync(string Association, int? VenueID, DateTime? DateFrom, DateTime? DateTo, int? StartDay, int? ThisYear, int? FullYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Association",
                    Size = 100,
                    Value = Association ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VenueID",
                    Value = VenueID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDay",
                    Value = StartDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ThisYear",
                    Value = ThisYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FullYear",
                    Value = FullYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<tp_rptEGMsWeeklyPerformanceDetailResult>("EXEC @returnValue = [dbo].[tp_rptEGMsWeeklyPerformanceDetail] @Association, @VenueID, @DateFrom, @DateTo, @StartDay, @ThisYear, @FullYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tp_rptJokersJackpotEGMsResult>> tp_rptJokersJackpotEGMsAsync(DateTime? DateFrom, DateTime? DateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<tp_rptJokersJackpotEGMsResult>("EXEC @returnValue = [dbo].[tp_rptJokersJackpotEGMs] @DateFrom, @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tp_rptWeeklyAnalysisResult>> tp_rptWeeklyAnalysisAsync(DateTime? startdate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startdate",
                    Value = startdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<tp_rptWeeklyAnalysisResult>("EXEC @returnValue = [dbo].[tp_rptWeeklyAnalysis] @startdate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TransferMC0MonthlyResult>> TransferMC0MonthlyAsync(DateTime? MonthDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MonthDate",
                    Value = MonthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TransferMC0MonthlyResult>("EXEC @returnValue = [dbo].[TransferMC0Monthly] @MonthDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TransferQOGRInfoResult>> TransferQOGRInfoAsync(string ViewName, int? TimeLimit, int? YYYY, byte? MM, byte? DD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ViewName",
                    Size = 11,
                    Value = ViewName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TimeLimit",
                    Value = TimeLimit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "YYYY",
                    Value = YYYY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MM",
                    Value = MM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "DD",
                    Value = DD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TransferQOGRInfoResult>("EXEC @returnValue = [dbo].[TransferQOGRInfo] @ViewName, @TimeLimit, @YYYY, @MM, @DD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TransferSakuraInfoResult>> TransferSakuraInfoAsync(int? TimeLimit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TimeLimit",
                    Value = TimeLimit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TransferSakuraInfoResult>("EXEC @returnValue = [dbo].[TransferSakuraInfo] @TimeLimit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> tue_upd_statsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[tue_upd_stats]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_accountAsync(decimal? id, byte? creat_sys, short? creat_site, string acct_name, string status, DateTime? creat_date, DateTime? exp_date, DateTime? susp_start, DateTime? susp_end, DateTime? last_mod, string cash_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_sys",
                    Value = creat_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "creat_site",
                    Value = creat_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "acct_name",
                    Size = 40,
                    Value = acct_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_start",
                    Value = susp_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_end",
                    Value = susp_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cash_flag",
                    Size = 1,
                    Value = cash_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_account] @id, @creat_sys, @creat_site, @acct_name, @status, @creat_date, @exp_date, @susp_start, @susp_end, @last_mod, @cash_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_account_balanceAsync(decimal? account_id, byte? track_type, decimal? balance, decimal? avail_bal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "balance",
                    Precision = 18,
                    Value = balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "avail_bal",
                    Precision = 18,
                    Value = avail_bal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_account_balance] @account_id, @track_type, @balance, @avail_bal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_account_statusAsync(decimal? id, string status, DateTime? last_mod, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_account_status] @id, @status, @last_mod, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_account_summaryResult>> update_account_summaryAsync(decimal? account_id, int? card_id, byte? track_type, DateTime? period_dt, decimal? amount, byte? system_id, short? css_site_id, DateTime? start_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "period_dt",
                    Value = period_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_account_summaryResult>("EXEC @returnValue = [dbo].[update_account_summary] @account_id, @card_id, @track_type, @period_dt, @amount, @system_id, @css_site_id, @start_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_account_v2Async(decimal? id, byte? creat_sys, short? creat_site, string acct_name, string status, DateTime? creat_date, DateTime? exp_date, DateTime? susp_start, DateTime? susp_end, DateTime? last_mod, string cash_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_sys",
                    Value = creat_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "creat_site",
                    Value = creat_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "acct_name",
                    Size = 40,
                    Value = acct_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_start",
                    Value = susp_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_end",
                    Value = susp_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cash_flag",
                    Size = 1,
                    Value = cash_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_account_v2] @id, @creat_sys, @creat_site, @acct_name, @status, @creat_date, @exp_date, @susp_start, @susp_end, @last_mod, @cash_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_attend_egm_transactionAsync(short? site_id, decimal? ticket_number, int? egm_serial_number, DateTime? transaction_datetime, string user_id, DateTime? last_action_datetime, string attendant_id, string attendant_user_id, string attendant_name, DateTime? attend_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_datetime",
                    Value = last_action_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_id",
                    Size = 18,
                    Value = attendant_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_user_id",
                    Size = 16,
                    Value = attendant_user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_name",
                    Size = 30,
                    Value = attendant_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "attend_datetime",
                    Value = attend_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_attend_egm_transaction] @site_id, @ticket_number, @egm_serial_number, @transaction_datetime, @user_id, @last_action_datetime, @attendant_id, @attendant_user_id, @attendant_name, @attend_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_criterionAsync(short? site_id, decimal? promotion_id, decimal? id, string enabled_flag, string criterion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "criterion",
                    Size = 50,
                    Value = criterion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_criterion] @site_id, @promotion_id, @id, @enabled_flag, @criterion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_extra_detailsAsync(short? site_id, decimal? barrel_draw_promotion_id, DateTime? actual_draw_start, DateTime? actual_draw_end, int? total_ticket_count, byte? number_of_prizes, string enabled, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "actual_draw_start",
                    Value = actual_draw_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "actual_draw_end",
                    Value = actual_draw_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "total_ticket_count",
                    Value = total_ticket_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "number_of_prizes",
                    Value = number_of_prizes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_extra_details] @site_id, @barrel_draw_promotion_id, @actual_draw_start, @actual_draw_end, @total_ticket_count, @number_of_prizes, @enabled", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_extra_details_v2Async(short? site_id, decimal? barrel_draw_promotion_id, DateTime? actual_draw_start, DateTime? actual_draw_end, int? total_ticket_count, short? number_of_prizes, string enabled, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "actual_draw_start",
                    Value = actual_draw_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "actual_draw_end",
                    Value = actual_draw_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "total_ticket_count",
                    Value = total_ticket_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "number_of_prizes",
                    Value = number_of_prizes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_extra_details_v2] @site_id, @barrel_draw_promotion_id, @actual_draw_start, @actual_draw_end, @total_ticket_count, @number_of_prizes, @enabled", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_locationAsync(short? site_id, decimal? promotion_id, decimal? id, short? floor, short? bank, short? position, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_location] @site_id, @promotion_id, @id, @floor, @bank, @position", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_log_printedAsync(short? site_id, decimal? promotion_id, int? ticket_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_log_printed] @site_id, @promotion_id, @ticket_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_log_summaryAsync(short? site_id, decimal? promotion_id, DateTime? start_datetime, int? patron_card_id, decimal? patron_id, int? member_id, int? egm_serial_number, decimal? criterion_id, DateTime? purge_datetime, int? count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "patron_card_id",
                    Value = patron_card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "member_id",
                    Value = member_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "criterion_id",
                    Precision = 18,
                    Value = criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "purge_datetime",
                    Value = purge_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "count",
                    Value = count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_log_summary] @site_id, @promotion_id, @start_datetime, @patron_card_id, @patron_id, @member_id, @egm_serial_number, @criterion_id, @purge_datetime, @count", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_messageAsync(short? site_id, decimal? promotion_id, short? priority, string enabled_flag, string message_text, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "message_text",
                    Size = 74,
                    Value = message_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_message] @site_id, @promotion_id, @priority, @enabled_flag, @message_text", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_prizeAsync(short? site_id, decimal? promotion_id, short? draw_number, string prize_description, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "draw_number",
                    Value = draw_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 32,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_prize] @site_id, @promotion_id, @draw_number, @prize_description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_prize_V2Async(short? site_id, decimal? promotion_id, short? draw_number, short? draw_sequence, string prize_description, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "draw_number",
                    Value = draw_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "draw_sequence",
                    Value = draw_sequence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 32,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_prize_V2] @site_id, @promotion_id, @draw_number, @draw_sequence, @prize_description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_promo_v2Async(short? site_id, decimal? id, string state_flag, DateTime? start_time, DateTime? stop_time, string description, string enabled_hours_bitmap, string enable_user_reporting_flag, decimal? printer_id, DateTime? purge_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "state_flag",
                    Size = 1,
                    Value = state_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "start_time",
                    Value = start_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stop_time",
                    Value = stop_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 40,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_hours_bitmap",
                    Size = 168,
                    Value = enabled_hours_bitmap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "enable_user_reporting_flag",
                    Size = 1,
                    Value = enable_user_reporting_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "printer_id",
                    Precision = 18,
                    Value = printer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "purge_datetime",
                    Value = purge_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_promo_v2] @site_id, @id, @state_flag, @start_time, @stop_time, @description, @enabled_hours_bitmap, @enable_user_reporting_flag, @printer_id, @purge_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_promo_v3Async(short? site_id, decimal? id, string state_flag, DateTime? start_time, DateTime? stop_time, string description, string enabled_hours_bitmap, string enable_user_reporting_flag, decimal? printer_id, DateTime? purge_datetime, string kiosk_promotion_flag, int? points_award, byte? system_site_tracking_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "state_flag",
                    Size = 1,
                    Value = state_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "start_time",
                    Value = start_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stop_time",
                    Value = stop_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 40,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_hours_bitmap",
                    Size = 168,
                    Value = enabled_hours_bitmap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enable_user_reporting_flag",
                    Size = 1,
                    Value = enable_user_reporting_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "printer_id",
                    Precision = 18,
                    Value = printer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "purge_datetime",
                    Value = purge_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "kiosk_promotion_flag",
                    Size = 1,
                    Value = kiosk_promotion_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "points_award",
                    Value = points_award ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_site_tracking_type_id",
                    Value = system_site_tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_promo_v3] @site_id, @id, @state_flag, @start_time, @stop_time, @description, @enabled_hours_bitmap, @enable_user_reporting_flag, @printer_id, @purge_datetime, @kiosk_promotion_flag, @points_award, @system_site_tracking_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_promo_v4Async(short? site_id, decimal? id, string state_flag, DateTime? start_time, DateTime? stop_time, string description, string enabled_hours_bitmap, string enable_user_reporting_flag, decimal? printer_id, DateTime? purge_datetime, string kiosk_promotion_flag, int? points_award, byte? system_site_tracking_type_id, string display_on_kiosk, DateTime? draw_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "state_flag",
                    Size = 1,
                    Value = state_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "start_time",
                    Value = start_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stop_time",
                    Value = stop_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 40,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_hours_bitmap",
                    Size = 168,
                    Value = enabled_hours_bitmap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enable_user_reporting_flag",
                    Size = 1,
                    Value = enable_user_reporting_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "printer_id",
                    Precision = 18,
                    Value = printer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "purge_datetime",
                    Value = purge_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "kiosk_promotion_flag",
                    Size = 1,
                    Value = kiosk_promotion_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "points_award",
                    Value = points_award ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_site_tracking_type_id",
                    Value = system_site_tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "display_on_kiosk",
                    Size = 1,
                    Value = display_on_kiosk ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "draw_datetime",
                    Value = draw_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_promo_v4] @site_id, @id, @state_flag, @start_time, @stop_time, @description, @enabled_hours_bitmap, @enable_user_reporting_flag, @printer_id, @purge_datetime, @kiosk_promotion_flag, @points_award, @system_site_tracking_type_id, @display_on_kiosk, @draw_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_promo_v5Async(short? site_id, decimal? id, string state_flag, DateTime? start_time, DateTime? stop_time, string description, string enabled_hours_bitmap, string enable_user_reporting_flag, decimal? printer_id, DateTime? purge_datetime, string kiosk_promotion_flag, int? points_award, byte? system_site_tracking_type_id, string display_on_kiosk, DateTime? draw_datetime, string virtual_draw_flag, short? display_previous_winners_days, string display_details, string draw_message, DateTime? actual_draw_start, DateTime? actual_draw_end, int? total_ticket_count, byte? number_of_prizes, short? draw_animation_seconds, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "state_flag",
                    Size = 1,
                    Value = state_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "start_time",
                    Value = start_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stop_time",
                    Value = stop_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 40,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_hours_bitmap",
                    Size = 168,
                    Value = enabled_hours_bitmap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enable_user_reporting_flag",
                    Size = 1,
                    Value = enable_user_reporting_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "printer_id",
                    Precision = 18,
                    Value = printer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "purge_datetime",
                    Value = purge_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "kiosk_promotion_flag",
                    Size = 1,
                    Value = kiosk_promotion_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "points_award",
                    Value = points_award ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_site_tracking_type_id",
                    Value = system_site_tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "display_on_kiosk",
                    Size = 1,
                    Value = display_on_kiosk ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "draw_datetime",
                    Value = draw_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "virtual_draw_flag",
                    Size = 1,
                    Value = virtual_draw_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "display_previous_winners_days",
                    Value = display_previous_winners_days ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "display_details",
                    Size = 20,
                    Value = display_details ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "draw_message",
                    Size = 255,
                    Value = draw_message ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "actual_draw_start",
                    Value = actual_draw_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "actual_draw_end",
                    Value = actual_draw_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "total_ticket_count",
                    Value = total_ticket_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "number_of_prizes",
                    Value = number_of_prizes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "draw_animation_seconds",
                    Value = draw_animation_seconds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_promo_v5] @site_id, @id, @state_flag, @start_time, @stop_time, @description, @enabled_hours_bitmap, @enable_user_reporting_flag, @printer_id, @purge_datetime, @kiosk_promotion_flag, @points_award, @system_site_tracking_type_id, @display_on_kiosk, @draw_datetime, @virtual_draw_flag, @display_previous_winners_days, @display_details, @draw_message, @actual_draw_start, @actual_draw_end, @total_ticket_count, @number_of_prizes, @draw_animation_seconds", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_promo_v6Async(short? site_id, decimal? id, string state_flag, DateTime? start_time, DateTime? stop_time, string description, string enabled_halfhours_bitmap, string enable_user_reporting_flag, decimal? printer_id, DateTime? purge_datetime, string kiosk_promotion_flag, int? points_award, byte? system_site_tracking_type_id, string display_on_kiosk, DateTime? draw_datetime, string virtual_draw_flag, short? display_previous_winners_days, string display_details, string draw_message, DateTime? actual_draw_start, DateTime? actual_draw_end, int? total_ticket_count, byte? number_of_prizes, short? draw_animation_seconds, short? display_winner_seconds, decimal? parent_promo_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "state_flag",
                    Size = 1,
                    Value = state_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "start_time",
                    Value = start_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stop_time",
                    Value = stop_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 40,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_halfhours_bitmap",
                    Size = 336,
                    Value = enabled_halfhours_bitmap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enable_user_reporting_flag",
                    Size = 1,
                    Value = enable_user_reporting_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "printer_id",
                    Precision = 18,
                    Value = printer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "purge_datetime",
                    Value = purge_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "kiosk_promotion_flag",
                    Size = 1,
                    Value = kiosk_promotion_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "points_award",
                    Value = points_award ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_site_tracking_type_id",
                    Value = system_site_tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "display_on_kiosk",
                    Size = 1,
                    Value = display_on_kiosk ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "draw_datetime",
                    Value = draw_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "virtual_draw_flag",
                    Size = 1,
                    Value = virtual_draw_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "display_previous_winners_days",
                    Value = display_previous_winners_days ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "display_details",
                    Size = 20,
                    Value = display_details ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "draw_message",
                    Size = 255,
                    Value = draw_message ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "actual_draw_start",
                    Value = actual_draw_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "actual_draw_end",
                    Value = actual_draw_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "total_ticket_count",
                    Value = total_ticket_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "number_of_prizes",
                    Value = number_of_prizes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "draw_animation_seconds",
                    Value = draw_animation_seconds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "display_winner_seconds",
                    Value = display_winner_seconds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "parent_promo_id",
                    Precision = 18,
                    Value = parent_promo_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_promo_v6] @site_id, @id, @state_flag, @start_time, @stop_time, @description, @enabled_halfhours_bitmap, @enable_user_reporting_flag, @printer_id, @purge_datetime, @kiosk_promotion_flag, @points_award, @system_site_tracking_type_id, @display_on_kiosk, @draw_datetime, @virtual_draw_flag, @display_previous_winners_days, @display_details, @draw_message, @actual_draw_start, @actual_draw_end, @total_ticket_count, @number_of_prizes, @draw_animation_seconds, @display_winner_seconds, @parent_promo_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_promotionAsync(short? site_id, decimal? id, string state_flag, DateTime? start_time, DateTime? stop_time, string description, string enabled_hours_bitmap, string enable_user_reporting_flag, decimal? printer_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "state_flag",
                    Size = 1,
                    Value = state_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "start_time",
                    Value = start_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stop_time",
                    Value = stop_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 40,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_hours_bitmap",
                    Size = 168,
                    Value = enabled_hours_bitmap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "enable_user_reporting_flag",
                    Size = 1,
                    Value = enable_user_reporting_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "printer_id",
                    Precision = 18,
                    Value = printer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_promotion] @site_id, @id, @state_flag, @start_time, @stop_time, @description, @enabled_hours_bitmap, @enable_user_reporting_flag, @printer_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_ticket_eligibilityAsync(short? site_id, decimal? promotion_id, short? mins_before_draw_tickets_can_be_validated, string validate_by_kiosk_activity_flag, string validate_by_egm_activity_flag, string validate_by_pos_activity_flag, string validate_by_barrel_draw_ticket_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_id",
                    Precision = 18,
                    Value = promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "mins_before_draw_tickets_can_be_validated",
                    Value = mins_before_draw_tickets_can_be_validated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "validate_by_kiosk_activity_flag",
                    Size = 1,
                    Value = validate_by_kiosk_activity_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "validate_by_egm_activity_flag",
                    Size = 1,
                    Value = validate_by_egm_activity_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "validate_by_pos_activity_flag",
                    Size = 1,
                    Value = validate_by_pos_activity_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "validate_by_barrel_draw_ticket_flag",
                    Size = 1,
                    Value = validate_by_barrel_draw_ticket_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_ticket_eligibility] @site_id, @promotion_id, @mins_before_draw_tickets_can_be_validated, @validate_by_kiosk_activity_flag, @validate_by_egm_activity_flag, @validate_by_pos_activity_flag, @validate_by_barrel_draw_ticket_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_ticket_summaryAsync(short? site_id, decimal? barrel_draw_promotion_id, decimal? patron_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_ticket_summary] @site_id, @barrel_draw_promotion_id, @patron_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_ticket_summary_v2Async(short? site_id, decimal? barrel_draw_promotion_id, decimal? patron_id, short? ticket_count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_count",
                    Value = ticket_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_ticket_summary_v2] @site_id, @barrel_draw_promotion_id, @patron_id, @ticket_count", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_ticket_summary_v3Async(short? site_id, decimal? barrel_draw_promotion_id, decimal? patron_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_ticket_summary_v3] @site_id, @barrel_draw_promotion_id, @patron_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_ticket_summary_v4Async(short? site_id, decimal? barrel_draw_promotion_id, decimal? patron_id, short? ticket_count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_count",
                    Value = ticket_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_ticket_summary_v4] @site_id, @barrel_draw_promotion_id, @patron_id, @ticket_count", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_ticket_summary_v5Async(short? site_id, decimal? barrel_draw_promotion_id, decimal? patron_id, short? ticket_count, DateTime? event_time, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_count",
                    Value = ticket_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "event_time",
                    Value = event_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_ticket_summary_v5] @site_id, @barrel_draw_promotion_id, @patron_id, @ticket_count, @event_time", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_ticket_summary_v6Async(short? site_id, decimal? barrel_draw_promotion_id, decimal? patron_id, short? ticket_count, DateTime? event_time, string is_host, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_count",
                    Value = ticket_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "event_time",
                    Value = event_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "is_host",
                    Size = 1,
                    Value = is_host ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_ticket_summary_v6] @site_id, @barrel_draw_promotion_id, @patron_id, @ticket_count, @event_time, @is_host", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_winnersAsync(short? site_id, decimal? barrel_draw_promotion_id, int? ticket_number, decimal? patron_id, int? member_id, int? rating_grade_id, byte? prize_number, DateTime? drawn_datetime, int? membership_type_id, string claimed_flag, string prize, string promotion_description, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "member_id",
                    Value = member_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_number",
                    Value = prize_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "drawn_datetime",
                    Value = drawn_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "claimed_flag",
                    Size = 1,
                    Value = claimed_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize",
                    Size = 255,
                    Value = prize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_description",
                    Size = 40,
                    Value = promotion_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_winners] @site_id, @barrel_draw_promotion_id, @ticket_number, @patron_id, @member_id, @rating_grade_id, @prize_number, @drawn_datetime, @membership_type_id, @claimed_flag, @prize, @promotion_description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_barrel_draw_winners_v2Async(short? site_id, decimal? barrel_draw_promotion_id, int? ticket_number, decimal? patron_id, int? member_id, int? rating_grade_id, short? prize_number, DateTime? drawn_datetime, int? membership_type_id, string claimed_flag, string prize, string promotion_description, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barrel_draw_promotion_id",
                    Precision = 18,
                    Value = barrel_draw_promotion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "member_id",
                    Value = member_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_number",
                    Value = prize_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "drawn_datetime",
                    Value = drawn_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "claimed_flag",
                    Size = 1,
                    Value = claimed_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize",
                    Size = 255,
                    Value = prize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_description",
                    Size = 40,
                    Value = promotion_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_barrel_draw_winners_v2] @site_id, @barrel_draw_promotion_id, @ticket_number, @patron_id, @member_id, @rating_grade_id, @prize_number, @drawn_datetime, @membership_type_id, @claimed_flag, @prize, @promotion_description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_base_detailsAsync(int? card_id, string other_name, string email, string pos_addr1, string pos_addr2, string locality, string post_code, string state_prov, string hm_phone, string wk_phone, string mobile, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "other_name",
                    Size = 30,
                    Value = other_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr1",
                    Size = 60,
                    Value = pos_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr2",
                    Size = 60,
                    Value = pos_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state_prov",
                    Size = 30,
                    Value = state_prov ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "hm_phone",
                    Size = 20,
                    Value = hm_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "wk_phone",
                    Size = 20,
                    Value = wk_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_base_details] @card_id, @other_name, @email, @pos_addr1, @pos_addr2, @locality, @post_code, @state_prov, @hm_phone, @wk_phone, @mobile, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_batch_cardAsync(decimal? id, byte? creat_sys, short? creat_site, string disp_name, decimal? card_holder, int? card_type, short? pin, string password, string pinpw_stat, byte? pinpw_fail, DateTime? pw_expiry, string status, DateTime? creat_date, DateTime? exp_date, DateTime? susp_start, DateTime? susp_end, DateTime? last_mod, int? card_rat, decimal? account_id, byte? holder_type, string card_funct, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_sys",
                    Value = creat_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "creat_site",
                    Value = creat_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "disp_name",
                    Size = 30,
                    Value = disp_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_holder",
                    Precision = 18,
                    Value = card_holder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_type",
                    Value = card_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pin",
                    Value = pin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 20,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pinpw_stat",
                    Size = 10,
                    Value = pinpw_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pinpw_fail",
                    Value = pinpw_fail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "pw_expiry",
                    Value = pw_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_start",
                    Value = susp_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_end",
                    Value = susp_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "card_rat",
                    Value = card_rat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "holder_type",
                    Value = holder_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_funct",
                    Size = 60,
                    Value = card_funct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_batch_card] @id, @creat_sys, @creat_site, @disp_name, @card_holder, @card_type, @pin, @password, @pinpw_stat, @pinpw_fail, @pw_expiry, @status, @creat_date, @exp_date, @susp_start, @susp_end, @last_mod, @card_rat, @account_id, @holder_type, @card_funct, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_batch_confirm_statusAsync(string record_unique_id, string sys_site_batch_confirm_type, DateTime? edit_datetime, string new_status, string user_id_two, DateTime? last_action_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "record_unique_id",
                    Size = 60,
                    Value = record_unique_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sys_site_batch_confirm_type",
                    Size = 18,
                    Value = sys_site_batch_confirm_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "edit_datetime",
                    Value = edit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 3,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id_two",
                    Size = 10,
                    Value = user_id_two ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_datetime",
                    Value = last_action_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_batch_confirm_status] @record_unique_id, @sys_site_batch_confirm_type, @edit_datetime, @new_status, @user_id_two, @last_action_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_batch_confirm_typeAsync(int? id, string description, string table_name, string column_name, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "table_name",
                    Size = 35,
                    Value = table_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "column_name",
                    Size = 35,
                    Value = column_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_batch_confirm_type] @id, @description, @table_name, @column_name, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_bet_limitsAsync(int? card_id, byte? system_id, short? css_game_type_id, int? month_restriction, int? day_restriction, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_game_type_id",
                    Value = css_game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "month_restriction",
                    Value = month_restriction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "day_restriction",
                    Value = day_restriction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_bet_limits] @card_id, @system_id, @css_game_type_id, @month_restriction, @day_restriction, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_bet_restrictionAsync(decimal? patron_id, byte? system_id, int? game_type, short? summary, int? limit, int? pending_amount, DateTime? last_update, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_type",
                    Value = game_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "summary",
                    Value = summary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "limit",
                    Value = limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pending_amount",
                    Value = pending_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_update",
                    Value = last_update ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_bet_restriction] @patron_id, @system_id, @game_type, @summary, @limit, @pending_amount, @last_update, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_campaignAsync(string id, short? site_id, string name, DateTime? start_datetime, DateTime? end_datetime, string active_flag, string kiosk_message, short? tracking_type_id, int? point_value, int? cash_value, string ticket_text, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 36,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 255,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "end_datetime",
                    Value = end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "active_flag",
                    Size = 1,
                    Value = active_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "kiosk_message",
                    Size = 255,
                    Value = kiosk_message ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "point_value",
                    Value = point_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_value",
                    Value = cash_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 255,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_campaign] @id, @site_id, @name, @start_datetime, @end_datetime, @active_flag, @kiosk_message, @tracking_type_id, @point_value, @cash_value, @ticket_text", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_campaign_patronAsync(string campaign_id, decimal? patron_id, short? site_id, string redeemed_flag, DateTime? notification_sent_datetime, DateTime? redeemed_datetime, DateTime? eligible_start_datetime, DateTime? eligible_end_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "campaign_id",
                    Size = 36,
                    Value = campaign_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "redeemed_flag",
                    Size = 1,
                    Value = redeemed_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "notification_sent_datetime",
                    Value = notification_sent_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "redeemed_datetime",
                    Value = redeemed_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "eligible_start_datetime",
                    Value = eligible_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "eligible_end_datetime",
                    Value = eligible_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_campaign_patron] @campaign_id, @patron_id, @site_id, @redeemed_flag, @notification_sent_datetime, @redeemed_datetime, @eligible_start_datetime, @eligible_end_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cardAsync(int? id, byte? creat_sys, short? creat_site, string disp_name, decimal? card_holder, int? card_type, short? pin, string password, string pinpw_stat, byte? pinpw_fail, DateTime? pw_expiry, string status, DateTime? creat_date, DateTime? exp_date, DateTime? susp_start, DateTime? susp_end, DateTime? last_mod, int? card_rat, byte? holder_type, string card_funct, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "creat_sys",
                    Value = creat_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "creat_site",
                    Value = creat_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "disp_name",
                    Size = 30,
                    Value = disp_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_holder",
                    Precision = 18,
                    Value = card_holder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_type",
                    Value = card_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pin",
                    Value = pin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 20,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pinpw_stat",
                    Size = 10,
                    Value = pinpw_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pinpw_fail",
                    Value = pinpw_fail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "pw_expiry",
                    Value = pw_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_start",
                    Value = susp_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_end",
                    Value = susp_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "card_rat",
                    Value = card_rat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "holder_type",
                    Value = holder_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_funct",
                    Size = 60,
                    Value = card_funct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_card] @id, @creat_sys, @creat_site, @disp_name, @card_holder, @card_type, @pin, @password, @pinpw_stat, @pinpw_fail, @pw_expiry, @status, @creat_date, @exp_date, @susp_start, @susp_end, @last_mod, @card_rat, @holder_type, @card_funct, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_card_accountAsync(byte? system_id, int? card_id, decimal? account_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_card_account] @system_id, @card_id, @account_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_card_layoutAsync(short? css_site_id, int? card_type_id, string column_name, int? x_position, int? y_position, string on_card, string text_bold, string column_text, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_type_id",
                    Value = card_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "column_name",
                    Size = 20,
                    Value = column_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "x_position",
                    Value = x_position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "y_position",
                    Value = y_position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "on_card",
                    Size = 1,
                    Value = on_card ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "text_bold",
                    Size = 1,
                    Value = text_bold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "column_text",
                    Size = 30,
                    Value = column_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_card_layout] @css_site_id, @card_type_id, @column_name, @x_position, @y_position, @on_card, @text_bold, @column_text", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_card_layout_v2Async(short? css_site_id, int? card_type_id, string column_name, int? x_position, int? y_position, string on_card, string text_bold, string column_text, byte? font_size, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_type_id",
                    Value = card_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "column_name",
                    Size = 20,
                    Value = column_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "x_position",
                    Value = x_position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "y_position",
                    Value = y_position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "on_card",
                    Size = 1,
                    Value = on_card ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "text_bold",
                    Size = 1,
                    Value = text_bold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "column_text",
                    Size = 30,
                    Value = column_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "font_size",
                    Value = font_size ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_card_layout_v2] @css_site_id, @card_type_id, @column_name, @x_position, @y_position, @on_card, @text_bold, @column_text, @font_size", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_card_ratingAsync(int? id, int? rating, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rating",
                    Value = rating ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_card_rating] @id, @rating", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_card_statusAsync(int? id, string status, DateTime? last_mod, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_card_status] @id, @status, @last_mod, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_card_typeAsync(int? id, byte? system_id, short? site_id, byte? holder_type, string description, string card_funct, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "holder_type",
                    Value = holder_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_funct",
                    Size = 60,
                    Value = card_funct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_card_type] @id, @system_id, @site_id, @holder_type, @description, @card_funct, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_card_validationAsync(int? id, DateTime? last_val_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_val_dt",
                    Value = last_val_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_card_validation] @id, @last_val_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_cashier_float_balanceResult>> update_cashier_float_balanceAsync(short? site_id, DateTime? start_datetime, int? start_balance_actual, int? cash_in_amount, int? cash_out_amount, int? cheque_amount, DateTime? finish_datetime, int? finish_balance_actual, int? finish_balance_expected, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "start_balance_actual",
                    Value = start_balance_actual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_in_amount",
                    Value = cash_in_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_out_amount",
                    Value = cash_out_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "finish_datetime",
                    Value = finish_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "finish_balance_actual",
                    Value = finish_balance_actual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "finish_balance_expected",
                    Value = finish_balance_expected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_cashier_float_balanceResult>("EXEC @returnValue = [dbo].[update_cashier_float_balance] @site_id, @start_datetime, @start_balance_actual, @cash_in_amount, @cash_out_amount, @cheque_amount, @finish_datetime, @finish_balance_actual, @finish_balance_expected, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_cashier_float_balance_denominationsResult>> update_cashier_float_balance_denominationsAsync(short? site_id, DateTime? balance_datetime, short? cashier_denomination_id, int? quantity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "balance_datetime",
                    Value = balance_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cashier_denomination_id",
                    Value = cashier_denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "quantity",
                    Value = quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_cashier_float_balance_denominationsResult>("EXEC @returnValue = [dbo].[update_cashier_float_balance_denominations] @site_id, @balance_datetime, @cashier_denomination_id, @quantity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cashier_float_balance_denominations_v2Async(short? site_id, DateTime? balance_datetime, short? cashier_denomination_id, int? denomination_total, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "balance_datetime",
                    Value = balance_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cashier_denomination_id",
                    Value = cashier_denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_total",
                    Value = denomination_total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cashier_float_balance_denominations_v2] @site_id, @balance_datetime, @cashier_denomination_id, @denomination_total", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cashier_float_balance_v2Async(short? site_id, DateTime? start_datetime, int? start_balance_actual, int? cash_in_amount, int? cash_out_amount, int? gaming_cheques, int? egm_payouts, int? tito_ticket_payouts, int? hopper_refills, int? misc_payouts, int? my_cash_withdrawals, int? my_cash_deposits, DateTime? finish_datetime, int? finish_balance_actual, int? finish_balance_expected, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "start_balance_actual",
                    Value = start_balance_actual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_in_amount",
                    Value = cash_in_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_out_amount",
                    Value = cash_out_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gaming_cheques",
                    Value = gaming_cheques ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_payouts",
                    Value = egm_payouts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tito_ticket_payouts",
                    Value = tito_ticket_payouts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_refills",
                    Value = hopper_refills ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "misc_payouts",
                    Value = misc_payouts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "my_cash_withdrawals",
                    Value = my_cash_withdrawals ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "my_cash_deposits",
                    Value = my_cash_deposits ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "finish_datetime",
                    Value = finish_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "finish_balance_actual",
                    Value = finish_balance_actual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "finish_balance_expected",
                    Value = finish_balance_expected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cashier_float_balance_v2] @site_id, @start_datetime, @start_balance_actual, @cash_in_amount, @cash_out_amount, @gaming_cheques, @egm_payouts, @tito_ticket_payouts, @hopper_refills, @misc_payouts, @my_cash_withdrawals, @my_cash_deposits, @finish_datetime, @finish_balance_actual, @finish_balance_expected, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_categoryAsync(decimal? id, byte? system_id, short? css_site_id, string description, string comment_1, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 100,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_category] @id, @system_id, @css_site_id, @description, @comment_1, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_category_pager_eventAsync(decimal? pager_event_id, decimal? category_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pager_event_id",
                    Precision = 18,
                    Value = pager_event_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "category_id",
                    Precision = 18,
                    Value = category_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_category_pager_event] @pager_event_id, @category_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_acc_cash_trans_summAsync(short? site_id, int? egm_serial_number, short? summary_level, DateTime? transaction_datetime, byte? cbg_account_cash_transaction_type_id, short? floor, short? bank, short? position, string ssan, short? denomination_id, decimal? amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_cash_transaction_type_id",
                    Value = cbg_account_cash_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_acc_cash_trans_summ] @site_id, @egm_serial_number, @summary_level, @transaction_datetime, @cbg_account_cash_transaction_type_id, @floor, @bank, @position, @ssan, @denomination_id, @amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_acc_expiry_datetimeAsync(decimal? cbg_account_id, DateTime? last_val_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "last_val_dt",
                    Value = last_val_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_acc_expiry_datetime] @cbg_account_id, @last_val_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_acc_last_validationAsync(decimal? cbg_account_id, DateTime? last_val_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "last_val_dt",
                    Value = last_val_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_acc_last_validation] @cbg_account_id, @last_val_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_accountAsync(decimal? id, byte? cbg_account_type_id, string status, DateTime? expiry_datetime, DateTime? last_validated_datetime, short? creation_site_id, string pending_registration_flag, string first_time_kiosk_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_type_id",
                    Value = cbg_account_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_datetime",
                    Value = expiry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_validated_datetime",
                    Value = last_validated_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "creation_site_id",
                    Value = creation_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pending_registration_flag",
                    Size = 1,
                    Value = pending_registration_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "first_time_kiosk_flag",
                    Size = 1,
                    Value = first_time_kiosk_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account] @id, @cbg_account_type_id, @status, @expiry_datetime, @last_validated_datetime, @creation_site_id, @pending_registration_flag, @first_time_kiosk_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_cash_balanceAsync(decimal? cbg_account_id, decimal? adjustment_amount, string new_bal_encrypted, decimal? new_balance, int? egm_serial_number, short? site_id, short? css_site_id, int? card_id, int? transaction_number, short? cbg_account_cash_transaction_type, decimal? employee_id, string user_id, decimal? cash_withdrawal_balance, DateTime? transaction_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "adjustment_amount",
                    Precision = 18,
                    Value = adjustment_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_bal_encrypted",
                    Size = 16,
                    Value = new_bal_encrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_balance",
                    Precision = 18,
                    Value = new_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_number",
                    Value = transaction_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_cash_transaction_type",
                    Value = cbg_account_cash_transaction_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_withdrawal_balance",
                    Precision = 18,
                    Value = cash_withdrawal_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_cash_balance] @cbg_account_id, @adjustment_amount, @new_bal_encrypted, @new_balance, @egm_serial_number, @site_id, @css_site_id, @card_id, @transaction_number, @cbg_account_cash_transaction_type, @employee_id, @user_id, @cash_withdrawal_balance, @transaction_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_cash_balance_hostAsync(decimal? cbg_account_id, string balance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "balance",
                    Size = 16,
                    Value = balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_cash_balance_host] @cbg_account_id, @balance", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_cash_balance_host_v2Async(decimal? cbg_account_id, string balance, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "balance",
                    Size = 16,
                    Value = balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_cash_balance_host_v2] @cbg_account_id, @balance, @EventTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_cash_balance_v2Async(decimal? cbg_account_id, decimal? adjustment_amount, string new_bal_encrypted, decimal? new_balance, int? egm_serial_number, short? site_id, short? css_site_id, int? card_id, int? transaction_number, short? cbg_account_cash_transaction_type, decimal? employee_id, string user_id, decimal? cash_withdrawal_balance, DateTime? transaction_datetime, short? floor, short? bank, short? position, string ssan, short? denomination_id, decimal? cheque_amount, string cheque_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "adjustment_amount",
                    Precision = 18,
                    Value = adjustment_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_bal_encrypted",
                    Size = 16,
                    Value = new_bal_encrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_balance",
                    Precision = 18,
                    Value = new_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_number",
                    Value = transaction_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_cash_transaction_type",
                    Value = cbg_account_cash_transaction_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_withdrawal_balance",
                    Precision = 18,
                    Value = cash_withdrawal_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Precision = 18,
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 30,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_cash_balance_v2] @cbg_account_id, @adjustment_amount, @new_bal_encrypted, @new_balance, @egm_serial_number, @site_id, @css_site_id, @card_id, @transaction_number, @cbg_account_cash_transaction_type, @employee_id, @user_id, @cash_withdrawal_balance, @transaction_datetime, @floor, @bank, @position, @ssan, @denomination_id, @cheque_amount, @cheque_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_cash_balance_v4Async(decimal? cbg_account_id, decimal? adjustment_amount, string new_bal_encrypted, decimal? new_balance, int? egm_serial_number, short? site_id, short? css_site_id, int? card_id, int? transaction_number, short? cbg_account_cash_transaction_type, decimal? employee_id, string user_id, decimal? cash_withdrawal_balance, DateTime? transaction_datetime, short? floor, short? bank, short? position, string ssan, short? denomination_id, decimal? cheque_amount, string cheque_number, decimal? cash_amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "adjustment_amount",
                    Precision = 18,
                    Value = adjustment_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_bal_encrypted",
                    Size = 16,
                    Value = new_bal_encrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_balance",
                    Precision = 18,
                    Value = new_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_number",
                    Value = transaction_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_cash_transaction_type",
                    Value = cbg_account_cash_transaction_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_withdrawal_balance",
                    Precision = 18,
                    Value = cash_withdrawal_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Precision = 18,
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 30,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Precision = 18,
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_cash_balance_v4] @cbg_account_id, @adjustment_amount, @new_bal_encrypted, @new_balance, @egm_serial_number, @site_id, @css_site_id, @card_id, @transaction_number, @cbg_account_cash_transaction_type, @employee_id, @user_id, @cash_withdrawal_balance, @transaction_datetime, @floor, @bank, @position, @ssan, @denomination_id, @cheque_amount, @cheque_number, @cash_amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_cash_balance_v5Async(decimal? cbg_account_id, decimal? adjustment_amount, string new_bal_encrypted, decimal? new_balance, int? egm_serial_number, short? site_id, short? css_site_id, int? card_id, int? transaction_number, short? cbg_account_cash_transaction_type, decimal? employee_id, string user_id, decimal? cash_withdrawal_balance, DateTime? transaction_datetime, short? floor, short? bank, short? position, string ssan, short? denomination_id, decimal? cheque_amount, string cheque_number, decimal? cash_amount, DateTime? event_time, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "adjustment_amount",
                    Precision = 18,
                    Value = adjustment_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_bal_encrypted",
                    Size = 16,
                    Value = new_bal_encrypted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_balance",
                    Precision = 18,
                    Value = new_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_number",
                    Value = transaction_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_cash_transaction_type",
                    Value = cbg_account_cash_transaction_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_withdrawal_balance",
                    Precision = 18,
                    Value = cash_withdrawal_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Precision = 18,
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 30,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Precision = 18,
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "event_time",
                    Value = event_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_cash_balance_v5] @cbg_account_id, @adjustment_amount, @new_bal_encrypted, @new_balance, @egm_serial_number, @site_id, @css_site_id, @card_id, @transaction_number, @cbg_account_cash_transaction_type, @employee_id, @user_id, @cash_withdrawal_balance, @transaction_datetime, @floor, @bank, @position, @ssan, @denomination_id, @cheque_amount, @cheque_number, @cash_amount, @event_time", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_patronAsync(decimal? patron_id, decimal? cbg_account_id, decimal? employee_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Precision = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_patron] @patron_id, @cbg_account_id, @employee_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_pinAsync(decimal? cbg_account_id, string pin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pin",
                    Size = 16,
                    Value = pin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_pin] @cbg_account_id, @pin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_account_qogr_limitAsync(decimal? cbg_account_id, byte? cbg_account_qogr_limit_type_id, decimal? amount, string display_on_gemini_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_qogr_limit_type_id",
                    Value = cbg_account_qogr_limit_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "display_on_gemini_flag",
                    Size = 1,
                    Value = display_on_gemini_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_account_qogr_limit] @cbg_account_id, @cbg_account_qogr_limit_type_id, @amount, @display_on_gemini_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_audit_operationAsync(short? cbg_audit_operation_id, string description, string log_to_database_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_audit_operation_id",
                    Value = cbg_audit_operation_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 50,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "log_to_database_flag",
                    Size = 1,
                    Value = log_to_database_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_audit_operation] @cbg_audit_operation_id, @description, @log_to_database_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_audit_operation_v2Async(short? cbg_audit_operation_id, string description, string log_to_database_flag, string report_color, string amount1_format, string amount2_format, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_audit_operation_id",
                    Value = cbg_audit_operation_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 50,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "log_to_database_flag",
                    Size = 1,
                    Value = log_to_database_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "report_color",
                    Size = 20,
                    Value = report_color ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount1_format",
                    Size = 20,
                    Value = amount1_format ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount2_format",
                    Size = 20,
                    Value = amount2_format ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_audit_operation_v2] @cbg_audit_operation_id, @description, @log_to_database_flag, @report_color, @amount1_format, @amount2_format", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_card_accountAsync(int? card_id, decimal? cbg_account_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_card_account] @card_id, @cbg_account_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_inactive_accountsAsync(decimal? transaction_id, decimal? cbg_account_id, short? site_id, int? account_balance, DateTime? inactive_datetime, string inactive_account_status, DateTime? closed_datetime, string funds_transferred_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_id",
                    Precision = 18,
                    Value = cbg_account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "account_balance",
                    Value = account_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inactive_datetime",
                    Value = inactive_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "inactive_account_status",
                    Size = 10,
                    Value = inactive_account_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "closed_datetime",
                    Value = closed_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "funds_transferred_flag",
                    Size = 1,
                    Value = funds_transferred_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_inactive_accounts] @transaction_id, @cbg_account_id, @site_id, @account_balance, @inactive_datetime, @inactive_account_status, @closed_datetime, @funds_transferred_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cbg_qogr_account_limitsAsync(byte? cbg_qogr_account_limit_type_id, byte? cbg_account_type_id, short? site_id, decimal? default_amount, decimal? min_amount, decimal? max_amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cbg_qogr_account_limit_type_id",
                    Value = cbg_qogr_account_limit_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "cbg_account_type_id",
                    Value = cbg_account_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "default_amount",
                    Precision = 18,
                    Value = default_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "min_amount",
                    Precision = 18,
                    Value = min_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "max_amount",
                    Precision = 18,
                    Value = max_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cbg_qogr_account_limits] @cbg_qogr_account_limit_type_id, @cbg_account_type_id, @site_id, @default_amount, @min_amount, @max_amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_charge_groupAsync(short? id, string description, short? group_type, int? group_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "group_type",
                    Value = group_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_id",
                    Value = group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_charge_group] @id, @description, @group_type, @group_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_charge_group_memberAsync(short? id, short? charge_group_id, int? member_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "charge_group_id",
                    Value = charge_group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "member_id",
                    Value = member_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_charge_group_member] @id, @charge_group_id, @member_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_charge_itemAsync(string id, string description, short? site_id, string gl_code, short? calculation_method_id, int? reference_id, string rate, DateTime? start_datetime, DateTime? end_datetime, string enabled, short? units, int? monthly_min_charge, int? monthly_max_charge, int? turnover_threshold_group_id, short? sweep_frequency, string charge_type, string gst_flag, string group_description, string eft_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 5,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "calculation_method_id",
                    Value = calculation_method_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "reference_id",
                    Value = reference_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rate",
                    Size = 18,
                    Value = rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "end_datetime",
                    Value = end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "units",
                    Value = units ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "monthly_min_charge",
                    Value = monthly_min_charge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "monthly_max_charge",
                    Value = monthly_max_charge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover_threshold_group_id",
                    Value = turnover_threshold_group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sweep_frequency",
                    Value = sweep_frequency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "charge_type",
                    Size = 1,
                    Value = charge_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "gst_flag",
                    Size = 1,
                    Value = gst_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "group_description",
                    Size = 30,
                    Value = group_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "eft_flag",
                    Size = 1,
                    Value = eft_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_charge_item] @id, @description, @site_id, @gl_code, @calculation_method_id, @reference_id, @rate, @start_datetime, @end_datetime, @enabled, @units, @monthly_min_charge, @monthly_max_charge, @turnover_threshold_group_id, @sweep_frequency, @charge_type, @gst_flag, @group_description, @eft_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_charge_item_V2Async(string id, string description, short? site_id, string gl_code, short? calculation_method_id, int? reference_id, string rate, DateTime? start_datetime, DateTime? end_datetime, string enabled, short? units, int? monthly_min_charge, int? monthly_max_charge, int? turnover_threshold_group_id, short? sweep_frequency, string charge_type, string gst_flag, string group_description, string eft_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 5,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "calculation_method_id",
                    Value = calculation_method_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "reference_id",
                    Value = reference_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rate",
                    Size = 18,
                    Value = rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "end_datetime",
                    Value = end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "units",
                    Value = units ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "monthly_min_charge",
                    Value = monthly_min_charge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "monthly_max_charge",
                    Value = monthly_max_charge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover_threshold_group_id",
                    Value = turnover_threshold_group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sweep_frequency",
                    Value = sweep_frequency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "charge_type",
                    Size = 1,
                    Value = charge_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "gst_flag",
                    Size = 1,
                    Value = gst_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "group_description",
                    Size = 30,
                    Value = group_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "eft_flag",
                    Size = 1,
                    Value = eft_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_charge_item_V2] @id, @description, @site_id, @gl_code, @calculation_method_id, @reference_id, @rate, @start_datetime, @end_datetime, @enabled, @units, @monthly_min_charge, @monthly_max_charge, @turnover_threshold_group_id, @sweep_frequency, @charge_type, @gst_flag, @group_description, @eft_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_chart_of_accountsAsync(string gl_code, string dept_id, string description, short? report_section, string gst_gl_code, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 5,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Size = 3,
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "report_section",
                    Value = report_section ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "gst_gl_code",
                    Size = 5,
                    Value = gst_gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_chart_of_accounts] @gl_code, @dept_id, @description, @report_section, @gst_gl_code, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_chequeAsync(decimal? id, string cheque_number, string issuing_body, decimal? account_id, int? amount, short? level_id, string status, DateTime? receive_dt, DateTime? lastaction_dt, DateTime? buyback_dt, short? day_hold_gra, short? day_hold_ext, string comment_1, string comment_2, short? css_site_id, int? transaction_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "issuing_body",
                    Size = 30,
                    Value = issuing_body ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "level_id",
                    Value = level_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "receive_dt",
                    Value = receive_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "lastaction_dt",
                    Value = lastaction_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "buyback_dt",
                    Value = buyback_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_hold_gra",
                    Value = day_hold_gra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "day_hold_ext",
                    Value = day_hold_ext ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 60,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 60,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cheque] @id, @cheque_number, @issuing_body, @account_id, @amount, @level_id, @status, @receive_dt, @lastaction_dt, @buyback_dt, @day_hold_gra, @day_hold_ext, @comment_1, @comment_2, @css_site_id, @transaction_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_cheque_levelAsync(short? id, string description, short? default_days, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "default_days",
                    Value = default_days ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_cheque_level] @id, @description, @default_days, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_clearanceAsync(short? site_id, DateTime? clearance_start_datetime, string clearance_type, int? egm_serial_number, DateTime? egm_config_datetime, string money_box_number, string comments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_type",
                    Size = 30,
                    Value = clearance_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_datetime",
                    Value = egm_config_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "money_box_number",
                    Size = 30,
                    Value = money_box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_clearance] @site_id, @clearance_start_datetime, @clearance_type, @egm_serial_number, @egm_config_datetime, @money_box_number, @comments", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_clearance_acceptResult>> update_clearance_acceptAsync(short? site_id, DateTime? entry_datetime, string entry_type, int? egm_serial_number, DateTime? clearance_start_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_clearance_acceptResult>("EXEC @returnValue = [dbo].[update_clearance_accept] @site_id, @entry_datetime, @entry_type, @egm_serial_number, @clearance_start_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_clearance_acceptallResult>> update_clearance_acceptallAsync(short? site_id, string entry_type, DateTime? clearance_start_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_clearance_acceptallResult>("EXEC @returnValue = [dbo].[update_clearance_acceptall] @site_id, @entry_type, @clearance_start_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_clearance_adjustmentResult>> update_clearance_adjustmentAsync(short? site_id, DateTime? entry_datetime, string entry_type, int? egm_serial_number, DateTime? clearance_start_datetime, DateTime? egm_config_datetime, int? exp_stroke_cnt, int? exp_turnover_amt, int? exp_wins_amt, int? exp_cancelled_credits_amt, int? exp_hopper_fills_amt, int? exp_cents_in_amt, int? exp_cents_out_amt, int? exp_coins_in_cnt, int? exp_coins_out_cnt, int? exp_cashless_credit_in_amt, int? exp_cashless_credit_out_amt, int? exp_coins_to_dropbucket_amt, int? exp_coins_to_dropbucket_cnt, int? exp_notes_in_amt, int? exp_notes_in_cnt, int? exp_notes_in_cnt_5, int? exp_notes_in_cnt_10, int? exp_notes_in_cnt_20, int? exp_notes_in_cnt_50, int? exp_notes_in_cnt_100, int? exp_short_pays_amt, int? exp_jackpots_amt, int? exp_sap_wins_amt, int? exp_lp_wins_amt, int? exp_residual_turnover_amt, int? exp_residual_wins_amt, int? exp_ticket_printer_out_amt, int? exp_gaming_cheques_amt, int? act_cancelled_credits_amt, int? act_hopper_fills_amt, int? act_coins_to_dropbucket_amt, int? act_coins_to_dropbucket_cnt, int? act_notes_in_amt, int? act_notes_in_cnt, int? act_notes_in_cnt_5, int? act_notes_in_cnt_10, int? act_notes_in_cnt_20, int? act_notes_in_cnt_50, int? act_notes_in_cnt_100, int? act_short_pays_amt, int? act_jackpots_amt, int? act_sap_wins_amt, int? act_lp_wins_amt, int? spare_1, int? spare_2, int? spare_3, int? spare_4, int? spare_5, string comments, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_datetime",
                    Value = egm_config_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_stroke_cnt",
                    Value = exp_stroke_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_turnover_amt",
                    Value = exp_turnover_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_wins_amt",
                    Value = exp_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cancelled_credits_amt",
                    Value = exp_cancelled_credits_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_hopper_fills_amt",
                    Value = exp_hopper_fills_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cents_in_amt",
                    Value = exp_cents_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cents_out_amt",
                    Value = exp_cents_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_in_cnt",
                    Value = exp_coins_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_out_cnt",
                    Value = exp_coins_out_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cashless_credit_in_amt",
                    Value = exp_cashless_credit_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cashless_credit_out_amt",
                    Value = exp_cashless_credit_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_to_dropbucket_amt",
                    Value = exp_coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_to_dropbucket_cnt",
                    Value = exp_coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_amt",
                    Value = exp_notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt",
                    Value = exp_notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_5",
                    Value = exp_notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_10",
                    Value = exp_notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_20",
                    Value = exp_notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_50",
                    Value = exp_notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_100",
                    Value = exp_notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_short_pays_amt",
                    Value = exp_short_pays_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_jackpots_amt",
                    Value = exp_jackpots_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_sap_wins_amt",
                    Value = exp_sap_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_lp_wins_amt",
                    Value = exp_lp_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_residual_turnover_amt",
                    Value = exp_residual_turnover_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_residual_wins_amt",
                    Value = exp_residual_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_ticket_printer_out_amt",
                    Value = exp_ticket_printer_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_gaming_cheques_amt",
                    Value = exp_gaming_cheques_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_cancelled_credits_amt",
                    Value = act_cancelled_credits_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hopper_fills_amt",
                    Value = act_hopper_fills_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_coins_to_dropbucket_amt",
                    Value = act_coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_coins_to_dropbucket_cnt",
                    Value = act_coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_amt",
                    Value = act_notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt",
                    Value = act_notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_5",
                    Value = act_notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_10",
                    Value = act_notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_20",
                    Value = act_notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_50",
                    Value = act_notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_100",
                    Value = act_notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_pays_amt",
                    Value = act_short_pays_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_jackpots_amt",
                    Value = act_jackpots_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_sap_wins_amt",
                    Value = act_sap_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_lp_wins_amt",
                    Value = act_lp_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_clearance_adjustmentResult>("EXEC @returnValue = [dbo].[update_clearance_adjustment] @site_id, @entry_datetime, @entry_type, @egm_serial_number, @clearance_start_datetime, @egm_config_datetime, @exp_stroke_cnt, @exp_turnover_amt, @exp_wins_amt, @exp_cancelled_credits_amt, @exp_hopper_fills_amt, @exp_cents_in_amt, @exp_cents_out_amt, @exp_coins_in_cnt, @exp_coins_out_cnt, @exp_cashless_credit_in_amt, @exp_cashless_credit_out_amt, @exp_coins_to_dropbucket_amt, @exp_coins_to_dropbucket_cnt, @exp_notes_in_amt, @exp_notes_in_cnt, @exp_notes_in_cnt_5, @exp_notes_in_cnt_10, @exp_notes_in_cnt_20, @exp_notes_in_cnt_50, @exp_notes_in_cnt_100, @exp_short_pays_amt, @exp_jackpots_amt, @exp_sap_wins_amt, @exp_lp_wins_amt, @exp_residual_turnover_amt, @exp_residual_wins_amt, @exp_ticket_printer_out_amt, @exp_gaming_cheques_amt, @act_cancelled_credits_amt, @act_hopper_fills_amt, @act_coins_to_dropbucket_amt, @act_coins_to_dropbucket_cnt, @act_notes_in_amt, @act_notes_in_cnt, @act_notes_in_cnt_5, @act_notes_in_cnt_10, @act_notes_in_cnt_20, @act_notes_in_cnt_50, @act_notes_in_cnt_100, @act_short_pays_amt, @act_jackpots_amt, @act_sap_wins_amt, @act_lp_wins_amt, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @comments, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_clearance_apvAsync(short? site_id, DateTime? entry_datetime, int? egm_serial_number, string ticket_number_c, DateTime? transaction_datetime, string transaction_type, string transaction_status, int? amount, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number_c",
                    Size = 12,
                    Value = ticket_number_c ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_type",
                    Size = 20,
                    Value = transaction_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_status",
                    Size = 20,
                    Value = transaction_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_clearance_apv] @site_id, @entry_datetime, @egm_serial_number, @ticket_number_c, @transaction_datetime, @transaction_type, @transaction_status, @amount, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_clearance_clearResult>> update_clearance_clearAsync(short? site_id, DateTime? entry_datetime, string entry_type, int? egm_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_clearance_clearResult>("EXEC @returnValue = [dbo].[update_clearance_clear] @site_id, @entry_datetime, @entry_type, @egm_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_clearance_collectionResult>> update_clearance_collectionAsync(short? site_id, DateTime? entry_datetime, string entry_type, int? egm_serial_number, DateTime? egm_config_datetime, string money_box_number, int? coins_to_dropbucket_amt, int? coins_to_dropbucket_cnt, int? notes_in_amt, int? notes_in_cnt, int? notes_in_cnt_5, int? notes_in_cnt_10, int? notes_in_cnt_20, int? notes_in_cnt_50, int? notes_in_cnt_100, short? denomination_id, short? game_type_id, int? base_game_version_number, int? software_set_app_number, short? floor, short? bank, short? position, string comments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_datetime",
                    Value = egm_config_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "money_box_number",
                    Size = 30,
                    Value = money_box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_dropbucket_amt",
                    Value = coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_dropbucket_cnt",
                    Value = coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_amt",
                    Value = notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt",
                    Value = notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_5",
                    Value = notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_10",
                    Value = notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_20",
                    Value = notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_50",
                    Value = notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_100",
                    Value = notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_type_id",
                    Value = game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "base_game_version_number",
                    Value = base_game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "software_set_app_number",
                    Value = software_set_app_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_clearance_collectionResult>("EXEC @returnValue = [dbo].[update_clearance_collection] @site_id, @entry_datetime, @entry_type, @egm_serial_number, @egm_config_datetime, @money_box_number, @coins_to_dropbucket_amt, @coins_to_dropbucket_cnt, @notes_in_amt, @notes_in_cnt, @notes_in_cnt_5, @notes_in_cnt_10, @notes_in_cnt_20, @notes_in_cnt_50, @notes_in_cnt_100, @denomination_id, @game_type_id, @base_game_version_number, @software_set_app_number, @floor, @bank, @position, @comments", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_clearance_configAsync(short? site_id, int? egm_serial_number, DateTime? egm_config_datetime, short? denomination_id, short? game_type_id, int? base_game_version_number, int? software_set_app_number, short? floor, short? bank, short? position, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_datetime",
                    Value = egm_config_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_type_id",
                    Value = game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "base_game_version_number",
                    Value = base_game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "software_set_app_number",
                    Value = software_set_app_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_clearance_config] @site_id, @egm_serial_number, @egm_config_datetime, @denomination_id, @game_type_id, @base_game_version_number, @software_set_app_number, @floor, @bank, @position", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_clearance_countResult>> update_clearance_countAsync(short? site_id, DateTime? entry_datetime, string entry_type, int? egm_serial_number, DateTime? clearance_start_datetime, string money_box_number, string count_status, int? coins_to_dropbucket_amt, int? coins_to_dropbucket_cnt, int? notes_in_amt, int? notes_in_cnt, int? notes_in_cnt_5, int? notes_in_cnt_10, int? notes_in_cnt_20, int? notes_in_cnt_50, int? notes_in_cnt_100, short? token_id, int? token_weight, int? box_weight, int? coin_weight, string comments, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "money_box_number",
                    Size = 30,
                    Value = money_box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "count_status",
                    Size = 30,
                    Value = count_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_dropbucket_amt",
                    Value = coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_dropbucket_cnt",
                    Value = coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_amt",
                    Value = notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt",
                    Value = notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_5",
                    Value = notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_10",
                    Value = notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_20",
                    Value = notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_50",
                    Value = notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_100",
                    Value = notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "token_weight",
                    Value = token_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "box_weight",
                    Value = box_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coin_weight",
                    Value = coin_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_clearance_countResult>("EXEC @returnValue = [dbo].[update_clearance_count] @site_id, @entry_datetime, @entry_type, @egm_serial_number, @clearance_start_datetime, @money_box_number, @count_status, @coins_to_dropbucket_amt, @coins_to_dropbucket_cnt, @notes_in_amt, @notes_in_cnt, @notes_in_cnt_5, @notes_in_cnt_10, @notes_in_cnt_20, @notes_in_cnt_50, @notes_in_cnt_100, @token_id, @token_weight, @box_weight, @coin_weight, @comments, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_clearance_countadjustResult>> update_clearance_countadjustAsync(short? site_id, DateTime? entry_datetime, string entry_type, int? egm_serial_number, DateTime? clearance_start_datetime, string money_box_number, int? exp_coins_to_dropbucket_amt, int? exp_coins_to_dropbucket_cnt, int? exp_notes_in_amt, int? exp_notes_in_cnt, int? exp_notes_in_cnt_5, int? exp_notes_in_cnt_10, int? exp_notes_in_cnt_20, int? exp_notes_in_cnt_50, int? exp_notes_in_cnt_100, int? act_coins_to_dropbucket_amt, int? act_coins_to_dropbucket_cnt, int? act_notes_in_amt, int? act_notes_in_cnt, int? act_notes_in_cnt_5, int? act_notes_in_cnt_10, int? act_notes_in_cnt_20, int? act_notes_in_cnt_50, int? act_notes_in_cnt_100, string comments, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "money_box_number",
                    Size = 30,
                    Value = money_box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_to_dropbucket_amt",
                    Value = exp_coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_to_dropbucket_cnt",
                    Value = exp_coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_amt",
                    Value = exp_notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt",
                    Value = exp_notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_5",
                    Value = exp_notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_10",
                    Value = exp_notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_20",
                    Value = exp_notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_50",
                    Value = exp_notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_100",
                    Value = exp_notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_coins_to_dropbucket_amt",
                    Value = act_coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_coins_to_dropbucket_cnt",
                    Value = act_coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_amt",
                    Value = act_notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt",
                    Value = act_notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_5",
                    Value = act_notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_10",
                    Value = act_notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_20",
                    Value = act_notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_50",
                    Value = act_notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_100",
                    Value = act_notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_clearance_countadjustResult>("EXEC @returnValue = [dbo].[update_clearance_countadjust] @site_id, @entry_datetime, @entry_type, @egm_serial_number, @clearance_start_datetime, @money_box_number, @exp_coins_to_dropbucket_amt, @exp_coins_to_dropbucket_cnt, @exp_notes_in_amt, @exp_notes_in_cnt, @exp_notes_in_cnt_5, @exp_notes_in_cnt_10, @exp_notes_in_cnt_20, @exp_notes_in_cnt_50, @exp_notes_in_cnt_100, @act_coins_to_dropbucket_amt, @act_coins_to_dropbucket_cnt, @act_notes_in_amt, @act_notes_in_cnt, @act_notes_in_cnt_5, @act_notes_in_cnt_10, @act_notes_in_cnt_20, @act_notes_in_cnt_50, @act_notes_in_cnt_100, @comments, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_clearance_enddayResult>> update_clearance_enddayAsync(short? site_id, DateTime? entry_datetime, string entry_type, int? egm_serial_number, DateTime? clearance_start_datetime, DateTime? egm_config_datetime, int? stroke_cnt, int? turnover_amt, int? wins_amt, int? cancelled_credits_amt, int? hopper_fills_amt, int? cents_in_amt, int? cents_out_amt, int? coins_in_cnt, int? coins_out_cnt, int? cashless_credit_in_amt, int? cashless_credit_out_amt, int? coins_to_dropbucket_amt, int? coins_to_dropbucket_cnt, int? notes_in_amt, int? notes_in_cnt, int? notes_in_cnt_5, int? notes_in_cnt_10, int? notes_in_cnt_20, int? notes_in_cnt_50, int? notes_in_cnt_100, int? short_pays_amt, int? jackpots_amt, int? sap_wins_amt, int? lp_wins_amt, int? residual_turnover_amt, int? residual_wins_amt, int? ticket_printer_out_amt, int? gaming_cheques_amt, short? denomination_id, short? game_type_id, int? base_game_version_number, int? software_set_app_number, short? floor, short? bank, short? position, string comments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_datetime",
                    Value = egm_config_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stroke_cnt",
                    Value = stroke_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover_amt",
                    Value = turnover_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins_amt",
                    Value = wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled_credits_amt",
                    Value = cancelled_credits_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_fills_amt",
                    Value = hopper_fills_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in_amt",
                    Value = cents_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out_amt",
                    Value = cents_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_in_cnt",
                    Value = coins_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_out_cnt",
                    Value = coins_out_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_in_amt",
                    Value = cashless_credit_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_out_amt",
                    Value = cashless_credit_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_dropbucket_amt",
                    Value = coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_dropbucket_cnt",
                    Value = coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_amt",
                    Value = notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt",
                    Value = notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_5",
                    Value = notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_10",
                    Value = notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_20",
                    Value = notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_50",
                    Value = notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_100",
                    Value = notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "short_pays_amt",
                    Value = short_pays_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpots_amt",
                    Value = jackpots_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins_amt",
                    Value = sap_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins_amt",
                    Value = lp_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "residual_turnover_amt",
                    Value = residual_turnover_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "residual_wins_amt",
                    Value = residual_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_printer_out_amt",
                    Value = ticket_printer_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gaming_cheques_amt",
                    Value = gaming_cheques_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "game_type_id",
                    Value = game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "base_game_version_number",
                    Value = base_game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "software_set_app_number",
                    Value = software_set_app_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_clearance_enddayResult>("EXEC @returnValue = [dbo].[update_clearance_endday] @site_id, @entry_datetime, @entry_type, @egm_serial_number, @clearance_start_datetime, @egm_config_datetime, @stroke_cnt, @turnover_amt, @wins_amt, @cancelled_credits_amt, @hopper_fills_amt, @cents_in_amt, @cents_out_amt, @coins_in_cnt, @coins_out_cnt, @cashless_credit_in_amt, @cashless_credit_out_amt, @coins_to_dropbucket_amt, @coins_to_dropbucket_cnt, @notes_in_amt, @notes_in_cnt, @notes_in_cnt_5, @notes_in_cnt_10, @notes_in_cnt_20, @notes_in_cnt_50, @notes_in_cnt_100, @short_pays_amt, @jackpots_amt, @sap_wins_amt, @lp_wins_amt, @residual_turnover_amt, @residual_wins_amt, @ticket_printer_out_amt, @gaming_cheques_amt, @denomination_id, @game_type_id, @base_game_version_number, @software_set_app_number, @floor, @bank, @position, @comments", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_clearance_summaryAsync(short? site_id, DateTime? clearance_start_datetime, int? egm_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_clearance_summary] @site_id, @clearance_start_datetime, @egm_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_coin_countAsync(short? site_id, DateTime? entry_datetime, string money_box_number, int? egm_serial_number, string count_status, int? coins_to_dropbucket_amt, int? coins_to_dropbucket_cnt, short? token_id, int? token_weight, int? box_weight, int? coin_weight, int? spare_1, int? spare_2, int? spare_3, DateTime? logged_datetime, string comments, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "money_box_number",
                    Size = 30,
                    Value = money_box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "count_status",
                    Size = 30,
                    Value = count_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_dropbucket_amt",
                    Value = coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coins_to_dropbucket_cnt",
                    Value = coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "token_weight",
                    Value = token_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "box_weight",
                    Value = box_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coin_weight",
                    Value = coin_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_coin_count] @site_id, @entry_datetime, @money_box_number, @egm_serial_number, @count_status, @coins_to_dropbucket_amt, @coins_to_dropbucket_cnt, @token_id, @token_weight, @box_weight, @coin_weight, @spare_1, @spare_2, @spare_3, @logged_datetime, @comments, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_column_bet_restrictionResult>> update_column_bet_restrictionAsync(string record_unique_id, string column_name, string column_value, string user_id, decimal? sys_site_batch_confirm_type, DateTime? edit_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "record_unique_id",
                    Size = 60,
                    Value = record_unique_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "column_name",
                    Size = 30,
                    Value = column_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "column_value",
                    Size = 255,
                    Value = column_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sys_site_batch_confirm_type",
                    Precision = 18,
                    Value = sys_site_batch_confirm_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "edit_datetime",
                    Value = edit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_column_bet_restrictionResult>("EXEC @returnValue = [dbo].[update_column_bet_restriction] @record_unique_id, @column_name, @column_value, @user_id, @sys_site_batch_confirm_type, @edit_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_column_patronResult>> update_column_patronAsync(string record_unique_id, string column_name, string column_value, string user_id, decimal? sys_site_batch_confirm_type, DateTime? edit_datetime, string first_name, string middle_initial, string last_name, string other_name, string name_title, string res_address_1, string res_address_2, string res_locality, string res_state_province, string res_postal_code, string res_country, string postal_address_1, string postal_address_2, string locality, string state_province, string country, string postal_code, string home_telephone, string work_telephone, string fax, string mobile, string email, string next_of_kin, string next_of_kin_telephone, DateTime? date_of_birth, string sex, string status, DateTime? creation_datetime, DateTime? expiry_datetime, DateTime? suspend_start_datetime, DateTime? suspend_end_datetime, int? membership_id, int? membership_type_id, DateTime? last_session_datetime, string description, int? rating_grade_id, decimal? id, string old_value, DateTime? last_modified_datetime, int? jurisdiction_id, string mail_out_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "record_unique_id",
                    Size = 60,
                    Value = record_unique_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "column_name",
                    Size = 30,
                    Value = column_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "column_value",
                    Size = 255,
                    Value = column_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sys_site_batch_confirm_type",
                    Precision = 18,
                    Value = sys_site_batch_confirm_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "edit_datetime",
                    Value = edit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "middle_initial",
                    Size = 10,
                    Value = middle_initial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "other_name",
                    Size = 30,
                    Value = other_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name_title",
                    Size = 15,
                    Value = name_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_address_1",
                    Size = 60,
                    Value = res_address_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_address_2",
                    Size = 60,
                    Value = res_address_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_locality",
                    Size = 30,
                    Value = res_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_state_province",
                    Size = 30,
                    Value = res_state_province ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_postal_code",
                    Size = 10,
                    Value = res_postal_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_country",
                    Size = 30,
                    Value = res_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "postal_address_1",
                    Size = 60,
                    Value = postal_address_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "postal_address_2",
                    Size = 60,
                    Value = postal_address_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state_province",
                    Size = 30,
                    Value = state_province ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 30,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "postal_code",
                    Size = 10,
                    Value = postal_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "home_telephone",
                    Size = 20,
                    Value = home_telephone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "work_telephone",
                    Size = 20,
                    Value = work_telephone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fax",
                    Size = 20,
                    Value = fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "next_of_kin",
                    Size = 40,
                    Value = next_of_kin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "next_of_kin_telephone",
                    Size = 20,
                    Value = next_of_kin_telephone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_of_birth",
                    Value = date_of_birth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sex",
                    Size = 1,
                    Value = sex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creation_datetime",
                    Value = creation_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_datetime",
                    Value = expiry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "suspend_start_datetime",
                    Value = suspend_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "suspend_end_datetime",
                    Value = suspend_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_session_datetime",
                    Value = last_session_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "old_value",
                    Size = 255,
                    Value = old_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "last_modified_datetime",
                    Value = last_modified_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction_id",
                    Value = jurisdiction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mail_out_flag",
                    Size = 1,
                    Value = mail_out_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_column_patronResult>("EXEC @returnValue = [dbo].[update_column_patron] @record_unique_id, @column_name, @column_value, @user_id, @sys_site_batch_confirm_type, @edit_datetime, @first_name, @middle_initial, @last_name, @other_name, @name_title, @res_address_1, @res_address_2, @res_locality, @res_state_province, @res_postal_code, @res_country, @postal_address_1, @postal_address_2, @locality, @state_province, @country, @postal_code, @home_telephone, @work_telephone, @fax, @mobile, @email, @next_of_kin, @next_of_kin_telephone, @date_of_birth, @sex, @status, @creation_datetime, @expiry_datetime, @suspend_start_datetime, @suspend_end_datetime, @membership_id, @membership_type_id, @last_session_datetime, @description, @rating_grade_id, @id, @old_value, @last_modified_datetime, @jurisdiction_id, @mail_out_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_column_patron_bankingAsync(string record_unique_id, string column_name, string column_value, DateTime? last_modified_datetime, string user_id, decimal? sys_site_batch_confirm_type, DateTime? edit_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "record_unique_id",
                    Size = 60,
                    Value = record_unique_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "column_name",
                    Size = 30,
                    Value = column_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "column_value",
                    Size = 255,
                    Value = column_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "last_modified_datetime",
                    Value = last_modified_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sys_site_batch_confirm_type",
                    Precision = 18,
                    Value = sys_site_batch_confirm_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "edit_datetime",
                    Value = edit_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_column_patron_banking] @record_unique_id, @column_name, @column_value, @last_modified_datetime, @user_id, @sys_site_batch_confirm_type, @edit_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_component_configAsync(short? site_id, int? h_serial_num, string inst_name, short? weighting, short? inst_type, string st_params, short? comp_type, string db_depend, string exe_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "h_serial_num",
                    Value = h_serial_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inst_name",
                    Size = 8,
                    Value = inst_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "weighting",
                    Value = weighting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "inst_type",
                    Value = inst_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "st_params",
                    Size = 255,
                    Value = st_params ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comp_type",
                    Value = comp_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "db_depend",
                    Size = 1,
                    Value = db_depend ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "exe_name",
                    Size = 32,
                    Value = exe_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_component_config] @site_id, @h_serial_num, @inst_name, @weighting, @inst_type, @st_params, @comp_type, @db_depend, @exe_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_config_itemAsync(short? site_id, string group_name, string item_name, int? number_1, string string_1, DateTime? date_1, decimal? decimal_1, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 20,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "number_1",
                    Value = number_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "string_1",
                    Size = 50,
                    Value = string_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_1",
                    Value = date_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "decimal_1",
                    Precision = 11,
                    Scale = 2,
                    Value = decimal_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_config_item] @site_id, @group_name, @item_name, @number_1, @string_1, @date_1, @decimal_1", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_conrad_accountAsync(int? account_id, string first_name, string last_name, int? card_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 30,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_type_id",
                    Value = card_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_conrad_account] @account_id, @first_name, @last_name, @card_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_count_file_typeAsync(decimal? id, string description, string extension, string separator, int? position_column, int? denomination_column, int? token_column, int? note_column, string note_count_type, int? coin_column, string coin_count_type, string row_heading, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "extension",
                    Size = 3,
                    Value = extension ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "separator",
                    Size = 15,
                    Value = separator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "position_column",
                    Value = position_column ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_column",
                    Value = denomination_column ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_column",
                    Value = token_column ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "note_column",
                    Value = note_column ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "note_count_type",
                    Size = 15,
                    Value = note_count_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "coin_column",
                    Value = coin_column ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "coin_count_type",
                    Size = 15,
                    Value = coin_count_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "row_heading",
                    Size = 1,
                    Value = row_heading ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_count_file_type] @id, @description, @extension, @separator, @position_column, @denomination_column, @token_column, @note_column, @note_count_type, @coin_column, @coin_count_type, @row_heading, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_countryAsync(int? id, string desc, short? currency_id, string iso_code, string phone_prefix, string active_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "currency_id",
                    Value = currency_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "iso_code",
                    Size = 10,
                    Value = iso_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phone_prefix",
                    Size = 10,
                    Value = phone_prefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active_flag",
                    Size = 1,
                    Value = active_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_country] @id, @desc, @currency_id, @iso_code, @phone_prefix, @active_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_country_v2Async(int? id, string desc, short? currency_id, string iso_code, string phone_prefix, string active_flag, string detail_1, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "currency_id",
                    Value = currency_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "iso_code",
                    Size = 10,
                    Value = iso_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phone_prefix",
                    Size = 10,
                    Value = phone_prefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active_flag",
                    Size = 1,
                    Value = active_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "detail_1",
                    Size = 255,
                    Value = detail_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_country_v2] @id, @desc, @currency_id, @iso_code, @phone_prefix, @active_flag, @detail_1, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_css_config_itemAsync(byte? system_id, short? site_id, string group_name, string item_name, int? number_1, string string_1, DateTime? date_1, decimal? decimal_1, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 20,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 20,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "number_1",
                    Value = number_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "string_1",
                    Size = 50,
                    Value = string_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_1",
                    Value = date_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "decimal_1",
                    Precision = 11,
                    Scale = 2,
                    Value = decimal_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_css_config_item] @system_id, @site_id, @group_name, @item_name, @number_1, @string_1, @date_1, @decimal_1, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_css_encode_cardAsync(int? card_id, short? system_id, short? css_site_id, string encode_data, string status, DateTime? creation_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "encode_data",
                    Size = 55,
                    Value = encode_data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creation_datetime",
                    Value = creation_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_css_encode_card] @card_id, @system_id, @css_site_id, @encode_data, @status, @creation_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_css_encode_card_resultAsync(short? system_id, short? css_site_id, DateTime? creation_datetime, int? range_from, int? range_to, string output_file, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "creation_datetime",
                    Value = creation_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "range_from",
                    Value = range_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "range_to",
                    Value = range_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "output_file",
                    Size = 20,
                    Value = output_file ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_css_encode_card_result] @system_id, @css_site_id, @creation_datetime, @range_from, @range_to, @output_file, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_css_siteAsync(short? id, string premises, string show_flag, string group_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "premises",
                    Size = 60,
                    Value = premises ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "show_flag",
                    Size = 1,
                    Value = show_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "group_flag",
                    Size = 1,
                    Value = group_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_css_site] @id, @premises, @show_flag, @group_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_css_statusAsync(DateTime? modified_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "modified_dt",
                    Value = modified_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_css_status] @modified_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_currencyAsync(short? id, string standard_abbreviation, string description, string comments, double? exchange_rate, string active_flag, decimal? threshold_1, decimal? threshold_2, decimal? threshold_3, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "standard_abbreviation",
                    Size = 3,
                    Value = standard_abbreviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 60,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "exchange_rate",
                    Value = exchange_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "active_flag",
                    Size = 1,
                    Value = active_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "threshold_1",
                    Precision = 18,
                    Value = threshold_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "threshold_2",
                    Precision = 18,
                    Value = threshold_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "threshold_3",
                    Precision = 18,
                    Value = threshold_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_currency] @id, @standard_abbreviation, @description, @comments, @exchange_rate, @active_flag, @threshold_1, @threshold_2, @threshold_3, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_database_versionAsync(int? site_id, string version, int? run_count, DateTime? dt_upgrade, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "version",
                    Size = 30,
                    Value = version ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "run_count",
                    Value = run_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dt_upgrade",
                    Value = dt_upgrade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_database_version] @site_id, @version, @run_count, @dt_upgrade", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_db_purge_recordAsync(short? site_id, string table_name, int? priority, int? max_rows_deleted, short? age_to_purge, string datetime_name, string additional_restrictions, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "table_name",
                    Size = 30,
                    Value = table_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_rows_deleted",
                    Value = max_rows_deleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "age_to_purge",
                    Value = age_to_purge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "datetime_name",
                    Size = 30,
                    Value = datetime_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "additional_restrictions",
                    Size = 255,
                    Value = additional_restrictions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_db_purge_record] @site_id, @table_name, @priority, @max_rows_deleted, @age_to_purge, @datetime_name, @additional_restrictions", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_db_purge_record_v3Async(short? site_id, string table_name, int? priority, int? max_rows_deleted, short? age_to_purge, string datetime_name, string additional_restrictions, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "table_name",
                    Size = 30,
                    Value = table_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_rows_deleted",
                    Value = max_rows_deleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "age_to_purge",
                    Value = age_to_purge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "datetime_name",
                    Size = 30,
                    Value = datetime_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "additional_restrictions",
                    Size = 2500,
                    Value = additional_restrictions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_db_purge_record_v3] @site_id, @table_name, @priority, @max_rows_deleted, @age_to_purge, @datetime_name, @additional_restrictions", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_db_purge_recordV2Async(short? site_id, string table_name, int? priority, int? max_rows_deleted, short? age_to_purge, string datetime_name, string additional_restrictions, string forced_index, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "table_name",
                    Size = 30,
                    Value = table_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_rows_deleted",
                    Value = max_rows_deleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "age_to_purge",
                    Value = age_to_purge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "datetime_name",
                    Size = 30,
                    Value = datetime_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "additional_restrictions",
                    Size = 255,
                    Value = additional_restrictions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "forced_index",
                    Size = 30,
                    Value = forced_index ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_db_purge_recordV2] @site_id, @table_name, @priority, @max_rows_deleted, @age_to_purge, @datetime_name, @additional_restrictions, @forced_index", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_device_hist_remove_gameAsync(short? site_id, int? egm_ser_num, string type, DateTime? date_from, DateTime? date_to, string comments, string comments2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 15,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_from",
                    Value = date_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "date_to",
                    Value = date_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comments2",
                    Size = 80,
                    Value = comments2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_device_hist_remove_game] @site_id, @egm_ser_num, @type, @date_from, @date_to, @comments, @comments2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_device_historyAsync(short? site_id, int? egm_ser_num, string type, DateTime? date_from, DateTime? date_to, string comments, string comments2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 15,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_from",
                    Value = date_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "date_to",
                    Value = date_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comments2",
                    Size = 80,
                    Value = comments2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_device_history] @site_id, @egm_ser_num, @type, @date_from, @date_to, @comments, @comments2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_device_history_egmAsync(short? site_id, int? egm_ser_num, string type, DateTime? date_from, DateTime? date_to, string comments, string comments2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 15,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_from",
                    Value = date_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "date_to",
                    Value = date_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comments2",
                    Size = 80,
                    Value = comments2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_device_history_egm] @site_id, @egm_ser_num, @type, @date_from, @date_to, @comments, @comments2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_device_history_jackpotAsync(short? site_id, int? egm_ser_num, string type, DateTime? date_from, DateTime? date_to, string comments, string comments2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 15,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date_from",
                    Value = date_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "date_to",
                    Value = date_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comments2",
                    Size = 80,
                    Value = comments2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_device_history_jackpot] @site_id, @egm_ser_num, @type, @date_from, @date_to, @comments, @comments2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_eft_end_of_dayAsync(short? site_id, DateTime? start_dt, string gl_code, string item_name, int? report_section, int? unit, decimal? rate, int? total, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 10,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 30,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "report_section",
                    Value = report_section ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unit",
                    Value = unit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rate",
                    Precision = 13,
                    Scale = 4,
                    Value = rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "total",
                    Value = total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_eft_end_of_day] @site_id, @start_dt, @gl_code, @item_name, @report_section, @unit, @rate, @total", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_eft_end_of_day_v2Async(short? site_id, DateTime? start_dt, string gl_code, string item_name, int? report_section, int? unit, decimal? rate, int? total, decimal? gst, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 10,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 30,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "report_section",
                    Value = report_section ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unit",
                    Value = unit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rate",
                    Precision = 13,
                    Scale = 4,
                    Value = rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "total",
                    Value = total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gst",
                    Precision = 13,
                    Scale = 4,
                    Value = gst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_eft_end_of_day_v2] @site_id, @start_dt, @gl_code, @item_name, @report_section, @unit, @rate, @total, @gst", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_eft_end_of_day_v3Async(string charge_item_id, short? site_id, DateTime? start_datetime, string gl_code, string item_name, int? report_section, int? unit, string rate, int? total, string gst, string group_description, short? calculation_method_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "charge_item_id",
                    Size = 18,
                    Value = charge_item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 10,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 60,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "report_section",
                    Value = report_section ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unit",
                    Value = unit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rate",
                    Size = 18,
                    Value = rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "total",
                    Value = total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gst",
                    Size = 18,
                    Value = gst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "group_description",
                    Size = 30,
                    Value = group_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "calculation_method_id",
                    Value = calculation_method_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_eft_end_of_day_v3] @charge_item_id, @site_id, @start_datetime, @gl_code, @item_name, @report_section, @unit, @rate, @total, @gst, @group_description, @calculation_method_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_eft_end_of_day_v5Async(string charge_item_id, short? site_id, DateTime? start_datetime, string gl_code, string item_name, int? report_section, int? unit, string rate, int? total, string gst, string group_description, short? calculation_method_id, string sweep_frequency, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "charge_item_id",
                    Size = 18,
                    Value = charge_item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 10,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_name",
                    Size = 60,
                    Value = item_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "report_section",
                    Value = report_section ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unit",
                    Value = unit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rate",
                    Size = 18,
                    Value = rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "total",
                    Value = total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gst",
                    Size = 18,
                    Value = gst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "group_description",
                    Size = 30,
                    Value = group_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "calculation_method_id",
                    Value = calculation_method_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "sweep_frequency",
                    Size = 1,
                    Value = sweep_frequency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_eft_end_of_day_v5] @charge_item_id, @site_id, @start_datetime, @gl_code, @item_name, @report_section, @unit, @rate, @total, @gst, @group_description, @calculation_method_id, @sweep_frequency, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_eft_gl_mappingsAsync(string feeline_gl_code, string feeline_gst_gl_code, string maxgaming_gl_code, string maxgaming_gst_gl_code, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "feeline_gl_code",
                    Size = 5,
                    Value = feeline_gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "feeline_gst_gl_code",
                    Size = 5,
                    Value = feeline_gst_gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "maxgaming_gl_code",
                    Size = 5,
                    Value = maxgaming_gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "maxgaming_gst_gl_code",
                    Size = 5,
                    Value = maxgaming_gst_gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_eft_gl_mappings] @feeline_gl_code, @feeline_gst_gl_code, @maxgaming_gl_code, @maxgaming_gst_gl_code, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_eft_misc_transactionAsync(short? site_id, int? id, DateTime? log_date, DateTime? trans_date, DateTime? ref_date, string gl_code, decimal? amount1, decimal? amount2, string desc2, string desc1, string desc3, string desc4, int? number1, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "log_date",
                    Value = log_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_date",
                    Value = trans_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ref_date",
                    Value = ref_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 5,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount1",
                    Precision = 11,
                    Scale = 2,
                    Value = amount1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount2",
                    Precision = 12,
                    Scale = 2,
                    Value = amount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "desc2",
                    Size = 50,
                    Value = desc2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc1",
                    Size = 100,
                    Value = desc1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc3",
                    Size = 50,
                    Value = desc3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc4",
                    Size = 50,
                    Value = desc4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "number1",
                    Value = number1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_eft_misc_transaction] @site_id, @id, @log_date, @trans_date, @ref_date, @gl_code, @amount1, @amount2, @desc2, @desc1, @desc3, @desc4, @number1", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_eft_misc_transaction_v3Async(short? site_id, int? id, DateTime? log_date, DateTime? trans_date, DateTime? ref_date, string gl_code, decimal? amount1, decimal? amount2, string desc1, string desc2, string desc3, string desc4, int? number1, int? egm_serial_number, decimal? ticket_number, string bank_account_name, string bank_account_bsb, string bank_account_number, string desc5, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "log_date",
                    Value = log_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_date",
                    Value = trans_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ref_date",
                    Value = ref_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gl_code",
                    Size = 5,
                    Value = gl_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount1",
                    Precision = 11,
                    Scale = 2,
                    Value = amount1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount2",
                    Precision = 12,
                    Scale = 2,
                    Value = amount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "desc1",
                    Size = 50,
                    Value = desc1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc2",
                    Size = 100,
                    Value = desc2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc3",
                    Size = 50,
                    Value = desc3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc4",
                    Size = 50,
                    Value = desc4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "number1",
                    Value = number1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bank_account_name",
                    Size = 30,
                    Value = bank_account_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bank_account_bsb",
                    Size = 30,
                    Value = bank_account_bsb ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bank_account_number",
                    Size = 30,
                    Value = bank_account_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc5",
                    Size = 50,
                    Value = desc5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_eft_misc_transaction_v3] @site_id, @id, @log_date, @trans_date, @ref_date, @gl_code, @amount1, @amount2, @desc1, @desc2, @desc3, @desc4, @number1, @egm_serial_number, @ticket_number, @bank_account_name, @bank_account_bsb, @bank_account_number, @desc5", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_eft_rejectionAsync(short? site_id, DateTime? log_date, DateTime? eft_date, decimal? amount, string reason, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "log_date",
                    Value = log_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "eft_date",
                    Value = eft_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 11,
                    Scale = 2,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "reason",
                    Size = 60,
                    Value = reason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_eft_rejection] @site_id, @log_date, @eft_date, @amount, @reason", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egmAsync(short? cur_site_id, int? egm_ser_num, short? template_id, int? plate_num, short? man_id, string type, string status, short? token_id, short? denom_id, short? max_games, short? cur_game, string cur_state, string protocol, string protocol_ver, string cabinet, string desc, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? poll_addr, int? tick_lim, string v_note_flg, string jt_id, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? rntl_amnt, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hopper_present, string tik_prtr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "template_id",
                    Value = template_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "plate_num",
                    Value = plate_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 8,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_game",
                    Value = cur_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_state",
                    Size = 8,
                    Value = cur_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "poll_addr",
                    Value = poll_addr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jt_id",
                    Size = 12,
                    Value = jt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rntl_amnt",
                    Value = rntl_amnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_present",
                    Size = 1,
                    Value = hopper_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_prtr_pres",
                    Size = 1,
                    Value = tik_prtr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 12,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 12,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 12,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 12,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 12,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm] @cur_site_id, @egm_ser_num, @template_id, @plate_num, @man_id, @type, @status, @token_id, @denom_id, @max_games, @cur_game, @cur_state, @protocol, @protocol_ver, @cabinet, @desc, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @poll_addr, @tick_lim, @v_note_flg, @jt_id, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @rntl_amnt, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hopper_present, @tik_prtr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_cashless_transaction_summaryResult>> update_egm_cashless_transaction_summaryAsync(short? site_id, int? egm_serial_number, short? summary_level, DateTime? transaction_datetime, short? floor, short? bank, short? position, string ssan, short? denomination_id, int? egm_cashless_transaction_type_id, decimal? cashless_credit_in, decimal? cashless_credit_out, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_cashless_transaction_type_id",
                    Value = egm_cashless_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_in",
                    Precision = 18,
                    Value = cashless_credit_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_out",
                    Precision = 18,
                    Value = cashless_credit_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_cashless_transaction_summaryResult>("EXEC @returnValue = [dbo].[update_egm_cashless_transaction_summary] @site_id, @egm_serial_number, @summary_level, @transaction_datetime, @floor, @bank, @position, @ssan, @denomination_id, @egm_cashless_transaction_type_id, @cashless_credit_in, @cashless_credit_out", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_clearanceAsync(short? site_id, string clearance_type, DateTime? start_datetime, int? egm_serial_number, DateTime? egm_config_datetime, string money_box_number, string clearance_status, DateTime? end_datetime, DateTime? last_entry_datetime, DateTime? logged_datetime, string comments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_type",
                    Size = 30,
                    Value = clearance_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_datetime",
                    Value = egm_config_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "money_box_number",
                    Size = 30,
                    Value = money_box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_status",
                    Size = 30,
                    Value = clearance_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "end_datetime",
                    Value = end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_entry_datetime",
                    Value = last_entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_clearance] @site_id, @clearance_type, @start_datetime, @egm_serial_number, @egm_config_datetime, @money_box_number, @clearance_status, @end_datetime, @last_entry_datetime, @logged_datetime, @comments", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_clearance_entryAsync(short? site_id, DateTime? entry_datetime, string entry_type, int? egm_serial_number, string clearance_type, DateTime? clearance_start_datetime, DateTime? reporting_datetime, DateTime? egm_config_datetime, string money_box_number, decimal? ticket_number, int? exp_stroke_cnt, int? exp_turnover_amt, int? exp_wins_amt, int? exp_cancelled_credits_amt, int? exp_hopper_fills_amt, int? exp_cents_in_amt, int? exp_cents_out_amt, int? exp_coins_in_cnt, int? exp_coins_out_cnt, int? exp_cashless_credit_in_amt, int? exp_cashless_credit_out_amt, int? exp_coins_to_dropbucket_amt, int? exp_coins_to_dropbucket_cnt, int? exp_notes_in_amt, int? exp_notes_in_cnt, int? exp_notes_in_cnt_5, int? exp_notes_in_cnt_10, int? exp_notes_in_cnt_20, int? exp_notes_in_cnt_50, int? exp_notes_in_cnt_100, int? exp_short_pays_amt, int? exp_jackpots_amt, int? exp_sap_wins_amt, int? exp_lp_wins_amt, int? exp_residual_turnover_amt, int? exp_residual_wins_amt, int? exp_ticket_printer_out_amt, int? exp_gaming_cheques_amt, int? act_cancelled_credits_amt, int? act_hopper_fills_amt, int? act_coins_to_dropbucket_amt, int? act_coins_to_dropbucket_cnt, int? act_notes_in_amt, int? act_notes_in_cnt, int? act_notes_in_cnt_5, int? act_notes_in_cnt_10, int? act_notes_in_cnt_20, int? act_notes_in_cnt_50, int? act_notes_in_cnt_100, int? act_short_pays_amt, int? act_jackpots_amt, int? act_sap_wins_amt, int? act_lp_wins_amt, int? spare_1, int? spare_2, int? spare_3, int? spare_4, int? spare_5, DateTime? logged_datetime, string comments, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 30,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_type",
                    Size = 30,
                    Value = clearance_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "reporting_datetime",
                    Value = reporting_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_config_datetime",
                    Value = egm_config_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "money_box_number",
                    Size = 30,
                    Value = money_box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "exp_stroke_cnt",
                    Value = exp_stroke_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_turnover_amt",
                    Value = exp_turnover_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_wins_amt",
                    Value = exp_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cancelled_credits_amt",
                    Value = exp_cancelled_credits_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_hopper_fills_amt",
                    Value = exp_hopper_fills_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cents_in_amt",
                    Value = exp_cents_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cents_out_amt",
                    Value = exp_cents_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_in_cnt",
                    Value = exp_coins_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_out_cnt",
                    Value = exp_coins_out_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cashless_credit_in_amt",
                    Value = exp_cashless_credit_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_cashless_credit_out_amt",
                    Value = exp_cashless_credit_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_to_dropbucket_amt",
                    Value = exp_coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_coins_to_dropbucket_cnt",
                    Value = exp_coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_amt",
                    Value = exp_notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt",
                    Value = exp_notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_5",
                    Value = exp_notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_10",
                    Value = exp_notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_20",
                    Value = exp_notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_50",
                    Value = exp_notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_notes_in_cnt_100",
                    Value = exp_notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_short_pays_amt",
                    Value = exp_short_pays_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_jackpots_amt",
                    Value = exp_jackpots_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_sap_wins_amt",
                    Value = exp_sap_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_lp_wins_amt",
                    Value = exp_lp_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_residual_turnover_amt",
                    Value = exp_residual_turnover_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_residual_wins_amt",
                    Value = exp_residual_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_ticket_printer_out_amt",
                    Value = exp_ticket_printer_out_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "exp_gaming_cheques_amt",
                    Value = exp_gaming_cheques_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_cancelled_credits_amt",
                    Value = act_cancelled_credits_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_hopper_fills_amt",
                    Value = act_hopper_fills_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_coins_to_dropbucket_amt",
                    Value = act_coins_to_dropbucket_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_coins_to_dropbucket_cnt",
                    Value = act_coins_to_dropbucket_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_amt",
                    Value = act_notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt",
                    Value = act_notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_5",
                    Value = act_notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_10",
                    Value = act_notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_20",
                    Value = act_notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_50",
                    Value = act_notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_notes_in_cnt_100",
                    Value = act_notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_short_pays_amt",
                    Value = act_short_pays_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_jackpots_amt",
                    Value = act_jackpots_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_sap_wins_amt",
                    Value = act_sap_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "act_lp_wins_amt",
                    Value = act_lp_wins_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_clearance_entry] @site_id, @entry_datetime, @entry_type, @egm_serial_number, @clearance_type, @clearance_start_datetime, @reporting_datetime, @egm_config_datetime, @money_box_number, @ticket_number, @exp_stroke_cnt, @exp_turnover_amt, @exp_wins_amt, @exp_cancelled_credits_amt, @exp_hopper_fills_amt, @exp_cents_in_amt, @exp_cents_out_amt, @exp_coins_in_cnt, @exp_coins_out_cnt, @exp_cashless_credit_in_amt, @exp_cashless_credit_out_amt, @exp_coins_to_dropbucket_amt, @exp_coins_to_dropbucket_cnt, @exp_notes_in_amt, @exp_notes_in_cnt, @exp_notes_in_cnt_5, @exp_notes_in_cnt_10, @exp_notes_in_cnt_20, @exp_notes_in_cnt_50, @exp_notes_in_cnt_100, @exp_short_pays_amt, @exp_jackpots_amt, @exp_sap_wins_amt, @exp_lp_wins_amt, @exp_residual_turnover_amt, @exp_residual_wins_amt, @exp_ticket_printer_out_amt, @exp_gaming_cheques_amt, @act_cancelled_credits_amt, @act_hopper_fills_amt, @act_coins_to_dropbucket_amt, @act_coins_to_dropbucket_cnt, @act_notes_in_amt, @act_notes_in_cnt, @act_notes_in_cnt_5, @act_notes_in_cnt_10, @act_notes_in_cnt_20, @act_notes_in_cnt_50, @act_notes_in_cnt_100, @act_short_pays_amt, @act_jackpots_amt, @act_sap_wins_amt, @act_lp_wins_amt, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @logged_datetime, @comments, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_device_configAsync(int? egm_serial_number, short? device_type_id, string configuration_string, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "device_type_id",
                    Value = device_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "configuration_string",
                    Size = 50,
                    Value = configuration_string ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_device_config] @egm_serial_number, @device_type_id, @configuration_string, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_devicesAsync(short? cur_site_id, int? egm_serial_number, string note_acceptor_present, string touch_screen_present, string coin_acceptor_present, string hopper_present, string ticket_printer_present, string ticket_in_device_present, string aux_display_device_present, string mechanical_meters_present, string denom_hot_switching_enabled, string var_hot_switching_enabled, string shared_prog_jackpots_enabled, string player_tracking_installed, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "note_acceptor_present",
                    Size = 1,
                    Value = note_acceptor_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "touch_screen_present",
                    Size = 1,
                    Value = touch_screen_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptor_present",
                    Size = 1,
                    Value = coin_acceptor_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_present",
                    Size = 1,
                    Value = hopper_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_printer_present",
                    Size = 1,
                    Value = ticket_printer_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_in_device_present",
                    Size = 1,
                    Value = ticket_in_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "aux_display_device_present",
                    Size = 1,
                    Value = aux_display_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mechanical_meters_present",
                    Size = 1,
                    Value = mechanical_meters_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "denom_hot_switching_enabled",
                    Size = 1,
                    Value = denom_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "var_hot_switching_enabled",
                    Size = 1,
                    Value = var_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "shared_prog_jackpots_enabled",
                    Size = 1,
                    Value = shared_prog_jackpots_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "player_tracking_installed",
                    Size = 1,
                    Value = player_tracking_installed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_devices] @cur_site_id, @egm_serial_number, @note_acceptor_present, @touch_screen_present, @coin_acceptor_present, @hopper_present, @ticket_printer_present, @ticket_in_device_present, @aux_display_device_present, @mechanical_meters_present, @denom_hot_switching_enabled, @var_hot_switching_enabled, @shared_prog_jackpots_enabled, @player_tracking_installed, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_gameAsync(int? egm_ser_num, short? gme_num, int? gme_type_id, int? curr_var_num, short? jp_grp_id, string enbld_flag, short? jp_site, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gme_num",
                    Value = gme_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "gme_type_id",
                    Value = gme_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "curr_var_num",
                    Value = curr_var_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jp_grp_id",
                    Value = jp_grp_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "enbld_flag",
                    Size = 1,
                    Value = enbld_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "jp_site",
                    Value = jp_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_game] @egm_ser_num, @gme_num, @gme_type_id, @curr_var_num, @jp_grp_id, @enbld_flag, @jp_site", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_game_bet_statisticsAsync(short? site_id, short? manufacturer_id, int? ssan, int? game_version_number, DateTime? start_datetime, short? denomination_id, int? max_lines, int? max_bet_per_line, int? game_bet_factor_a, int? game_bet_factor_b, int? number_of_elements, int? element_size, string bet_count_array_a, string bet_count_array_b, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "manufacturer_id",
                    Value = manufacturer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_version_number",
                    Value = game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_lines",
                    Value = max_lines ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_bet_per_line",
                    Value = max_bet_per_line ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_bet_factor_a",
                    Value = game_bet_factor_a ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_bet_factor_b",
                    Value = game_bet_factor_b ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "number_of_elements",
                    Value = number_of_elements ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "element_size",
                    Value = element_size ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bet_count_array_a",
                    Size = 250,
                    Value = bet_count_array_a ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bet_count_array_b",
                    Size = 250,
                    Value = bet_count_array_b ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_game_bet_statistics] @site_id, @manufacturer_id, @ssan, @game_version_number, @start_datetime, @denomination_id, @max_lines, @max_bet_per_line, @game_bet_factor_a, @game_bet_factor_b, @number_of_elements, @element_size, @bet_count_array_a, @bet_count_array_b, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_game_configurationAsync(short? site_id, int? egm_serial_number, DateTime? start_datetime, int? ssan, int? game_version_number, short? denomination_id, short? floor, short? bank, short? position, string site_opened, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_version_number",
                    Value = game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_opened",
                    Size = 1,
                    Value = site_opened ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_game_configuration] @site_id, @egm_serial_number, @start_datetime, @ssan, @game_version_number, @denomination_id, @floor, @bank, @position, @site_opened", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_game_variationAsync(short? site_id, int? egm_serial_number, short? game_number, int? current_variation, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_number",
                    Value = game_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "current_variation",
                    Value = current_variation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_game_variation] @site_id, @egm_serial_number, @game_number, @current_variation, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_limitsAsync(short? cur_site_id, int? egm_serial_number, int? max_rtp, int? min_rtp, int? max_standard_deviation, int? max_lines, int? max_bet_per_play, int? max_np_win, int? max_progressive_win, int? max_ect, int? max_denomination, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_rtp",
                    Value = max_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_rtp",
                    Value = min_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_standard_deviation",
                    Value = max_standard_deviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_lines",
                    Value = max_lines ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_bet_per_play",
                    Value = max_bet_per_play ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_np_win",
                    Value = max_np_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_progressive_win",
                    Value = max_progressive_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_ect",
                    Value = max_ect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_denomination",
                    Value = max_denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_limits] @cur_site_id, @egm_serial_number, @max_rtp, @min_rtp, @max_standard_deviation, @max_lines, @max_bet_per_play, @max_np_win, @max_progressive_win, @max_ect, @max_denomination, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_max_meterAsync(int? egm_ser_num, int? max_meter_value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_meter_value",
                    Value = max_meter_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_max_meter] @egm_ser_num, @max_meter_value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_meters_limitAsync(string type, int? stroke, int? turnover, int? wins, int? cancel_credit, int? cents_in, int? cents_out, int? hopper_refill, int? token_in, int? token_out, int? token_to_cashbox, int? cashless_credit_in, int? cashless_credit_out, int? note_acceptor_cents_in, int? notes_in, int? total_5_notes_in, int? total_10_notes_in, int? total_20_notes_in, int? total_50_notes_in, int? total_100_notes_in, int? reserved_1, int? reserved_2, int? reserved_3, int? sap_wins, int? lp_wins, int? res_cred_rem_turnover, int? res_cred_rem_wins, int? cash_ticket_printer_out, int? game_turnover, int? game_stroke, int? game_wins, int? game_progressive_win, int? updated_stroke, int? updated_turnover, int? updated_wins, int? jackpot_cont, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cancel_credit",
                    Value = cancel_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_refill",
                    Value = hopper_refill ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_in",
                    Value = token_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_out",
                    Value = token_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_to_cashbox",
                    Value = token_to_cashbox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_in",
                    Value = cashless_credit_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_out",
                    Value = cashless_credit_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "note_acceptor_cents_in",
                    Value = note_acceptor_cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in",
                    Value = notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_5_notes_in",
                    Value = total_5_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_10_notes_in",
                    Value = total_10_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_20_notes_in",
                    Value = total_20_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_50_notes_in",
                    Value = total_50_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_100_notes_in",
                    Value = total_100_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserved_1",
                    Value = reserved_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserved_2",
                    Value = reserved_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserved_3",
                    Value = reserved_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "res_cred_rem_turnover",
                    Value = res_cred_rem_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "res_cred_rem_wins",
                    Value = res_cred_rem_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_ticket_printer_out",
                    Value = cash_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_turnover",
                    Value = game_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_stroke",
                    Value = game_stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_wins",
                    Value = game_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_progressive_win",
                    Value = game_progressive_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "updated_stroke",
                    Value = updated_stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "updated_turnover",
                    Value = updated_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "updated_wins",
                    Value = updated_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_cont",
                    Value = jackpot_cont ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_meters_limit] @type, @stroke, @turnover, @wins, @cancel_credit, @cents_in, @cents_out, @hopper_refill, @token_in, @token_out, @token_to_cashbox, @cashless_credit_in, @cashless_credit_out, @note_acceptor_cents_in, @notes_in, @total_5_notes_in, @total_10_notes_in, @total_20_notes_in, @total_50_notes_in, @total_100_notes_in, @reserved_1, @reserved_2, @reserved_3, @sap_wins, @lp_wins, @res_cred_rem_turnover, @res_cred_rem_wins, @cash_ticket_printer_out, @game_turnover, @game_stroke, @game_wins, @game_progressive_win, @updated_stroke, @updated_turnover, @updated_wins, @jackpot_cont", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_meters_limit_v2Async(string type, int? stroke, int? turnover, int? wins, int? cancel_credit, int? cents_in, int? cents_out, int? hopper_refill, int? token_in, int? token_out, int? token_to_cashbox, int? cashless_credit_in, int? cashless_credit_out, int? note_acceptor_cents_in, int? notes_in, int? total_5_notes_in, int? total_10_notes_in, int? total_20_notes_in, int? total_50_notes_in, int? total_100_notes_in, int? reserved_1, int? reserved_2, int? reserved_3, int? sap_wins, int? lp_wins, int? res_cred_rem_turnover, int? res_cred_rem_wins, int? cash_ticket_printer_out, int? game_turnover, int? game_stroke, int? game_wins, int? game_progressive_win, int? updated_stroke, int? updated_turnover, int? updated_wins, int? jackpot_cont, int? egm_cash_ticket_in_limit, int? egm_pid_accessed_limit, int? egm_games_won_limit, int? rejected_enabled_notes_limit, int? egm_gamble_turnover_limit, int? egm_gamble_wins_limit, int? egm_game_games_won, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cancel_credit",
                    Value = cancel_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_in",
                    Value = cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cents_out",
                    Value = cents_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_refill",
                    Value = hopper_refill ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_in",
                    Value = token_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_out",
                    Value = token_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "token_to_cashbox",
                    Value = token_to_cashbox ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_in",
                    Value = cashless_credit_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_credit_out",
                    Value = cashless_credit_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "note_acceptor_cents_in",
                    Value = note_acceptor_cents_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in",
                    Value = notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_5_notes_in",
                    Value = total_5_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_10_notes_in",
                    Value = total_10_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_20_notes_in",
                    Value = total_20_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_50_notes_in",
                    Value = total_50_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_100_notes_in",
                    Value = total_100_notes_in ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserved_1",
                    Value = reserved_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserved_2",
                    Value = reserved_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reserved_3",
                    Value = reserved_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "res_cred_rem_turnover",
                    Value = res_cred_rem_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "res_cred_rem_wins",
                    Value = res_cred_rem_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_ticket_printer_out",
                    Value = cash_ticket_printer_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_turnover",
                    Value = game_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_stroke",
                    Value = game_stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_wins",
                    Value = game_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_progressive_win",
                    Value = game_progressive_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "updated_stroke",
                    Value = updated_stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "updated_turnover",
                    Value = updated_turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "updated_wins",
                    Value = updated_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jackpot_cont",
                    Value = jackpot_cont ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_cash_ticket_in_limit",
                    Value = egm_cash_ticket_in_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_pid_accessed_limit",
                    Value = egm_pid_accessed_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_games_won_limit",
                    Value = egm_games_won_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rejected_enabled_notes_limit",
                    Value = rejected_enabled_notes_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_gamble_turnover_limit",
                    Value = egm_gamble_turnover_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_gamble_wins_limit",
                    Value = egm_gamble_wins_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_game_games_won",
                    Value = egm_game_games_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_meters_limit_v2] @type, @stroke, @turnover, @wins, @cancel_credit, @cents_in, @cents_out, @hopper_refill, @token_in, @token_out, @token_to_cashbox, @cashless_credit_in, @cashless_credit_out, @note_acceptor_cents_in, @notes_in, @total_5_notes_in, @total_10_notes_in, @total_20_notes_in, @total_50_notes_in, @total_100_notes_in, @reserved_1, @reserved_2, @reserved_3, @sap_wins, @lp_wins, @res_cred_rem_turnover, @res_cred_rem_wins, @cash_ticket_printer_out, @game_turnover, @game_stroke, @game_wins, @game_progressive_win, @updated_stroke, @updated_turnover, @updated_wins, @jackpot_cont, @egm_cash_ticket_in_limit, @egm_pid_accessed_limit, @egm_games_won_limit, @rejected_enabled_notes_limit, @egm_gamble_turnover_limit, @egm_gamble_wins_limit, @egm_game_games_won, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_network_limitAsync(int? id, string description, int? max_denomination, int? max_rtp, int? min_rtp, int? max_standard_deviation, int? max_lines, int? max_bet_per_play, int? max_np_win, int? max_progressive_win, int? max_ect, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "max_denomination",
                    Value = max_denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_rtp",
                    Value = max_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_rtp",
                    Value = min_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_standard_deviation",
                    Value = max_standard_deviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_lines",
                    Value = max_lines ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_bet_per_play",
                    Value = max_bet_per_play ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_np_win",
                    Value = max_np_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_progressive_win",
                    Value = max_progressive_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_ect",
                    Value = max_ect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_network_limit] @id, @description, @max_denomination, @max_rtp, @min_rtp, @max_standard_deviation, @max_lines, @max_bet_per_play, @max_np_win, @max_progressive_win, @max_ect, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_parametersAsync(short? site_id, int? egm_serial_number, int? base_game_version_number, string software_set_app_number, short? denomination_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_game_version_number",
                    Value = base_game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "software_set_app_number",
                    Size = 10,
                    Value = software_set_app_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_parameters] @site_id, @egm_serial_number, @base_game_version_number, @software_set_app_number, @denomination_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_services_loopAsync(short? site_id, int? egm_serial_number, string loop_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 10,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_services_loop] @site_id, @egm_serial_number, @loop_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_services_loop_v2Async(short? site_id, int? egm_serial_number, string loop_name, int? device_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 10,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "device_id",
                    Value = device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_services_loop_v2] @site_id, @egm_serial_number, @loop_name, @device_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_templateAsync(short? id, string cabinet, short? man_id, string type, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? denom_id, short? token_id, int? tick_lim, string v_note_flg, short? max_games, string protocol, string protocol_ver, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hop_pres, string tik_ptr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hop_pres",
                    Size = 1,
                    Value = hop_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_ptr_pres",
                    Size = 1,
                    Value = tik_ptr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 30,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 30,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 30,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 30,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 30,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_template] @id, @cabinet, @man_id, @type, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @denom_id, @token_id, @tick_lim, @v_note_flg, @max_games, @protocol, @protocol_ver, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hop_pres, @tik_ptr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_template_V2Async(short? id, string cabinet, short? man_id, string type, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? denom_id, short? token_id, int? tick_lim, string v_note_flg, short? max_games, string protocol, string protocol_ver, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hop_pres, string tik_ptr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, string meters_limit_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hop_pres",
                    Size = 1,
                    Value = hop_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_ptr_pres",
                    Size = 1,
                    Value = tik_ptr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 30,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 30,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 30,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 30,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 30,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "meters_limit_type",
                    Size = 30,
                    Value = meters_limit_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_template_V2] @id, @cabinet, @man_id, @type, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @denom_id, @token_id, @tick_lim, @v_note_flg, @max_games, @protocol, @protocol_ver, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hop_pres, @tik_ptr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @meters_limit_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_template_V3Async(short? id, string cabinet, short? man_id, string type, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? denom_id, short? token_id, int? tick_lim, string v_note_flg, short? max_games, string protocol, string protocol_ver, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hop_pres, string tik_ptr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, string meters_limit_type, int? np_win_payout_threshold, int? sap_win_payout_threshold, string ticket_in_device_present, string aux_display_device_present, string mechanical_meters_present, string denom_hot_switching_enabled, string var_hot_switching_enabled, string shared_prog_jackpots_enabled, string userid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hop_pres",
                    Size = 1,
                    Value = hop_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_ptr_pres",
                    Size = 1,
                    Value = tik_ptr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 30,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 30,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 30,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 30,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 30,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "meters_limit_type",
                    Size = 30,
                    Value = meters_limit_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "np_win_payout_threshold",
                    Value = np_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_win_payout_threshold",
                    Value = sap_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_in_device_present",
                    Size = 1,
                    Value = ticket_in_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "aux_display_device_present",
                    Size = 1,
                    Value = aux_display_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mechanical_meters_present",
                    Size = 1,
                    Value = mechanical_meters_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "denom_hot_switching_enabled",
                    Size = 1,
                    Value = denom_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "var_hot_switching_enabled",
                    Size = 1,
                    Value = var_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "shared_prog_jackpots_enabled",
                    Size = 1,
                    Value = shared_prog_jackpots_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "userid",
                    Size = 10,
                    Value = userid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_template_V3] @id, @cabinet, @man_id, @type, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @denom_id, @token_id, @tick_lim, @v_note_flg, @max_games, @protocol, @protocol_ver, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hop_pres, @tik_ptr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @meters_limit_type, @np_win_payout_threshold, @sap_win_payout_threshold, @ticket_in_device_present, @aux_display_device_present, @mechanical_meters_present, @denom_hot_switching_enabled, @var_hot_switching_enabled, @shared_prog_jackpots_enabled, @userid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_transactionAsync(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, string cancelled, int? amount, short? pool_site_id, int? pool_num, string user_id, int? player_id, string comment_1, string comment_2, string comment_3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 8,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 8,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled",
                    Size = 1,
                    Value = cancelled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_transaction] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @cancelled, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_transaction_statusAsync(short? site_id, decimal? tick_num, string status, DateTime? last_mod, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_transaction_status] @site_id, @tick_num, @status, @last_mod, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v10Result>> update_egm_transaction_v10Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, int? cash_amount, int? cheque_amount, string cheque_number, short? source_device_type, decimal? barcode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "source_device_type",
                    Value = source_device_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barcode",
                    Precision = 18,
                    Value = barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v10Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v10] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location, @cash_amount, @cheque_amount, @cheque_number, @source_device_type, @barcode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v11Result>> update_egm_transaction_v11Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, int? cash_amount, int? cheque_amount, string cheque_number, short? source_device_type, decimal? barcode, int? CardID, string EmployeeFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "source_device_type",
                    Value = source_device_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barcode",
                    Precision = 18,
                    Value = barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CardID",
                    Value = CardID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeFlag",
                    Size = 1,
                    Value = EmployeeFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v11Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v11] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location, @cash_amount, @cheque_amount, @cheque_number, @source_device_type, @barcode, @CardID, @EmployeeFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v12Result>> update_egm_transaction_v12Async(short? site_id, decimal? ticket_number, int? egm_serial_number, DateTime? transaction_datetime, string transaction_type, string new_trans_status, DateTime? last_action_datetime, DateTime? ticket_printed_datetime, int? amount, short? pool_site_id, int? pool_number, string user_id, string player_id, string employee_id, decimal? linked_ticket_number, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, int? cash_amount, int? cheque_amount, string cheque_number, short? source_device_type, decimal? barcode, int? CardID, string EmployeeFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_type",
                    Size = 20,
                    Value = transaction_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_trans_status",
                    Size = 20,
                    Value = new_trans_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_datetime",
                    Value = last_action_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_printed_datetime",
                    Value = ticket_printed_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_ticket_number",
                    Precision = 12,
                    Value = linked_ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "source_device_type",
                    Value = source_device_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barcode",
                    Precision = 18,
                    Value = barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CardID",
                    Value = CardID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeFlag",
                    Size = 1,
                    Value = EmployeeFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v12Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v12] @site_id, @ticket_number, @egm_serial_number, @transaction_datetime, @transaction_type, @new_trans_status, @last_action_datetime, @ticket_printed_datetime, @amount, @pool_site_id, @pool_number, @user_id, @player_id, @employee_id, @linked_ticket_number, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location, @cash_amount, @cheque_amount, @cheque_number, @source_device_type, @barcode, @CardID, @EmployeeFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_transaction_v2Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, string cancelled, int? amount, short? pool_site_id, int? pool_num, string user_id, int? player_id, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 8,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 8,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cancelled",
                    Size = 1,
                    Value = cancelled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_transaction_v2] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @cancelled, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v3Result>> update_egm_transaction_v3Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v3Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v3] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v4Result>> update_egm_transaction_v4Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v4Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v4] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v5Result>> update_egm_transaction_v5Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v5Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v5] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v6Result>> update_egm_transaction_v6Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, int? cash_amount, int? cheque_amount, string cheque_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v6Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v6] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location, @cash_amount, @cheque_amount, @cheque_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v7Result>> update_egm_transaction_v7Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, int? cash_amount, int? cheque_amount, string cheque_number, short? source_device_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "source_device_type",
                    Value = source_device_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v7Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v7] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location, @cash_amount, @cheque_amount, @cheque_number, @source_device_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v8Result>> update_egm_transaction_v8Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, int? cash_amount, int? cheque_amount, string cheque_number, short? source_device_type, decimal? barcode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "source_device_type",
                    Value = source_device_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barcode",
                    Precision = 18,
                    Value = barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v8Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v8] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location, @cash_amount, @cheque_amount, @cheque_number, @source_device_type, @barcode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_egm_transaction_v9Result>> update_egm_transaction_v9Async(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, DateTime? last_dt, DateTime? tick_dt, int? amount, short? pool_site_id, int? pool_num, string user_id, string player_id, string employee_id, decimal? linked_tick_num, string manually_created, string comment_1, string comment_2, string comment_3, string comment_4, string comment_5, string location, int? cash_amount, int? cheque_amount, string cheque_number, short? source_device_type, decimal? barcode, int? CardID, string EmployeeFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_dt",
                    Value = last_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tick_dt",
                    Value = tick_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 18,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_tick_num",
                    Precision = 12,
                    Value = linked_tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "manually_created",
                    Size = 1,
                    Value = manually_created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 50,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 50,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_4",
                    Size = 100,
                    Value = comment_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_5",
                    Size = 100,
                    Value = comment_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 20,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_number",
                    Size = 15,
                    Value = cheque_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "source_device_type",
                    Value = source_device_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barcode",
                    Precision = 18,
                    Value = barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CardID",
                    Value = CardID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeFlag",
                    Size = 1,
                    Value = EmployeeFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_egm_transaction_v9Result>("EXEC @returnValue = [dbo].[update_egm_transaction_v9] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat, @last_dt, @tick_dt, @amount, @pool_site_id, @pool_num, @user_id, @player_id, @employee_id, @linked_tick_num, @manually_created, @comment_1, @comment_2, @comment_3, @comment_4, @comment_5, @location, @cash_amount, @cheque_amount, @cheque_number, @source_device_type, @barcode, @CardID, @EmployeeFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_turbo_wedgeAsync(int? egm_serial_number, short? site_id, int? turbo_wedge_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "turbo_wedge_id",
                    Value = turbo_wedge_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_turbo_wedge] @egm_serial_number, @site_id, @turbo_wedge_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_turbo_wedge_v2Async(int? egm_serial_number, short? site_id, int? turbo_wedge_id, string toc_instance_name, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "turbo_wedge_id",
                    Value = turbo_wedge_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "toc_instance_name",
                    Size = 10,
                    Value = toc_instance_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_turbo_wedge_v2] @egm_serial_number, @site_id, @turbo_wedge_id, @toc_instance_name, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_v2Async(short? cur_site_id, int? egm_ser_num, short? template_id, int? plate_num, short? man_id, string type, string status, short? token_id, short? denom_id, short? max_games, short? cur_game, string cur_state, string protocol, string protocol_ver, string cabinet, string desc, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? poll_addr, int? tick_lim, string v_note_flg, string jt_id, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? rntl_amnt, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hopper_present, string tik_prtr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, string egm_meters_limit_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "template_id",
                    Value = template_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "plate_num",
                    Value = plate_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 8,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_game",
                    Value = cur_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_state",
                    Size = 8,
                    Value = cur_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "poll_addr",
                    Value = poll_addr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jt_id",
                    Size = 12,
                    Value = jt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rntl_amnt",
                    Value = rntl_amnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_present",
                    Size = 1,
                    Value = hopper_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_prtr_pres",
                    Size = 1,
                    Value = tik_prtr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 12,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 12,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 12,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 12,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 12,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "egm_meters_limit_type",
                    Size = 30,
                    Value = egm_meters_limit_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_v2] @cur_site_id, @egm_ser_num, @template_id, @plate_num, @man_id, @type, @status, @token_id, @denom_id, @max_games, @cur_game, @cur_state, @protocol, @protocol_ver, @cabinet, @desc, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @poll_addr, @tick_lim, @v_note_flg, @jt_id, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @rntl_amnt, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hopper_present, @tik_prtr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @egm_meters_limit_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_v3Async(short? cur_site_id, int? egm_ser_num, short? template_id, int? plate_num, short? man_id, string type, string status, short? token_id, short? denom_id, short? max_games, short? cur_game, string cur_state, string protocol, string protocol_ver, string cabinet, string desc, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? poll_addr, int? tick_lim, string v_note_flg, string jt_id, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? rntl_amnt, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hopper_present, string tik_prtr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, string egm_meters_limit_type, int? np_win_payout_threshold, int? sap_win_payout_threshold, string ticket_in_device_present, string aux_display_device_present, string mechanical_meters_present, string denom_hot_switching_enabled, string var_hot_switching_enabled, string shared_prog_jackpots_enabled, int? max_rtp, int? min_rtp, int? max_standard_deviation, int? max_lines, int? max_bet_per_play, int? max_np_win, int? max_progressive_win, int? max_ect, int? max_denomination, int? player_info_display, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "template_id",
                    Value = template_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "plate_num",
                    Value = plate_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 8,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_game",
                    Value = cur_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_state",
                    Size = 8,
                    Value = cur_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "poll_addr",
                    Value = poll_addr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jt_id",
                    Size = 12,
                    Value = jt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rntl_amnt",
                    Value = rntl_amnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_present",
                    Size = 1,
                    Value = hopper_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_prtr_pres",
                    Size = 1,
                    Value = tik_prtr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 12,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 12,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 12,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 12,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 12,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "egm_meters_limit_type",
                    Size = 30,
                    Value = egm_meters_limit_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "np_win_payout_threshold",
                    Value = np_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_win_payout_threshold",
                    Value = sap_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_in_device_present",
                    Size = 1,
                    Value = ticket_in_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "aux_display_device_present",
                    Size = 1,
                    Value = aux_display_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mechanical_meters_present",
                    Size = 1,
                    Value = mechanical_meters_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "denom_hot_switching_enabled",
                    Size = 1,
                    Value = denom_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "var_hot_switching_enabled",
                    Size = 1,
                    Value = var_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "shared_prog_jackpots_enabled",
                    Size = 1,
                    Value = shared_prog_jackpots_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_rtp",
                    Value = max_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_rtp",
                    Value = min_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_standard_deviation",
                    Value = max_standard_deviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_lines",
                    Value = max_lines ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_bet_per_play",
                    Value = max_bet_per_play ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_np_win",
                    Value = max_np_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_progressive_win",
                    Value = max_progressive_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_ect",
                    Value = max_ect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_denomination",
                    Value = max_denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "player_info_display",
                    Value = player_info_display ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_v3] @cur_site_id, @egm_ser_num, @template_id, @plate_num, @man_id, @type, @status, @token_id, @denom_id, @max_games, @cur_game, @cur_state, @protocol, @protocol_ver, @cabinet, @desc, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @poll_addr, @tick_lim, @v_note_flg, @jt_id, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @rntl_amnt, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hopper_present, @tik_prtr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @egm_meters_limit_type, @np_win_payout_threshold, @sap_win_payout_threshold, @ticket_in_device_present, @aux_display_device_present, @mechanical_meters_present, @denom_hot_switching_enabled, @var_hot_switching_enabled, @shared_prog_jackpots_enabled, @max_rtp, @min_rtp, @max_standard_deviation, @max_lines, @max_bet_per_play, @max_np_win, @max_progressive_win, @max_ect, @max_denomination, @player_info_display, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_v4Async(short? cur_site_id, int? egm_ser_num, short? template_id, int? plate_num, short? man_id, string type, string status, short? token_id, short? denom_id, short? max_games, short? cur_game, string cur_state, string protocol, string protocol_ver, string cabinet, string desc, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? poll_addr, int? tick_lim, string v_note_flg, string jt_id, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? rntl_amnt, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hopper_present, string tik_prtr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, string egm_meters_limit_type, int? np_win_payout_threshold, int? sap_win_payout_threshold, string ticket_in_device_present, string aux_display_device_present, string mechanical_meters_present, string denom_hot_switching_enabled, string var_hot_switching_enabled, string shared_prog_jackpots_enabled, int? max_rtp, int? min_rtp, int? max_standard_deviation, int? max_lines, int? max_bet_per_play, int? max_np_win, int? max_progressive_win, int? max_ect, int? max_denomination, int? player_info_display, int? hopper_weight, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "template_id",
                    Value = template_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "plate_num",
                    Value = plate_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 8,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_game",
                    Value = cur_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_state",
                    Size = 8,
                    Value = cur_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "poll_addr",
                    Value = poll_addr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jt_id",
                    Size = 12,
                    Value = jt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rntl_amnt",
                    Value = rntl_amnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_present",
                    Size = 1,
                    Value = hopper_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_prtr_pres",
                    Size = 1,
                    Value = tik_prtr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 12,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 12,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 12,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 12,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 12,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_meters_limit_type",
                    Size = 30,
                    Value = egm_meters_limit_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "np_win_payout_threshold",
                    Value = np_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_win_payout_threshold",
                    Value = sap_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_in_device_present",
                    Size = 1,
                    Value = ticket_in_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "aux_display_device_present",
                    Size = 1,
                    Value = aux_display_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mechanical_meters_present",
                    Size = 1,
                    Value = mechanical_meters_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "denom_hot_switching_enabled",
                    Size = 1,
                    Value = denom_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "var_hot_switching_enabled",
                    Size = 1,
                    Value = var_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "shared_prog_jackpots_enabled",
                    Size = 1,
                    Value = shared_prog_jackpots_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_rtp",
                    Value = max_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_rtp",
                    Value = min_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_standard_deviation",
                    Value = max_standard_deviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_lines",
                    Value = max_lines ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_bet_per_play",
                    Value = max_bet_per_play ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_np_win",
                    Value = max_np_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_progressive_win",
                    Value = max_progressive_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_ect",
                    Value = max_ect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_denomination",
                    Value = max_denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "player_info_display",
                    Value = player_info_display ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_weight",
                    Value = hopper_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_v4] @cur_site_id, @egm_ser_num, @template_id, @plate_num, @man_id, @type, @status, @token_id, @denom_id, @max_games, @cur_game, @cur_state, @protocol, @protocol_ver, @cabinet, @desc, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @poll_addr, @tick_lim, @v_note_flg, @jt_id, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @rntl_amnt, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hopper_present, @tik_prtr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @egm_meters_limit_type, @np_win_payout_threshold, @sap_win_payout_threshold, @ticket_in_device_present, @aux_display_device_present, @mechanical_meters_present, @denom_hot_switching_enabled, @var_hot_switching_enabled, @shared_prog_jackpots_enabled, @max_rtp, @min_rtp, @max_standard_deviation, @max_lines, @max_bet_per_play, @max_np_win, @max_progressive_win, @max_ect, @max_denomination, @player_info_display, @hopper_weight, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_v5Async(short? cur_site_id, int? egm_ser_num, short? template_id, int? plate_num, short? man_id, string type, string status, short? token_id, short? denom_id, short? max_games, short? cur_game, string cur_state, string protocol, string protocol_ver, string cabinet, string desc, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? poll_addr, int? tick_lim, string v_note_flg, string jt_id, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? rntl_amnt, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hopper_present, string tik_prtr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, string egm_meters_limit_type, int? np_win_payout_threshold, int? sap_win_payout_threshold, string ticket_in_device_present, string aux_display_device_present, string mechanical_meters_present, string denom_hot_switching_enabled, string var_hot_switching_enabled, string shared_prog_jackpots_enabled, int? max_rtp, int? min_rtp, int? max_standard_deviation, int? max_lines, int? max_bet_per_play, int? max_np_win, int? max_progressive_win, int? max_ect, int? max_denomination, int? player_info_display, int? hopper_weight, string downloadable_games_enabled, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "template_id",
                    Value = template_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "plate_num",
                    Value = plate_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 8,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_game",
                    Value = cur_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_state",
                    Size = 8,
                    Value = cur_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "poll_addr",
                    Value = poll_addr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jt_id",
                    Size = 12,
                    Value = jt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rntl_amnt",
                    Value = rntl_amnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_present",
                    Size = 1,
                    Value = hopper_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_prtr_pres",
                    Size = 1,
                    Value = tik_prtr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 12,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 12,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 12,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 12,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 12,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "egm_meters_limit_type",
                    Size = 30,
                    Value = egm_meters_limit_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "np_win_payout_threshold",
                    Value = np_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_win_payout_threshold",
                    Value = sap_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_in_device_present",
                    Size = 1,
                    Value = ticket_in_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "aux_display_device_present",
                    Size = 1,
                    Value = aux_display_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mechanical_meters_present",
                    Size = 1,
                    Value = mechanical_meters_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "denom_hot_switching_enabled",
                    Size = 1,
                    Value = denom_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "var_hot_switching_enabled",
                    Size = 1,
                    Value = var_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "shared_prog_jackpots_enabled",
                    Size = 1,
                    Value = shared_prog_jackpots_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_rtp",
                    Value = max_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_rtp",
                    Value = min_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_standard_deviation",
                    Value = max_standard_deviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_lines",
                    Value = max_lines ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_bet_per_play",
                    Value = max_bet_per_play ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_np_win",
                    Value = max_np_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_progressive_win",
                    Value = max_progressive_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_ect",
                    Value = max_ect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_denomination",
                    Value = max_denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "player_info_display",
                    Value = player_info_display ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_weight",
                    Value = hopper_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "downloadable_games_enabled",
                    Size = 1,
                    Value = downloadable_games_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_v5] @cur_site_id, @egm_ser_num, @template_id, @plate_num, @man_id, @type, @status, @token_id, @denom_id, @max_games, @cur_game, @cur_state, @protocol, @protocol_ver, @cabinet, @desc, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @poll_addr, @tick_lim, @v_note_flg, @jt_id, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @rntl_amnt, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hopper_present, @tik_prtr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @egm_meters_limit_type, @np_win_payout_threshold, @sap_win_payout_threshold, @ticket_in_device_present, @aux_display_device_present, @mechanical_meters_present, @denom_hot_switching_enabled, @var_hot_switching_enabled, @shared_prog_jackpots_enabled, @max_rtp, @min_rtp, @max_standard_deviation, @max_lines, @max_bet_per_play, @max_np_win, @max_progressive_win, @max_ect, @max_denomination, @player_info_display, @hopper_weight, @downloadable_games_enabled, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_egm_v6Async(short? cur_site_id, int? egm_ser_num, short? template_id, int? plate_num, short? man_id, string type, string status, short? token_id, short? denom_id, short? max_games, short? cur_game, string cur_state, string protocol, string protocol_ver, string cabinet, string desc, int? high_win, int? high_credit, int? max_pay, int? drop_full, int? drop_choked, int? hop_fil, int? dbl_max, int? dbl_limit, short? poll_addr, int? tick_lim, string v_note_flg, string jt_id, string nte_acc_pres, string nte_acc_enbl, string bill_5, string bill_10, string bill_20, string bill_50, string bill_100, int? max_mtr_val, int? rntl_amnt, int? max_all_inc, int? base_g_ver, short? prog_sig_tim, string touch_scrn, string coin_acceptr, string hopper_present, string tik_prtr_pres, string play_track, string sw_set_app, string spare_1, string spare_2, string spare_3, string spare_4, string spare_5, string egm_meters_limit_type, int? np_win_payout_threshold, int? sap_win_payout_threshold, string ticket_in_device_present, string aux_display_device_present, string mechanical_meters_present, string denom_hot_switching_enabled, string var_hot_switching_enabled, string shared_prog_jackpots_enabled, int? max_rtp, int? min_rtp, int? max_standard_deviation, int? max_lines, int? max_bet_per_play, int? max_np_win, int? max_progressive_win, int? max_ect, int? max_denomination, int? player_info_display, int? hopper_weight, string downloadable_games_enabled, string user_id, int? tito_implementation_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cur_site_id",
                    Value = cur_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "template_id",
                    Value = template_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "plate_num",
                    Value = plate_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 8,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "token_id",
                    Value = token_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denom_id",
                    Value = denom_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_games",
                    Value = max_games ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_game",
                    Value = cur_game ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "cur_state",
                    Size = 8,
                    Value = cur_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol",
                    Size = 8,
                    Value = protocol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "protocol_ver",
                    Size = 8,
                    Value = protocol_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cabinet",
                    Size = 30,
                    Value = cabinet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "high_win",
                    Value = high_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "high_credit",
                    Value = high_credit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_pay",
                    Value = max_pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_full",
                    Value = drop_full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "drop_choked",
                    Value = drop_choked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hop_fil",
                    Value = hop_fil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_max",
                    Value = dbl_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dbl_limit",
                    Value = dbl_limit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "poll_addr",
                    Value = poll_addr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_lim",
                    Value = tick_lim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "v_note_flg",
                    Size = 4,
                    Value = v_note_flg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jt_id",
                    Size = 12,
                    Value = jt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_pres",
                    Size = 1,
                    Value = nte_acc_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nte_acc_enbl",
                    Size = 1,
                    Value = nte_acc_enbl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_5",
                    Size = 1,
                    Value = bill_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_10",
                    Size = 1,
                    Value = bill_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_20",
                    Size = 1,
                    Value = bill_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_50",
                    Size = 1,
                    Value = bill_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "bill_100",
                    Size = 1,
                    Value = bill_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_mtr_val",
                    Value = max_mtr_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rntl_amnt",
                    Value = rntl_amnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_all_inc",
                    Value = max_all_inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "base_g_ver",
                    Value = base_g_ver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prog_sig_tim",
                    Value = prog_sig_tim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "touch_scrn",
                    Size = 1,
                    Value = touch_scrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "coin_acceptr",
                    Size = 1,
                    Value = coin_acceptr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_present",
                    Size = 1,
                    Value = hopper_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tik_prtr_pres",
                    Size = 1,
                    Value = tik_prtr_pres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "play_track",
                    Size = 1,
                    Value = play_track ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Size = 12,
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Size = 12,
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Size = 12,
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_4",
                    Size = 12,
                    Value = spare_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "spare_5",
                    Size = 12,
                    Value = spare_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "egm_meters_limit_type",
                    Size = 30,
                    Value = egm_meters_limit_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "np_win_payout_threshold",
                    Value = np_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_win_payout_threshold",
                    Value = sap_win_payout_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_in_device_present",
                    Size = 1,
                    Value = ticket_in_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "aux_display_device_present",
                    Size = 1,
                    Value = aux_display_device_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mechanical_meters_present",
                    Size = 1,
                    Value = mechanical_meters_present ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "denom_hot_switching_enabled",
                    Size = 1,
                    Value = denom_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "var_hot_switching_enabled",
                    Size = 1,
                    Value = var_hot_switching_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "shared_prog_jackpots_enabled",
                    Size = 1,
                    Value = shared_prog_jackpots_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_rtp",
                    Value = max_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_rtp",
                    Value = min_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_standard_deviation",
                    Value = max_standard_deviation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_lines",
                    Value = max_lines ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_bet_per_play",
                    Value = max_bet_per_play ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_np_win",
                    Value = max_np_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_progressive_win",
                    Value = max_progressive_win ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_ect",
                    Value = max_ect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_denomination",
                    Value = max_denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "player_info_display",
                    Value = player_info_display ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hopper_weight",
                    Value = hopper_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "downloadable_games_enabled",
                    Size = 1,
                    Value = downloadable_games_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tito_implementation_type",
                    Value = tito_implementation_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_egm_v6] @cur_site_id, @egm_ser_num, @template_id, @plate_num, @man_id, @type, @status, @token_id, @denom_id, @max_games, @cur_game, @cur_state, @protocol, @protocol_ver, @cabinet, @desc, @high_win, @high_credit, @max_pay, @drop_full, @drop_choked, @hop_fil, @dbl_max, @dbl_limit, @poll_addr, @tick_lim, @v_note_flg, @jt_id, @nte_acc_pres, @nte_acc_enbl, @bill_5, @bill_10, @bill_20, @bill_50, @bill_100, @max_mtr_val, @rntl_amnt, @max_all_inc, @base_g_ver, @prog_sig_tim, @touch_scrn, @coin_acceptr, @hopper_present, @tik_prtr_pres, @play_track, @sw_set_app, @spare_1, @spare_2, @spare_3, @spare_4, @spare_5, @egm_meters_limit_type, @np_win_payout_threshold, @sap_win_payout_threshold, @ticket_in_device_present, @aux_display_device_present, @mechanical_meters_present, @denom_hot_switching_enabled, @var_hot_switching_enabled, @shared_prog_jackpots_enabled, @max_rtp, @min_rtp, @max_standard_deviation, @max_lines, @max_bet_per_play, @max_np_win, @max_progressive_win, @max_ect, @max_denomination, @player_info_display, @hopper_weight, @downloadable_games_enabled, @user_id, @tito_implementation_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_employeeAsync(decimal? id, byte? creat_sys, short? creat_site, string first_name, string mid_initial, string last_name, string name_title, string res_addr1, string res_addr2, string res_locality, string res_state, string res_country, string res_post, string pos_addr1, string pos_addr2, string locality, string state_prov, string country, string post_code, string hm_phone, string mobile, string next_of_kin, string nok_phone, DateTime? dob, string sex, string status, DateTime? creat_date, string pos_title, string lic_num, string identifier, DateTime? emp_end_dt, DateTime? emp_start_dt, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_sys",
                    Value = creat_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "creat_site",
                    Value = creat_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mid_initial",
                    Size = 10,
                    Value = mid_initial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name_title",
                    Size = 15,
                    Value = name_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_addr1",
                    Size = 255,
                    Value = res_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_addr2",
                    Size = 60,
                    Value = res_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_locality",
                    Size = 30,
                    Value = res_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_state",
                    Size = 30,
                    Value = res_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_country",
                    Size = 30,
                    Value = res_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_post",
                    Size = 10,
                    Value = res_post ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr1",
                    Size = 60,
                    Value = pos_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr2",
                    Size = 60,
                    Value = pos_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state_prov",
                    Size = 30,
                    Value = state_prov ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 30,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "hm_phone",
                    Size = 20,
                    Value = hm_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "next_of_kin",
                    Size = 40,
                    Value = next_of_kin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nok_phone",
                    Size = 20,
                    Value = nok_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dob",
                    Value = dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sex",
                    Size = 1,
                    Value = sex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pos_title",
                    Size = 30,
                    Value = pos_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_num",
                    Size = 25,
                    Value = lic_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "identifier",
                    Size = 10,
                    Value = identifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "emp_end_dt",
                    Value = emp_end_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "emp_start_dt",
                    Value = emp_start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_employee] @id, @creat_sys, @creat_site, @first_name, @mid_initial, @last_name, @name_title, @res_addr1, @res_addr2, @res_locality, @res_state, @res_country, @res_post, @pos_addr1, @pos_addr2, @locality, @state_prov, @country, @post_code, @hm_phone, @mobile, @next_of_kin, @nok_phone, @dob, @sex, @status, @creat_date, @pos_title, @lic_num, @identifier, @emp_end_dt, @emp_start_dt, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_employee_statusAsync(decimal? id, string status, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_employee_status] @id, @status, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_employee_v2Async(decimal? id, byte? creat_sys, short? creat_site, string first_name, string mid_initial, string last_name, string name_title, string res_addr1, string res_addr2, string res_locality, string res_state, string res_country, string res_post, string pos_addr1, string pos_addr2, string locality, string state_prov, string country, string post_code, string hm_phone, string mobile, string next_of_kin, string nok_phone, DateTime? dob, string sex, string status, DateTime? creat_date, string pos_title, string lic_num, string identifier, DateTime? emp_end_dt, DateTime? emp_start_dt, string security_user_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_sys",
                    Value = creat_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "creat_site",
                    Value = creat_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mid_initial",
                    Size = 10,
                    Value = mid_initial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name_title",
                    Size = 15,
                    Value = name_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_addr1",
                    Size = 255,
                    Value = res_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_addr2",
                    Size = 60,
                    Value = res_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_locality",
                    Size = 30,
                    Value = res_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_state",
                    Size = 30,
                    Value = res_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_country",
                    Size = 30,
                    Value = res_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_post",
                    Size = 10,
                    Value = res_post ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr1",
                    Size = 60,
                    Value = pos_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr2",
                    Size = 60,
                    Value = pos_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state_prov",
                    Size = 30,
                    Value = state_prov ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 30,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "hm_phone",
                    Size = 20,
                    Value = hm_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "next_of_kin",
                    Size = 40,
                    Value = next_of_kin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nok_phone",
                    Size = 20,
                    Value = nok_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dob",
                    Value = dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sex",
                    Size = 1,
                    Value = sex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pos_title",
                    Size = 30,
                    Value = pos_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_num",
                    Size = 25,
                    Value = lic_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "identifier",
                    Size = 10,
                    Value = identifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "emp_end_dt",
                    Value = emp_end_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "emp_start_dt",
                    Value = emp_start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "security_user_id",
                    Size = 16,
                    Value = security_user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_employee_v2] @id, @creat_sys, @creat_site, @first_name, @mid_initial, @last_name, @name_title, @res_addr1, @res_addr2, @res_locality, @res_state, @res_country, @res_post, @pos_addr1, @pos_addr2, @locality, @state_prov, @country, @post_code, @hm_phone, @mobile, @next_of_kin, @nok_phone, @dob, @sex, @status, @creat_date, @pos_title, @lic_num, @identifier, @emp_end_dt, @emp_start_dt, @security_user_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_equationAsync(decimal? id, byte? system, short? css_site, byte? track_type, string desc, string expression, string method, string enabled, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system",
                    Value = system ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site",
                    Value = css_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "expression",
                    Size = 255,
                    Value = expression ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "method",
                    Size = 1,
                    Value = method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_equation] @id, @system, @css_site, @track_type, @desc, @expression, @method, @enabled, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_file_distributionAsync(short? site_id, string set_name, string set_type, DateTime? start_dt, DateTime? started_dt, DateTime? dwnld_c_dt, DateTime? dwnld_s_dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "set_name",
                    Size = 30,
                    Value = set_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "set_type",
                    Size = 10,
                    Value = set_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "started_dt",
                    Value = started_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dwnld_c_dt",
                    Value = dwnld_c_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dwnld_s_dt",
                    Value = dwnld_s_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_file_distribution] @site_id, @set_name, @set_type, @start_dt, @started_dt, @dwnld_c_dt, @dwnld_s_dt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_file_storeAsync(string file_name, string version, DateTime? dwnload_dt, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "file_name",
                    Size = 50,
                    Value = file_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "version",
                    Size = 20,
                    Value = version ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dwnload_dt",
                    Value = dwnload_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_file_store] @file_name, @version, @dwnload_dt, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_file_working_setAsync(string file_name, string version, string set_name, string set_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "file_name",
                    Size = 50,
                    Value = file_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "version",
                    Size = 20,
                    Value = version ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "set_name",
                    Size = 30,
                    Value = set_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "set_type",
                    Size = 10,
                    Value = set_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_file_working_set] @file_name, @version, @set_name, @set_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_floor_view_detailAsync(short? site_id, int? ser_num, int? x_pos, int? y_pos, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ser_num",
                    Value = ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "x_pos",
                    Value = x_pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "y_pos",
                    Value = y_pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_floor_view_detail] @site_id, @ser_num, @x_pos, @y_pos", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_floor_view_masterAsync(short? site_id, short? floor_num, int? image_w, int? image_h, int? object_w, int? object_h, string file_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor_num",
                    Value = floor_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "image_w",
                    Value = image_w ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "image_h",
                    Value = image_h ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "object_w",
                    Value = object_w ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "object_h",
                    Value = object_h ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "file_name",
                    Size = 255,
                    Value = file_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_floor_view_master] @site_id, @floor_num, @image_w, @image_h, @object_w, @object_h, @file_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_game_typeAsync(int? id, int? gme_ver_num, string desc, string style, short? jp_levels, short? man_id, string qogr_enabled, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gme_ver_num",
                    Value = gme_ver_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "style",
                    Size = 8,
                    Value = style ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jp_levels",
                    Value = jp_levels ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "qogr_enabled",
                    Size = 1,
                    Value = qogr_enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_game_type] @id, @gme_ver_num, @desc, @style, @jp_levels, @man_id, @qogr_enabled", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_game_type_onlyAsync(int? id, int? gme_ver_num, string desc, string style, short? jp_levels, short? man_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gme_ver_num",
                    Value = gme_ver_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "style",
                    Size = 8,
                    Value = style ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jp_levels",
                    Value = jp_levels ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_game_type_only] @id, @gme_ver_num, @desc, @style, @jp_levels, @man_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_game_variationAsync(int? game_type_id, int? game_var_no, int? rtp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "game_type_id",
                    Value = game_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_var_no",
                    Value = game_var_no ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rtp",
                    Value = rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_game_variation] @game_type_id, @game_var_no, @rtp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_headcount_summariseResult>> update_headcount_summariseAsync(int? egm_serial_number, short? site_id, DateTime? start_dt, short? sum_level, short? floor, short? bank, short? position, int? ssan, short? denomination, int? state, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_dt",
                    Value = start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sum_level",
                    Value = sum_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination",
                    Value = denomination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_headcount_summariseResult>("EXEC @returnValue = [dbo].[update_headcount_summarise] @egm_serial_number, @site_id, @start_dt, @sum_level, @floor, @bank, @position, @ssan, @denomination, @state", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_identification_groupAsync(short? id, string check_type, string description, short? grp_ptlim, string form_sect, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "check_type",
                    Size = 30,
                    Value = check_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "grp_ptlim",
                    Value = grp_ptlim ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "form_sect",
                    Size = 15,
                    Value = form_sect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_identification_group] @id, @check_type, @description, @grp_ptlim, @form_sect, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_identification_itemAsync(int? id, short? id_group, string description, short? point_val, string form_sect, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_group",
                    Value = id_group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 150,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "point_val",
                    Value = point_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "form_sect",
                    Size = 15,
                    Value = form_sect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_identification_item] @id, @id_group, @description, @point_val, @form_sect, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_jackpot_deltas_suspendedAsync(short? site_id, int? pool_number, short? pool_site_id, DateTime? start_datetime, short? summary_level, int? egm_serial_number, short? denomination_id, int? ssan, int? bgvn, short? floor, short? bank, short? position, short? pool_group_id, double? total_rtp, double? increment, int? reset, int? maximum, int? turnover, int? wins, int? lp_wins, int? sap_wins, int? erp_wins, int? error_code, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site_id",
                    Value = pool_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bgvn",
                    Value = bgvn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_group_id",
                    Value = pool_group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "increment",
                    Value = increment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "maximum",
                    Value = maximum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wins",
                    Value = wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lp_wins",
                    Value = lp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sap_wins",
                    Value = sap_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "erp_wins",
                    Value = erp_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "error_code",
                    Value = error_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_jackpot_deltas_suspended] @site_id, @pool_number, @pool_site_id, @start_datetime, @summary_level, @egm_serial_number, @denomination_id, @ssan, @bgvn, @floor, @bank, @position, @pool_group_id, @total_rtp, @increment, @reset, @maximum, @turnover, @wins, @lp_wins, @sap_wins, @erp_wins, @error_code", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_jackpot_pool_site_statusAsync(short? site_id, int? pool_number, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_jackpot_pool_site_status] @site_id, @pool_number, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_jackpot_pool_site_status_historyAsync(short? site_id, int? pool_number, string new_status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 1,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_jackpot_pool_site_status_history] @site_id, @pool_number, @new_status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_jurisdictionAsync(int? id, string description, string iso_code, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iso_code",
                    Size = 10,
                    Value = iso_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_jurisdiction] @id, @description, @iso_code, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_kiosk_transactionAsync(short? css_site_id, decimal? patron_id, DateTime? entry_datetime, decimal? prize_draw_id, int? prize_draw_value, decimal? ticket_id, string ticket_status, DateTime? expiry_date, string ticket_text, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "prize_draw_id",
                    Precision = 18,
                    Value = prize_draw_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "prize_draw_value",
                    Value = prize_draw_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_id",
                    Precision = 12,
                    Value = ticket_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_status",
                    Size = 8,
                    Value = ticket_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_kiosk_transaction] @css_site_id, @patron_id, @entry_datetime, @prize_draw_id, @prize_draw_value, @ticket_id, @ticket_status, @expiry_date, @ticket_text, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_kiosk_transaction_v2Async(short? css_site_id, decimal? patron_id, DateTime? entry_datetime, decimal? prize_draw_id, int? prize_draw_value, decimal? ticket_id, string ticket_status, DateTime? expiry_date, string ticket_text, string campaign_id, short? tracking_type_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "prize_draw_id",
                    Precision = 18,
                    Value = prize_draw_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "prize_draw_value",
                    Value = prize_draw_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_id",
                    Precision = 12,
                    Value = ticket_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_status",
                    Size = 8,
                    Value = ticket_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "campaign_id",
                    Size = 36,
                    Value = campaign_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_kiosk_transaction_v2] @css_site_id, @patron_id, @entry_datetime, @prize_draw_id, @prize_draw_value, @ticket_id, @ticket_status, @expiry_date, @ticket_text, @campaign_id, @tracking_type_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_locationAsync(short? site_id, short? floor, short? bank, short? pos, int? egm_ser_num, string pager_pos, string sec_id, string loop_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pos",
                    Value = pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pager_pos",
                    Size = 20,
                    Value = pager_pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sec_id",
                    Size = 20,
                    Value = sec_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loop_name",
                    Size = 8,
                    Value = loop_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_location] @site_id, @floor, @bank, @pos, @egm_ser_num, @pager_pos, @sec_id, @loop_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_location_midmAsync(short? site_id, short? floor, short? bank, short? pos, short? midm_card, short? midm_port, short? midm_address, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pos",
                    Value = pos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "midm_card",
                    Value = midm_card ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "midm_port",
                    Value = midm_port ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "midm_address",
                    Value = midm_address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_location_midm] @site_id, @floor, @bank, @pos, @midm_card, @midm_port, @midm_address", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_location_pager_positionAsync(short? site_id, short? floor, short? bank, short? position, int? egm_serial_number, string pager_position, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pager_position",
                    Size = 20,
                    Value = pager_position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_location_pager_position] @site_id, @floor, @bank, @position, @egm_serial_number, @pager_position", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_loop_device_applicationAsync(byte? system_id, short? css_site_id, byte? hw_dev, string app_id, int? weight, string image, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "hw_dev",
                    Value = hw_dev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "app_id",
                    Size = 32,
                    Value = app_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "weight",
                    Value = weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "image",
                    Size = 30,
                    Value = image ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_loop_device_application] @system_id, @css_site_id, @hw_dev, @app_id, @weight, @image, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_loop_device_msg_textAsync(decimal? id, byte? system_id, short? css_site_id, short? msg_type, short? floor, short? bank, short? position, string msg_text, string enabled, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "msg_type",
                    Value = msg_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "msg_text",
                    Size = 80,
                    Value = msg_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_loop_device_msg_text] @id, @system_id, @css_site_id, @msg_type, @floor, @bank, @position, @msg_text, @enabled, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_loyalty_unitAsync(short? site_id, int? egm_serial_number, short? loyalty_unit_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "loyalty_unit_type_id",
                    Value = loyalty_unit_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_loyalty_unit] @site_id, @egm_serial_number, @loyalty_unit_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_manufacturerAsync(short? id, string name, string address, string locality, string stateprov, string country, string postcode, string contact, string phone, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 20,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 60,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "stateprov",
                    Size = 30,
                    Value = stateprov ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 30,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "postcode",
                    Size = 10,
                    Value = postcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "contact",
                    Size = 40,
                    Value = contact ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phone",
                    Size = 20,
                    Value = phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_manufacturer] @id, @name, @address, @locality, @stateprov, @country, @postcode, @contact, @phone", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_master_cardAsync(int? new_value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "new_value",
                    Value = new_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_master_card] @new_value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_max_change_game_configAsync(string id, short? site_id, int? base_game_version_number, int? game_version_number, int? software_set_approval_number, int? game_variation_number, short? denomination_id, DateTime? anniversary_datetime, int? anniversary_game_var_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 36,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "base_game_version_number",
                    Value = base_game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_version_number",
                    Value = game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "software_set_approval_number",
                    Value = software_set_approval_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_variation_number",
                    Value = game_variation_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "anniversary_datetime",
                    Value = anniversary_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "anniversary_game_var_number",
                    Value = anniversary_game_var_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_max_change_game_config] @id, @site_id, @base_game_version_number, @game_version_number, @software_set_approval_number, @game_variation_number, @denomination_id, @anniversary_datetime, @anniversary_game_var_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_max_change_requestAsync(string id, short? site_id, int? egm_serial_number, byte? manufacturer_id, byte? max_change_request_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 36,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "manufacturer_id",
                    Value = manufacturer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_change_request_type_id",
                    Value = max_change_request_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_max_change_request] @id, @site_id, @egm_serial_number, @manufacturer_id, @max_change_request_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_max_change_request_detailAsync(string id, short? site_id, string max_change_request_id, string max_change_game_config_id, byte? day_of_week, DateTime? change_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 36,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "max_change_request_id",
                    Size = 36,
                    Value = max_change_request_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "max_change_game_config_id",
                    Size = 36,
                    Value = max_change_game_config_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "change_datetime",
                    Value = change_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_max_change_request_detail] @id, @site_id, @max_change_request_id, @max_change_game_config_id, @day_of_week, @change_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_maxbonus_ticketAsync(short? site_id, int? id, string promotion_name, string promotion_criteria, string promotion_prize, DateTime? creation_datetime, short? location_floor, short? location_bank, short? location_position, int? egm_serial_number, DateTime? expiry_datetime, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_name",
                    Size = 255,
                    Value = promotion_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_criteria",
                    Size = 255,
                    Value = promotion_criteria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "promotion_prize",
                    Size = 255,
                    Value = promotion_prize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creation_datetime",
                    Value = creation_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "location_floor",
                    Value = location_floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "location_bank",
                    Value = location_bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "location_position",
                    Value = location_position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_datetime",
                    Value = expiry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_maxbonus_ticket] @site_id, @id, @promotion_name, @promotion_criteria, @promotion_prize, @creation_datetime, @location_floor, @location_bank, @location_position, @egm_serial_number, @expiry_datetime, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_membership_receiptsAsync(short? css_site_id, decimal? receipt_id, decimal? patron_id, DateTime? receipt_datetime, int? membership_id, int? membership_type_id, string user_id, int? cash_amount, int? cheque_amount, string cheque_details, int? card_amount, int? card_id, int? total_amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "receipt_id",
                    Precision = 18,
                    Value = receipt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "receipt_datetime",
                    Value = receipt_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_details",
                    Size = 50,
                    Value = cheque_details ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_amount",
                    Value = card_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_amount",
                    Value = total_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_membership_receipts] @css_site_id, @receipt_id, @patron_id, @receipt_datetime, @membership_id, @membership_type_id, @user_id, @cash_amount, @cheque_amount, @cheque_details, @card_amount, @card_id, @total_amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_membership_receipts_V2Async(short? css_site_id, decimal? receipt_id, decimal? patron_id, DateTime? receipt_datetime, int? membership_id, int? membership_type_id, string user_id, int? cash_amount, int? cheque_amount, string cheque_details, int? card_amount, int? card_id, int? total_amount, decimal? parent_patron_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "receipt_id",
                    Precision = 18,
                    Value = receipt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "receipt_datetime",
                    Value = receipt_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_details",
                    Size = 50,
                    Value = cheque_details ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_amount",
                    Value = card_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_amount",
                    Value = total_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "parent_patron_id",
                    Precision = 18,
                    Value = parent_patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_membership_receipts_V2] @css_site_id, @receipt_id, @patron_id, @receipt_datetime, @membership_id, @membership_type_id, @user_id, @cash_amount, @cheque_amount, @cheque_details, @card_amount, @card_id, @total_amount, @parent_patron_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_membership_receipts_V3Async(short? css_site_id, decimal? receipt_id, decimal? patron_id, DateTime? receipt_datetime, int? membership_id, int? membership_type_id, string user_id, int? cash_amount, int? cheque_amount, string cheque_details, int? card_amount, int? card_id, int? total_amount, decimal? parent_patron_id, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "receipt_id",
                    Precision = 18,
                    Value = receipt_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "receipt_datetime",
                    Value = receipt_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cash_amount",
                    Value = cash_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_amount",
                    Value = cheque_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cheque_details",
                    Size = 50,
                    Value = cheque_details ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "card_amount",
                    Value = card_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_amount",
                    Value = total_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "parent_patron_id",
                    Precision = 18,
                    Value = parent_patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_membership_receipts_V3] @css_site_id, @receipt_id, @patron_id, @receipt_datetime, @membership_id, @membership_type_id, @user_id, @cash_amount, @cheque_amount, @cheque_details, @card_amount, @card_id, @total_amount, @parent_patron_id, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_membership_typeAsync(int? id, byte? system, short? site, string desc, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system",
                    Value = system ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site",
                    Value = site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_membership_type] @id, @system, @site, @desc, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_membershiptype_v2Async(int? id, byte? system_id, short? css_site_id, string description, int? membership_fee, DateTime? expiry_date, short? expiry_period, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "membership_fee",
                    Value = membership_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_period",
                    Value = expiry_period ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_membershiptype_v2] @id, @system_id, @css_site_id, @description, @membership_fee, @expiry_date, @expiry_period", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_membershiptype_V3Async(int? id, byte? system_id, short? css_site_id, string description, int? membership_fee, DateTime? expiry_date, short? expiry_period, string associate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "membership_fee",
                    Value = membership_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_period",
                    Value = expiry_period ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "associate",
                    Size = 1,
                    Value = associate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_membershiptype_V3] @id, @system_id, @css_site_id, @description, @membership_fee, @expiry_date, @expiry_period, @associate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_membershiptype_V4Async(int? id, byte? system_id, short? css_site_id, string description, int? membership_fee, DateTime? expiry_date, short? expiry_period, string associate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "membership_fee",
                    Value = membership_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_period",
                    Value = expiry_period ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "associate",
                    Size = 1,
                    Value = associate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_membershiptype_V4] @id, @system_id, @css_site_id, @description, @membership_fee, @expiry_date, @expiry_period, @associate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_money_boxAsync(short? site_id, string box_number, string type, int? weight, DateTime? datetime_calibrated, DateTime? clearance_start_datetime, int? egm_serial_number, string comments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "box_number",
                    Size = 30,
                    Value = box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 30,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "weight",
                    Value = weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datetime_calibrated",
                    Value = datetime_calibrated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_money_box] @site_id, @box_number, @type, @weight, @datetime_calibrated, @clearance_start_datetime, @egm_serial_number, @comments", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_network_deviceAsync(decimal? id, short? site_id, int? network_device_type_id, string description, string network_address, short? floor, short? bank, string location, string configuration, string enabled, string downloadable, short? x, short? y, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_type_id",
                    Value = network_device_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 50,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "network_address",
                    Size = 30,
                    Value = network_address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 50,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "configuration",
                    Size = 255,
                    Value = configuration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "downloadable",
                    Size = 1,
                    Value = downloadable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "x",
                    Value = x ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "y",
                    Value = y ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_network_device] @id, @site_id, @network_device_type_id, @description, @network_address, @floor, @bank, @location, @configuration, @enabled, @downloadable, @x, @y", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_network_device_typeAsync(int? id, string category, string subcategory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "category",
                    Size = 20,
                    Value = category ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "subcategory",
                    Size = 20,
                    Value = subcategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_network_device_type] @id, @category, @subcategory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_network_device_v2Async(decimal? id, short? site_id, int? network_device_type_id, string description, string network_address, short? floor, short? bank, string location, string configuration, string enabled, string downloadable, short? x, short? y, int? serial_number, string security_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_type_id",
                    Value = network_device_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 50,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "network_address",
                    Size = 30,
                    Value = network_address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "location",
                    Size = 50,
                    Value = location ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "configuration",
                    Size = 255,
                    Value = configuration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "downloadable",
                    Size = 1,
                    Value = downloadable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "x",
                    Value = x ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "y",
                    Value = y ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_number",
                    Value = serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "security_id",
                    Size = 16,
                    Value = security_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_network_device_v2] @id, @site_id, @network_device_type_id, @description, @network_address, @floor, @bank, @location, @configuration, @enabled, @downloadable, @x, @y, @serial_number, @security_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_note_countAsync(short? site_id, DateTime? entry_datetime, string money_box_number, int? egm_serial_number, string count_status, int? notes_in_amt, int? notes_in_cnt, int? notes_in_cnt_5, int? notes_in_cnt_10, int? notes_in_cnt_20, int? notes_in_cnt_50, int? notes_in_cnt_100, int? spare_1, int? spare_2, int? spare_3, DateTime? logged_datetime, string comments, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "entry_datetime",
                    Value = entry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "money_box_number",
                    Size = 30,
                    Value = money_box_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "count_status",
                    Size = 30,
                    Value = count_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_amt",
                    Value = notes_in_amt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt",
                    Value = notes_in_cnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_5",
                    Value = notes_in_cnt_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_10",
                    Value = notes_in_cnt_10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_20",
                    Value = notes_in_cnt_20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_50",
                    Value = notes_in_cnt_50 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes_in_cnt_100",
                    Value = notes_in_cnt_100 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_1",
                    Value = spare_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_2",
                    Value = spare_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spare_3",
                    Value = spare_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "logged_datetime",
                    Value = logged_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 255,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_note_count] @site_id, @entry_datetime, @money_box_number, @egm_serial_number, @count_status, @notes_in_amt, @notes_in_cnt, @notes_in_cnt_5, @notes_in_cnt_10, @notes_in_cnt_20, @notes_in_cnt_50, @notes_in_cnt_100, @spare_1, @spare_2, @spare_3, @logged_datetime, @comments, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pagerAsync(decimal? id, byte? system_id, short? css_site_id, string capcode, string description, string enabled_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "capcode",
                    Size = 10,
                    Value = capcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pager] @id, @system_id, @css_site_id, @capcode, @description, @enabled_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pager_categoryAsync(decimal? pager_id, decimal? category_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pager_id",
                    Precision = 18,
                    Value = pager_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "category_id",
                    Precision = 18,
                    Value = category_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pager_category] @pager_id, @category_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pager_eventAsync(decimal? id, int? event_type_id, short? css_site_id, string display_text, string paging_enabled_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "event_type_id",
                    Value = event_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "display_text",
                    Size = 100,
                    Value = display_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "paging_enabled_flag",
                    Size = 1,
                    Value = paging_enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pager_event] @id, @event_type_id, @css_site_id, @display_text, @paging_enabled_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pager_transportAsync(int? id, string description, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pager_transport] @id, @description, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pager_v2Async(decimal? id, byte? system_id, short? css_site_id, string capcode, string description, string enabled_flag, int? pager_transport_id, decimal? parent_pager_id, string address, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "capcode",
                    Size = 10,
                    Value = capcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "pager_transport_id",
                    Value = pager_transport_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "parent_pager_id",
                    Precision = 18,
                    Value = parent_pager_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 50,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pager_v2] @id, @system_id, @css_site_id, @capcode, @description, @enabled_flag, @pager_transport_id, @parent_pager_id, @address, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pager_zoneAsync(decimal? pager_id, int? zone_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pager_id",
                    Precision = 18,
                    Value = pager_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "zone_id",
                    Value = zone_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pager_zone] @pager_id, @zone_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pat_contact_subscriptionAsync(string patron_id, short? contact_type_id, string subscribed_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Size = 36,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "contact_type_id",
                    Value = contact_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "subscribed_flag",
                    Size = 1,
                    Value = subscribed_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pat_contact_subscription] @patron_id, @contact_type_id, @subscribed_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patronAsync(decimal? id, byte? creat_sys, short? creat_site, string first_name, string mid_initial, string last_name, string other_name, string name_title, string res_addr1, string res_addr2, string res_locality, string res_state, string res_country, string res_post, string pos_addr1, string pos_addr2, string locality, string state_prov, string country, string post_code, string hm_phone, string wk_phone, string fax, string mobile, string email, string next_of_kin, string nok_phone, DateTime? dob, string sex, string status, DateTime? creat_date, DateTime? exp_date, DateTime? susp_start, DateTime? susp_end, int? mem_id, DateTime? last_mod, int? rat_grade, int? jurisdiction, string mail_out, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_sys",
                    Value = creat_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "creat_site",
                    Value = creat_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mid_initial",
                    Size = 10,
                    Value = mid_initial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "other_name",
                    Size = 30,
                    Value = other_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name_title",
                    Size = 15,
                    Value = name_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_addr1",
                    Size = 255,
                    Value = res_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_addr2",
                    Size = 60,
                    Value = res_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_locality",
                    Size = 30,
                    Value = res_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_state",
                    Size = 30,
                    Value = res_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_country",
                    Size = 30,
                    Value = res_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_post",
                    Size = 10,
                    Value = res_post ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr1",
                    Size = 60,
                    Value = pos_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr2",
                    Size = 60,
                    Value = pos_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state_prov",
                    Size = 30,
                    Value = state_prov ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 30,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "hm_phone",
                    Size = 20,
                    Value = hm_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "wk_phone",
                    Size = 20,
                    Value = wk_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fax",
                    Size = 20,
                    Value = fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "next_of_kin",
                    Size = 40,
                    Value = next_of_kin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nok_phone",
                    Size = 20,
                    Value = nok_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dob",
                    Value = dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sex",
                    Size = 1,
                    Value = sex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_start",
                    Value = susp_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_end",
                    Value = susp_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "mem_id",
                    Value = mem_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "rat_grade",
                    Value = rat_grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction",
                    Value = jurisdiction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mail_out",
                    Size = 1,
                    Value = mail_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron] @id, @creat_sys, @creat_site, @first_name, @mid_initial, @last_name, @other_name, @name_title, @res_addr1, @res_addr2, @res_locality, @res_state, @res_country, @res_post, @pos_addr1, @pos_addr2, @locality, @state_prov, @country, @post_code, @hm_phone, @wk_phone, @fax, @mobile, @email, @next_of_kin, @nok_phone, @dob, @sex, @status, @creat_date, @exp_date, @susp_start, @susp_end, @mem_id, @last_mod, @rat_grade, @jurisdiction, @mail_out, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_acc_permissionAsync(decimal? account_id, decimal? patron_id, short? permission, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "permission",
                    Value = permission ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_acc_permission] @account_id, @patron_id, @permission, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_age_groupAsync(int? id, byte? system_id, short? site_id, string description, int? min_age, int? max_age, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "min_age",
                    Value = min_age ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_age",
                    Value = max_age ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_age_group] @id, @system_id, @site_id, @description, @min_age, @max_age, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_associationAsync(short? css_site_id, decimal? parent_patron_id, decimal? associate_patron_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "parent_patron_id",
                    Precision = 18,
                    Value = parent_patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "associate_patron_id",
                    Precision = 18,
                    Value = associate_patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_association] @css_site_id, @parent_patron_id, @associate_patron_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_bankingAsync(decimal? id, decimal? patron_id, string bank_type, string sub_type, DateTime? expiry_dt, string detail_1, string detail_2, string detail_3, string detail_4, string detail_5, string detail_6, short? priority, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "bank_type",
                    Size = 8,
                    Value = bank_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sub_type",
                    Size = 20,
                    Value = sub_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_dt",
                    Value = expiry_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "detail_1",
                    Size = 64,
                    Value = detail_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_2",
                    Size = 64,
                    Value = detail_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_3",
                    Size = 150,
                    Value = detail_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_4",
                    Size = 64,
                    Value = detail_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_5",
                    Size = 20,
                    Value = detail_5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_6",
                    Size = 100,
                    Value = detail_6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_banking] @id, @patron_id, @bank_type, @sub_type, @expiry_dt, @detail_1, @detail_2, @detail_3, @detail_4, @detail_5, @detail_6, @priority, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_patron_card_statusResult>> update_patron_card_statusAsync(decimal? patron_id, string patron_status_from, string patron_status_to, DateTime? suspend_start_datetime, DateTime? suspend_end_datetime, DateTime? last_modified_datetime, int? cascade_to_cards, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_status_from",
                    Size = 10,
                    Value = patron_status_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "patron_status_to",
                    Size = 10,
                    Value = patron_status_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "suspend_start_datetime",
                    Value = suspend_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "suspend_end_datetime",
                    Value = suspend_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_modified_datetime",
                    Value = last_modified_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "cascade_to_cards",
                    Value = cascade_to_cards ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_patron_card_statusResult>("EXEC @returnValue = [dbo].[update_patron_card_status] @patron_id, @patron_status_from, @patron_status_to, @suspend_start_datetime, @suspend_end_datetime, @last_modified_datetime, @cascade_to_cards, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_commentAsync(decimal? patron_id, string comment_field, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "comment_field",
                    Size = 1024,
                    Value = comment_field ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_comment] @patron_id, @comment_field, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_contactAsync(decimal? patron_id, short? contact_type_id, string points_awarded_flag, DateTime? last_contact_request_datetime, string subscribed_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "contact_type_id",
                    Value = contact_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "points_awarded_flag",
                    Size = 1,
                    Value = points_awarded_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "last_contact_request_datetime",
                    Value = last_contact_request_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "subscribed_flag",
                    Size = 1,
                    Value = subscribed_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_contact] @patron_id, @contact_type_id, @points_awarded_flag, @last_contact_request_datetime, @subscribed_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_contact_historyAsync(decimal? patron_id, short? contact_type_id, string contact_details, string bounced_flag, string notified_kiosk_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "contact_type_id",
                    Value = contact_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "contact_details",
                    Size = 255,
                    Value = contact_details ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bounced_flag",
                    Size = 1,
                    Value = bounced_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "notified_kiosk_flag",
                    Size = 1,
                    Value = notified_kiosk_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_contact_history] @patron_id, @contact_type_id, @contact_details, @bounced_flag, @notified_kiosk_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_extraAsync(decimal? patron_id, decimal? patron_extra_type_id, string detail_value, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_extra_type_id",
                    Precision = 18,
                    Value = patron_extra_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "detail_value",
                    Size = 255,
                    Value = detail_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_extra] @patron_id, @patron_extra_type_id, @detail_value, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_extra_typeAsync(decimal? id, byte? system_id, short? site_id, string description, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_extra_type] @id, @system_id, @site_id, @description, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_groupAsync(int? id, byte? system, short? site, string desc, string type, string status, DateTime? create_dt, DateTime? expire_dt, DateTime? suspend_start_dt, DateTime? suspend_end_dt, DateTime? tour_start_dt, DateTime? tour_end_dt, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system",
                    Value = system ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site",
                    Value = site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 10,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "create_dt",
                    Value = create_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expire_dt",
                    Value = expire_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "suspend_start_dt",
                    Value = suspend_start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "suspend_end_dt",
                    Value = suspend_end_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tour_start_dt",
                    Value = tour_start_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tour_end_dt",
                    Value = tour_end_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_group] @id, @system, @site, @desc, @type, @status, @create_dt, @expire_dt, @suspend_start_dt, @suspend_end_dt, @tour_start_dt, @tour_end_dt, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_group_memberAsync(decimal? patron, int? group, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron",
                    Precision = 18,
                    Value = patron ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "group",
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_group_member] @patron, @group, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_identificationAsync(decimal? id, decimal? patron_id, int? id_item, DateTime? ref_dt, short? point_val, string img_loc, short? loc_site, string detail_1, string detail_2, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "id_item",
                    Value = id_item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ref_dt",
                    Value = ref_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "point_val",
                    Value = point_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "img_loc",
                    Size = 255,
                    Value = img_loc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loc_site",
                    Value = loc_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "detail_1",
                    Size = 255,
                    Value = detail_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_2",
                    Size = 255,
                    Value = detail_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_identification] @id, @patron_id, @id_item, @ref_dt, @point_val, @img_loc, @loc_site, @detail_1, @detail_2, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_identification_V2Async(decimal? id, decimal? patron_id, int? id_item, DateTime? ref_dt, short? point_val, string img_loc, short? loc_site, string detail_1, string detail_2, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "id_item",
                    Value = id_item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ref_dt",
                    Value = ref_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "point_val",
                    Value = point_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "img_loc",
                    Size = 255,
                    Value = img_loc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loc_site",
                    Value = loc_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "detail_1",
                    Size = 255,
                    Value = detail_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "detail_2",
                    Size = 255,
                    Value = detail_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_identification_V2] @id, @patron_id, @id_item, @ref_dt, @point_val, @img_loc, @loc_site, @detail_1, @detail_2, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_last_activityAsync(decimal? patron_id, int? card_id, DateTime? last_kiosk_activity, DateTime? last_egm_activity, DateTime? last_pos_activity, DateTime? last_barrel_draw_ticket, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_kiosk_activity",
                    Value = last_kiosk_activity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_egm_activity",
                    Value = last_egm_activity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_pos_activity",
                    Value = last_pos_activity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_barrel_draw_ticket",
                    Value = last_barrel_draw_ticket ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_last_activity] @patron_id, @card_id, @last_kiosk_activity, @last_egm_activity, @last_pos_activity, @last_barrel_draw_ticket", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_last_sessionAsync(decimal? id, DateTime? last_sess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "last_sess",
                    Value = last_sess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_last_session] @id, @last_sess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_mail_out_flagAsync(decimal? patron_id, string mail_out_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "mail_out_flag",
                    Size = 1,
                    Value = mail_out_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_mail_out_flag] @patron_id, @mail_out_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_membership_histAsync(short? css_site_id, decimal? patron_id, DateTime? transaction_datetime, string old_status, string new_status, DateTime? old_expiry_datetime, DateTime? new_expiry_datetime, int? old_membership_type, int? new_membership_type, decimal? associate_patron_id, decimal? parent_patron_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "old_status",
                    Size = 10,
                    Value = old_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_status",
                    Size = 10,
                    Value = new_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "old_expiry_datetime",
                    Value = old_expiry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "new_expiry_datetime",
                    Value = new_expiry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "old_membership_type",
                    Value = old_membership_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_membership_type",
                    Value = new_membership_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "associate_patron_id",
                    Precision = 18,
                    Value = associate_patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "parent_patron_id",
                    Precision = 18,
                    Value = parent_patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_membership_hist] @css_site_id, @patron_id, @transaction_datetime, @old_status, @new_status, @old_expiry_datetime, @new_expiry_datetime, @old_membership_type, @new_membership_type, @associate_patron_id, @parent_patron_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_membership_typeAsync(decimal? id, int? mem_type, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "mem_type",
                    Value = mem_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_membership_type] @id, @mem_type, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_membership_type_v2Async(decimal? id, int? mem_type, string user_id, DateTime? last_mod, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "mem_type",
                    Value = mem_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_membership_type_v2] @id, @mem_type, @user_id, @last_mod", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_preferenceAsync(decimal? patron, int? pref_group, int? pref_type, byte? system, short? site, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patron",
                    Precision = 18,
                    Value = patron ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pref_group",
                    Value = pref_group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pref_type",
                    Value = pref_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system",
                    Value = system ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site",
                    Value = site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_preference] @patron, @pref_group, @pref_type, @system, @site, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_preference_groupAsync(int? id, byte? system, short? site, string desc, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system",
                    Value = system ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site",
                    Value = site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_preference_group] @id, @system, @site, @desc, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_preference_typeAsync(int? pref_group, int? id, byte? system, short? site, string desc, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pref_group",
                    Value = pref_group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system",
                    Value = system ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site",
                    Value = site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_preference_type] @pref_group, @id, @system, @site, @desc, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_ratingAsync(decimal? id, int? rating, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating",
                    Value = rating ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_rating] @id, @rating", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_rating_historyAsync(short? css_site_id, decimal? patron_id, int? rating_grade_id, DateTime? rating_datetime, string rating_for_life, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rating_datetime",
                    Value = rating_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "rating_for_life",
                    Size = 1,
                    Value = rating_for_life ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_rating_history] @css_site_id, @patron_id, @rating_grade_id, @rating_datetime, @rating_for_life", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_statusAsync(decimal? id, string status, DateTime? last_mod, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_status] @id, @status, @last_mod, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_patron_v2Async(decimal? id, byte? creat_sys, short? creat_site, string first_name, string mid_initial, string last_name, string other_name, string name_title, string res_addr1, string res_addr2, string res_locality, string res_state, string res_country, string res_post, string pos_addr1, string pos_addr2, string locality, string state_prov, string country, string post_code, string hm_phone, string wk_phone, string fax, string mobile, string email, string next_of_kin, string nok_phone, DateTime? dob, string sex, string status, DateTime? creat_date, DateTime? exp_date, DateTime? susp_start, DateTime? susp_end, int? mem_id, DateTime? last_mod, int? rat_grade, int? jurisdiction, string mail_out, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_sys",
                    Value = creat_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "creat_site",
                    Value = creat_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "first_name",
                    Size = 40,
                    Value = first_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mid_initial",
                    Size = 10,
                    Value = mid_initial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_name",
                    Size = 30,
                    Value = last_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "other_name",
                    Size = 30,
                    Value = other_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name_title",
                    Size = 15,
                    Value = name_title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_addr1",
                    Size = 255,
                    Value = res_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_addr2",
                    Size = 60,
                    Value = res_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_locality",
                    Size = 30,
                    Value = res_locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_state",
                    Size = 30,
                    Value = res_state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_country",
                    Size = 30,
                    Value = res_country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "res_post",
                    Size = 10,
                    Value = res_post ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr1",
                    Size = 60,
                    Value = pos_addr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pos_addr2",
                    Size = 60,
                    Value = pos_addr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state_prov",
                    Size = 30,
                    Value = state_prov ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 30,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "hm_phone",
                    Size = 20,
                    Value = hm_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "wk_phone",
                    Size = 20,
                    Value = wk_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fax",
                    Size = 20,
                    Value = fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "next_of_kin",
                    Size = 40,
                    Value = next_of_kin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nok_phone",
                    Size = 20,
                    Value = nok_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dob",
                    Value = dob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sex",
                    Size = 1,
                    Value = sex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_start",
                    Value = susp_start ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "susp_end",
                    Value = susp_end ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "mem_id",
                    Value = mem_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "rat_grade",
                    Value = rat_grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction",
                    Value = jurisdiction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mail_out",
                    Size = 1,
                    Value = mail_out ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_patron_v2] @id, @creat_sys, @creat_site, @first_name, @mid_initial, @last_name, @other_name, @name_title, @res_addr1, @res_addr2, @res_locality, @res_state, @res_country, @res_post, @pos_addr1, @pos_addr2, @locality, @state_prov, @country, @post_code, @hm_phone, @wk_phone, @fax, @mobile, @email, @next_of_kin, @nok_phone, @dob, @sex, @status, @creat_date, @exp_date, @susp_start, @susp_end, @mem_id, @last_mod, @rat_grade, @jurisdiction, @mail_out, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_player_choice_statsAsync(short? site_id, short? manufacturer_id, int? ssan, int? game_version_number, DateTime? start_datetime, int? number_of_elements, int? element_size, string player_choices_array, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "manufacturer_id",
                    Value = manufacturer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "game_version_number",
                    Value = game_version_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "number_of_elements",
                    Value = number_of_elements ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "element_size",
                    Value = element_size ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "player_choices_array",
                    Size = 160,
                    Value = player_choices_array ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_player_choice_stats] @site_id, @manufacturer_id, @ssan, @game_version_number, @start_datetime, @number_of_elements, @element_size, @player_choices_array, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_player_exclusion_patron_typesAsync(short? site_id, decimal? transaction_id, decimal? patron_id, byte? exclusion_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "exclusion_type_id",
                    Value = exclusion_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_player_exclusion_patron_types] @site_id, @transaction_id, @patron_id, @exclusion_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_player_exclusion_transactionAsync(decimal? transaction_id, short? site_id, decimal? patron_id, byte? transaction_type_id, byte? exclusion_type_id, DateTime? transaction_datetime, string user_id, string comment_1, string comment_2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Precision = 18,
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_type_id",
                    Value = transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "exclusion_type_id",
                    Value = exclusion_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 16,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 255,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 255,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_player_exclusion_transaction] @transaction_id, @site_id, @patron_id, @transaction_type_id, @exclusion_type_id, @transaction_datetime, @user_id, @comment_1, @comment_2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_configurationAsync(short? css_site_id, decimal? id, string enabled_flag, short? tracking_type_id, short? point_purge_timeframe_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_timeframe_id",
                    Value = point_purge_timeframe_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_configuration] @css_site_id, @id, @enabled_flag, @tracking_type_id, @point_purge_timeframe_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_configuration_v2Async(short? css_site_id, decimal? id, string enabled_flag, short? tracking_type_id, short? point_purge_timeframe_id, string user_id, DateTime? event_time, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_timeframe_id",
                    Value = point_purge_timeframe_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "event_time",
                    Value = event_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_configuration_v2] @css_site_id, @id, @enabled_flag, @tracking_type_id, @point_purge_timeframe_id, @user_id, @event_time", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_membership_noAsync(decimal? id, decimal? point_purge_configuration_id, int? membership_id_min, int? membership_id_max, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id_min",
                    Value = membership_id_min ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id_max",
                    Value = membership_id_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_membership_no] @id, @point_purge_configuration_id, @membership_id_min, @membership_id_max, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_membership_no_v2Async(decimal? id, decimal? point_purge_configuration_id, int? membership_id_min, int? membership_id_max, short? css_site_id, string user_id, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id_min",
                    Value = membership_id_min ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id_max",
                    Value = membership_id_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_membership_no_v2] @id, @point_purge_configuration_id, @membership_id_min, @membership_id_max, @css_site_id, @user_id, @EventTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_membership_typeAsync(decimal? point_purge_configuration_id, int? membership_type_id, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_membership_type] @point_purge_configuration_id, @membership_type_id, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_membership_type_v2Async(decimal? point_purge_configuration_id, int? membership_type_id, short? css_site_id, string user_id, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_type_id",
                    Value = membership_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_membership_type_v2] @point_purge_configuration_id, @membership_type_id, @css_site_id, @user_id, @EventTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_pat_statusAsync(decimal? point_purge_configuration_id, string patron_status, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_status",
                    Size = 10,
                    Value = patron_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_pat_status] @point_purge_configuration_id, @patron_status, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_pat_status_v2Async(decimal? point_purge_configuration_id, string patron_status, short? css_site_id, string user_id, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_status",
                    Size = 10,
                    Value = patron_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_pat_status_v2] @point_purge_configuration_id, @patron_status, @css_site_id, @user_id, @EventTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_ratingAsync(decimal? point_purge_configuration_id, int? rating_grade_id, short? css_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_rating] @point_purge_configuration_id, @rating_grade_id, @css_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_rating_v2Async(decimal? point_purge_configuration_id, int? rating_grade_id, short? css_site_id, string user_id, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_rating_v2] @point_purge_configuration_id, @rating_grade_id, @css_site_id, @user_id, @EventTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_timeframeAsync(short? css_site_id, decimal? id, decimal? point_purge_configuration_id, DateTime? configuration_datetime, string configuration_string, byte? configuration_number, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "configuration_datetime",
                    Value = configuration_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "configuration_string",
                    Size = 20,
                    Value = configuration_string ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "configuration_number",
                    Value = configuration_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_timeframe] @css_site_id, @id, @point_purge_configuration_id, @configuration_datetime, @configuration_string, @configuration_number, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_point_purge_timeframe_v2Async(short? css_site_id, decimal? id, decimal? point_purge_configuration_id, DateTime? configuration_datetime, string configuration_string, byte? configuration_number, string user_id, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "point_purge_configuration_id",
                    Precision = 18,
                    Value = point_purge_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "configuration_datetime",
                    Value = configuration_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "configuration_string",
                    Size = 20,
                    Value = configuration_string ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "configuration_number",
                    Value = configuration_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_point_purge_timeframe_v2] @css_site_id, @id, @point_purge_configuration_id, @configuration_datetime, @configuration_string, @configuration_number, @user_id, @EventTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_points_play_configurationAsync(decimal? id, short? css_site_id, string enabled_flag, string description, DateTime? creation_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creation_datetime",
                    Value = creation_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_points_play_configuration] @id, @css_site_id, @enabled_flag, @description, @creation_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_points_play_denominationAsync(decimal? points_play_configuration_id, short? css_site_id, decimal? drawdown_denomination_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "points_play_configuration_id",
                    Precision = 18,
                    Value = points_play_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "drawdown_denomination_id",
                    Precision = 18,
                    Value = drawdown_denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_points_play_denomination] @points_play_configuration_id, @css_site_id, @drawdown_denomination_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_points_play_rating_gradeAsync(decimal? points_play_configuration_id, short? css_site_id, decimal? rating_grade_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "points_play_configuration_id",
                    Precision = 18,
                    Value = points_play_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Precision = 18,
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_points_play_rating_grade] @points_play_configuration_id, @css_site_id, @rating_grade_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_points_play_tracking_typeAsync(decimal? points_play_configuration_id, short? css_site_id, byte? tracking_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "points_play_configuration_id",
                    Precision = 18,
                    Value = points_play_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_points_play_tracking_type] @points_play_configuration_id, @css_site_id, @tracking_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_points_play_transactionResult>> update_points_play_transactionAsync(short? site_id, decimal? patron_id, DateTime? transaction_datetime, int? egm_serial_number, int? card_id, int? cashless_in_meter_before, int? cashless_in_meter_after, string ssan, short? position, short? css_site_id, int? transaction_id, decimal? points_play_configuration_id, decimal? points_deducted, decimal? points_balance, decimal? ect_amount, short? summary_level, short? floor, short? bank, short? denomination_id, int? egm_cashless_transaction_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_in_meter_before",
                    Value = cashless_in_meter_before ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cashless_in_meter_after",
                    Value = cashless_in_meter_after ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_id",
                    Value = transaction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_play_configuration_id",
                    Precision = 18,
                    Value = points_play_configuration_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "points_deducted",
                    Precision = 18,
                    Value = points_deducted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "points_balance",
                    Precision = 18,
                    Value = points_balance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ect_amount",
                    Precision = 18,
                    Value = ect_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_cashless_transaction_type_id",
                    Value = egm_cashless_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_points_play_transactionResult>("EXEC @returnValue = [dbo].[update_points_play_transaction] @site_id, @patron_id, @transaction_datetime, @egm_serial_number, @card_id, @cashless_in_meter_before, @cashless_in_meter_after, @ssan, @position, @css_site_id, @transaction_id, @points_play_configuration_id, @points_deducted, @points_balance, @ect_amount, @summary_level, @floor, @bank, @denomination_id, @egm_cashless_transaction_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_poolAsync(short? site_id, int? pool_num, string pool_type, string pool_name, int? reset, int? max_val, float? inc, DateTime? created, DateTime? retired, string wghted_flag, string prze_share, int? update_time, string sub_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_type",
                    Size = 8,
                    Value = pool_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_val",
                    Value = max_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inc",
                    Value = inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Real,
                },
                new SqlParameter
                {
                    ParameterName = "created",
                    Value = created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "retired",
                    Value = retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "update_time",
                    Value = update_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sub_type",
                    Size = 8,
                    Value = sub_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pool] @site_id, @pool_num, @pool_type, @pool_name, @reset, @max_val, @inc, @created, @retired, @wghted_flag, @prze_share, @update_time, @sub_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pool_deviceAsync(short? pl_site_id, int? pool_num, int? egm_ser_num, short? gme_num, int? lh_meter, int? overflow, string dev_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pl_site_id",
                    Value = pl_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gme_num",
                    Value = gme_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "lh_meter",
                    Value = lh_meter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "overflow",
                    Value = overflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dev_type",
                    Size = 8,
                    Value = dev_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pool_device] @pl_site_id, @pool_num, @egm_ser_num, @gme_num, @lh_meter, @overflow, @dev_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pool_groupAsync(short? site_id, short? group_id, string desc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_id",
                    Value = group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pool_group] @site_id, @group_id, @desc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pool_group_levelAsync(short? site_id, short? jp_grp_id, short? level_num, short? pool_site, int? pool_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "jp_grp_id",
                    Value = jp_grp_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "level_num",
                    Value = level_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_site",
                    Value = pool_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_num",
                    Value = pool_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pool_group_level] @site_id, @jp_grp_id, @level_num, @pool_site, @pool_num", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_pool_group_v2Async(short? site_id, short? group_id, string desc, string group_type, string shared_progressive_flag, DateTime? date_retired, int? approval_number, string approval_name, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_id",
                    Value = group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "group_type",
                    Size = 1,
                    Value = group_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "shared_progressive_flag",
                    Size = 1,
                    Value = shared_progressive_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "date_retired",
                    Value = date_retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "approval_number",
                    Value = approval_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "approval_name",
                    Size = 20,
                    Value = approval_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_pool_group_v2] @site_id, @group_id, @desc, @group_type, @shared_progressive_flag, @date_retired, @approval_number, @approval_name, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_prizedrawAsync(decimal? id, short? css_site_id, string prize_description, string enabled, string prize_type, int? probability, DateTime? starts, DateTime? ends, string day_of_week, string month_of_year, int? prize_value, int? points_value, int? points_type, string you_have_won, int? days_to_expiry, string ticket_text, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 100,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_type",
                    Size = 8,
                    Value = prize_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "probability",
                    Value = probability ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "starts",
                    Value = starts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ends",
                    Value = ends ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Size = 3,
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month_of_year",
                    Size = 3,
                    Value = month_of_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_type",
                    Value = points_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "you_have_won",
                    Size = 100,
                    Value = you_have_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "days_to_expiry",
                    Value = days_to_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_prizedraw] @id, @css_site_id, @prize_description, @enabled, @prize_type, @probability, @starts, @ends, @day_of_week, @month_of_year, @prize_value, @points_value, @points_type, @you_have_won, @days_to_expiry, @ticket_text, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_prizedraw_V2Async(decimal? id, short? css_site_id, string prize_description, string enabled, string prize_type, int? probability, DateTime? starts, DateTime? ends, string day_of_week, string month_of_year, int? prize_value, int? points_value, int? points_type, string you_have_won, int? days_to_expiry, string ticket_text, int? RatingGrade, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 100,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_type",
                    Size = 8,
                    Value = prize_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "probability",
                    Value = probability ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "starts",
                    Value = starts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ends",
                    Value = ends ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Size = 3,
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month_of_year",
                    Size = 3,
                    Value = month_of_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_type",
                    Value = points_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "you_have_won",
                    Size = 100,
                    Value = you_have_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "days_to_expiry",
                    Value = days_to_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RatingGrade",
                    Value = RatingGrade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_prizedraw_V2] @id, @css_site_id, @prize_description, @enabled, @prize_type, @probability, @starts, @ends, @day_of_week, @month_of_year, @prize_value, @points_value, @points_type, @you_have_won, @days_to_expiry, @ticket_text, @RatingGrade, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_prizedraw_V3Async(decimal? id, short? css_site_id, string prize_description, string enabled, string prize_type, int? probability, DateTime? starts, DateTime? ends, string day_of_week, string month_of_year, int? prize_value, int? points_value, int? points_type, string you_have_won, int? days_to_expiry, string ticket_text, int? RatingGrade, string birthday_prize_criteria_type, int? birthday_prize_days_span, int? prize_quantity, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 100,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_type",
                    Size = 8,
                    Value = prize_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "probability",
                    Value = probability ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "starts",
                    Value = starts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ends",
                    Value = ends ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Size = 3,
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month_of_year",
                    Size = 3,
                    Value = month_of_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_type",
                    Value = points_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "you_have_won",
                    Size = 100,
                    Value = you_have_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "days_to_expiry",
                    Value = days_to_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RatingGrade",
                    Value = RatingGrade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_criteria_type",
                    Size = 1,
                    Value = birthday_prize_criteria_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_days_span",
                    Value = birthday_prize_days_span ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_quantity",
                    Value = prize_quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_prizedraw_V3] @id, @css_site_id, @prize_description, @enabled, @prize_type, @probability, @starts, @ends, @day_of_week, @month_of_year, @prize_value, @points_value, @points_type, @you_have_won, @days_to_expiry, @ticket_text, @RatingGrade, @birthday_prize_criteria_type, @birthday_prize_days_span, @prize_quantity, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_prizedraw_v4Async(decimal? id, short? css_site_id, string prize_description, string enabled, string prize_type, int? probability, DateTime? starts, DateTime? ends, string day_of_week, string month_of_year, int? prize_value, int? points_value, int? points_type, string you_have_won, int? days_to_expiry, string ticket_text, int? RatingGrade, string birthday_prize_criteria_type, int? birthday_prize_days_span, int? prize_quantity, string simplay_trigger_prize, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 100,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_type",
                    Size = 8,
                    Value = prize_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "probability",
                    Value = probability ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "starts",
                    Value = starts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ends",
                    Value = ends ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Size = 3,
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month_of_year",
                    Size = 3,
                    Value = month_of_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_type",
                    Value = points_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "you_have_won",
                    Size = 100,
                    Value = you_have_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "days_to_expiry",
                    Value = days_to_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RatingGrade",
                    Value = RatingGrade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_criteria_type",
                    Size = 1,
                    Value = birthday_prize_criteria_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_days_span",
                    Value = birthday_prize_days_span ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_quantity",
                    Value = prize_quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "simplay_trigger_prize",
                    Size = 1,
                    Value = simplay_trigger_prize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_prizedraw_v4] @id, @css_site_id, @prize_description, @enabled, @prize_type, @probability, @starts, @ends, @day_of_week, @month_of_year, @prize_value, @points_value, @points_type, @you_have_won, @days_to_expiry, @ticket_text, @RatingGrade, @birthday_prize_criteria_type, @birthday_prize_days_span, @prize_quantity, @simplay_trigger_prize, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_prizedraw_v5Async(decimal? id, short? css_site_id, string prize_description, string enabled, string prize_type, int? probability, DateTime? starts, DateTime? ends, string day_of_week, string month_of_year, int? prize_value, int? points_value, int? points_type, string you_have_won, int? days_to_expiry, string ticket_text, int? RatingGrade, string birthday_prize_criteria_type, int? birthday_prize_days_span, int? prize_quantity, string simplay_trigger_prize, DateTime? second_chance_draw, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 100,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_type",
                    Size = 8,
                    Value = prize_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "probability",
                    Value = probability ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "starts",
                    Value = starts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ends",
                    Value = ends ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Size = 3,
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month_of_year",
                    Size = 3,
                    Value = month_of_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_type",
                    Value = points_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "you_have_won",
                    Size = 100,
                    Value = you_have_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "days_to_expiry",
                    Value = days_to_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RatingGrade",
                    Value = RatingGrade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_criteria_type",
                    Size = 1,
                    Value = birthday_prize_criteria_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_days_span",
                    Value = birthday_prize_days_span ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_quantity",
                    Value = prize_quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "simplay_trigger_prize",
                    Size = 1,
                    Value = simplay_trigger_prize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "second_chance_draw",
                    Value = second_chance_draw ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_prizedraw_v5] @id, @css_site_id, @prize_description, @enabled, @prize_type, @probability, @starts, @ends, @day_of_week, @month_of_year, @prize_value, @points_value, @points_type, @you_have_won, @days_to_expiry, @ticket_text, @RatingGrade, @birthday_prize_criteria_type, @birthday_prize_days_span, @prize_quantity, @simplay_trigger_prize, @second_chance_draw, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_prizedraw_v6Async(decimal? id, short? css_site_id, string prize_description, string enabled, string prize_type, int? probability, DateTime? starts, DateTime? ends, string day_of_week, string month_of_year, int? prize_value, int? points_value, int? points_type, string you_have_won, int? days_to_expiry, string ticket_text, int? RatingGrade, string birthday_prize_criteria_type, int? birthday_prize_days_span, int? prize_quantity, string simplay_trigger_prize, DateTime? second_chance_draw, string rating_grade_list, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 100,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_type",
                    Size = 8,
                    Value = prize_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "probability",
                    Value = probability ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "starts",
                    Value = starts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ends",
                    Value = ends ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Size = 3,
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month_of_year",
                    Size = 3,
                    Value = month_of_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_type",
                    Value = points_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "you_have_won",
                    Size = 100,
                    Value = you_have_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "days_to_expiry",
                    Value = days_to_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RatingGrade",
                    Value = RatingGrade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_criteria_type",
                    Size = 1,
                    Value = birthday_prize_criteria_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_days_span",
                    Value = birthday_prize_days_span ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_quantity",
                    Value = prize_quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "simplay_trigger_prize",
                    Size = 1,
                    Value = simplay_trigger_prize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "second_chance_draw",
                    Value = second_chance_draw ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_list",
                    Size = 100,
                    Value = rating_grade_list ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_prizedraw_v6] @id, @css_site_id, @prize_description, @enabled, @prize_type, @probability, @starts, @ends, @day_of_week, @month_of_year, @prize_value, @points_value, @points_type, @you_have_won, @days_to_expiry, @ticket_text, @RatingGrade, @birthday_prize_criteria_type, @birthday_prize_days_span, @prize_quantity, @simplay_trigger_prize, @second_chance_draw, @rating_grade_list, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_prizedraw_v7Async(decimal? id, short? css_site_id, string prize_description, string enabled, string prize_type, int? probability, DateTime? starts, DateTime? ends, string day_of_week, string month_of_year, int? prize_value, int? points_value, int? points_type, string you_have_won, int? days_to_expiry, string ticket_text, int? RatingGrade, string birthday_prize_criteria_type, int? birthday_prize_days_span, int? prize_quantity, string simplay_trigger_prize, DateTime? second_chance_draw, string rating_grade_list, string print_expiry_date_flag, string prize_does_not_expire_flag, string prize_expires_end_of_month_flag, DateTime? prize_expiry_datetime, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 100,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_type",
                    Size = 8,
                    Value = prize_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "probability",
                    Value = probability ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "starts",
                    Value = starts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ends",
                    Value = ends ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Size = 3,
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month_of_year",
                    Size = 3,
                    Value = month_of_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_type",
                    Value = points_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "you_have_won",
                    Size = 100,
                    Value = you_have_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "days_to_expiry",
                    Value = days_to_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RatingGrade",
                    Value = RatingGrade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_criteria_type",
                    Size = 1,
                    Value = birthday_prize_criteria_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_days_span",
                    Value = birthday_prize_days_span ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_quantity",
                    Value = prize_quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "simplay_trigger_prize",
                    Size = 1,
                    Value = simplay_trigger_prize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "second_chance_draw",
                    Value = second_chance_draw ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_list",
                    Size = 100,
                    Value = rating_grade_list ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "print_expiry_date_flag",
                    Size = 1,
                    Value = print_expiry_date_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_does_not_expire_flag",
                    Size = 1,
                    Value = prize_does_not_expire_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_expires_end_of_month_flag",
                    Size = 1,
                    Value = prize_expires_end_of_month_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_expiry_datetime",
                    Value = prize_expiry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_prizedraw_v7] @id, @css_site_id, @prize_description, @enabled, @prize_type, @probability, @starts, @ends, @day_of_week, @month_of_year, @prize_value, @points_value, @points_type, @you_have_won, @days_to_expiry, @ticket_text, @RatingGrade, @birthday_prize_criteria_type, @birthday_prize_days_span, @prize_quantity, @simplay_trigger_prize, @second_chance_draw, @rating_grade_list, @print_expiry_date_flag, @prize_does_not_expire_flag, @prize_expires_end_of_month_flag, @prize_expiry_datetime, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_prizedraw_v8Async(decimal? id, short? css_site_id, string prize_description, string enabled, string prize_type, int? probability, DateTime? starts, DateTime? ends, string day_of_week, string month_of_year, int? prize_value, int? points_value, int? points_type, string you_have_won, int? days_to_expiry, string ticket_text, int? RatingGrade, string birthday_prize_criteria_type, int? birthday_prize_days_span, int? prize_quantity, string simplay_trigger_prize, DateTime? second_chance_draw, string rating_grade_list, string print_expiry_date_flag, string prize_does_not_expire_flag, string prize_expires_end_of_month_flag, DateTime? prize_expiry_datetime, string sex, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 100,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled",
                    Size = 1,
                    Value = enabled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_type",
                    Size = 8,
                    Value = prize_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "probability",
                    Value = probability ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "starts",
                    Value = starts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ends",
                    Value = ends ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "day_of_week",
                    Size = 3,
                    Value = day_of_week ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month_of_year",
                    Size = 3,
                    Value = month_of_year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "points_type",
                    Value = points_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "you_have_won",
                    Size = 100,
                    Value = you_have_won ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "days_to_expiry",
                    Value = days_to_expiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_text",
                    Size = 100,
                    Value = ticket_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RatingGrade",
                    Value = RatingGrade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_criteria_type",
                    Size = 1,
                    Value = birthday_prize_criteria_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "birthday_prize_days_span",
                    Value = birthday_prize_days_span ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_quantity",
                    Value = prize_quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "simplay_trigger_prize",
                    Size = 1,
                    Value = simplay_trigger_prize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "second_chance_draw",
                    Value = second_chance_draw ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_list",
                    Size = 100,
                    Value = rating_grade_list ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "print_expiry_date_flag",
                    Size = 1,
                    Value = print_expiry_date_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_does_not_expire_flag",
                    Size = 1,
                    Value = prize_does_not_expire_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_expires_end_of_month_flag",
                    Size = 1,
                    Value = prize_expires_end_of_month_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "prize_expiry_datetime",
                    Value = prize_expiry_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sex",
                    Size = 1,
                    Value = sex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_prizedraw_v8] @id, @css_site_id, @prize_description, @enabled, @prize_type, @probability, @starts, @ends, @day_of_week, @month_of_year, @prize_value, @points_value, @points_type, @you_have_won, @days_to_expiry, @ticket_text, @RatingGrade, @birthday_prize_criteria_type, @birthday_prize_days_span, @prize_quantity, @simplay_trigger_prize, @second_chance_draw, @rating_grade_list, @print_expiry_date_flag, @prize_does_not_expire_flag, @prize_expires_end_of_month_flag, @prize_expiry_datetime, @sex, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_bank_depositsAsync(short? site_id, short? deposit_number, DateTime? deposit_date, int? deposit_amount, string comment_1, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "deposit_number",
                    Value = deposit_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "deposit_date",
                    Value = deposit_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "deposit_amount",
                    Value = deposit_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 100,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_bank_deposits] @site_id, @deposit_number, @deposit_date, @deposit_amount, @comment_1", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_bank_deposits_v2Async(short? site_id, short? deposit_number, DateTime? deposit_date, int? deposit_amount, string comment_1, decimal? simplay_deposit_amount, decimal? atm_refill, decimal? atm_refill_reimbursement, DateTime? reimbursement_date, string ref_deposit_num, decimal? simplay_float_variance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "deposit_number",
                    Value = deposit_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "deposit_date",
                    Value = deposit_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "deposit_amount",
                    Value = deposit_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 100,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "simplay_deposit_amount",
                    Precision = 18,
                    Value = simplay_deposit_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "atm_refill",
                    Precision = 18,
                    Value = atm_refill ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "atm_refill_reimbursement",
                    Precision = 18,
                    Value = atm_refill_reimbursement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "reimbursement_date",
                    Value = reimbursement_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ref_deposit_num",
                    Size = 50,
                    Value = ref_deposit_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "simplay_float_variance",
                    Precision = 18,
                    Value = simplay_float_variance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_bank_deposits_v2] @site_id, @deposit_number, @deposit_date, @deposit_amount, @comment_1, @simplay_deposit_amount, @atm_refill, @atm_refill_reimbursement, @reimbursement_date, @ref_deposit_num, @simplay_float_variance", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_egm_seedsAsync(DateTime? seed_date, string seed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "seed_date",
                    Value = seed_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "seed",
                    Size = 40,
                    Value = seed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_egm_seeds] @seed_date, @seed", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_egm_seeds_bulkAsync(int? year, int? month, string seed01, string seed02, string seed03, string seed04, string seed05, string seed06, string seed07, string seed08, string seed09, string seed10, string seed11, string seed12, string seed13, string seed14, string seed15, string seed16, string seed17, string seed18, string seed19, string seed20, string seed21, string seed22, string seed23, string seed24, string seed25, string seed26, string seed27, string seed28, string seed29, string seed30, string seed31, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "seed01",
                    Size = 64,
                    Value = seed01 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed02",
                    Size = 64,
                    Value = seed02 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed03",
                    Size = 64,
                    Value = seed03 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed04",
                    Size = 64,
                    Value = seed04 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed05",
                    Size = 64,
                    Value = seed05 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed06",
                    Size = 64,
                    Value = seed06 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed07",
                    Size = 64,
                    Value = seed07 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed08",
                    Size = 64,
                    Value = seed08 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed09",
                    Size = 64,
                    Value = seed09 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed10",
                    Size = 64,
                    Value = seed10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed11",
                    Size = 64,
                    Value = seed11 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed12",
                    Size = 64,
                    Value = seed12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed13",
                    Size = 64,
                    Value = seed13 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed14",
                    Size = 64,
                    Value = seed14 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed15",
                    Size = 64,
                    Value = seed15 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed16",
                    Size = 64,
                    Value = seed16 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed17",
                    Size = 64,
                    Value = seed17 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed18",
                    Size = 64,
                    Value = seed18 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed19",
                    Size = 64,
                    Value = seed19 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed20",
                    Size = 64,
                    Value = seed20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed21",
                    Size = 64,
                    Value = seed21 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed22",
                    Size = 64,
                    Value = seed22 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed23",
                    Size = 64,
                    Value = seed23 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed24",
                    Size = 64,
                    Value = seed24 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed25",
                    Size = 64,
                    Value = seed25 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed26",
                    Size = 64,
                    Value = seed26 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed27",
                    Size = 64,
                    Value = seed27 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed28",
                    Size = 64,
                    Value = seed28 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed29",
                    Size = 64,
                    Value = seed29 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed30",
                    Size = 64,
                    Value = seed30 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "seed31",
                    Size = 64,
                    Value = seed31 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_egm_seeds_bulk] @year, @month, @seed01, @seed02, @seed03, @seed04, @seed05, @seed06, @seed07, @seed08, @seed09, @seed10, @seed11, @seed12, @seed13, @seed14, @seed15, @seed16, @seed17, @seed18, @seed19, @seed20, @seed21, @seed22, @seed23, @seed24, @seed25, @seed26, @seed27, @seed28, @seed29, @seed30, @seed31", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_egm_seeds_v2Async(DateTime? seed_date, string seed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "seed_date",
                    Value = seed_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "seed",
                    Size = 64,
                    Value = seed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_egm_seeds_v2] @seed_date, @seed", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_egm_signature_listAsync(string soft_app_num, string soft_id, short? man_id, string soft_name, DateTime? sig_date, string signature, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "soft_app_num",
                    Size = 10,
                    Value = soft_app_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "soft_id",
                    Size = 10,
                    Value = soft_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "soft_name",
                    Size = 30,
                    Value = soft_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sig_date",
                    Value = sig_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "signature",
                    Size = 40,
                    Value = signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_egm_signature_list] @soft_app_num, @soft_id, @man_id, @soft_name, @sig_date, @signature", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_egm_signature_list_v2Async(string soft_app_num, string soft_id, short? man_id, string soft_name, DateTime? sig_date, string signature, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "soft_app_num",
                    Size = 10,
                    Value = soft_app_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "soft_id",
                    Size = 10,
                    Value = soft_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "soft_name",
                    Size = 80,
                    Value = soft_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sig_date",
                    Value = sig_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "signature",
                    Size = 64,
                    Value = signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_egm_signature_list_v2] @soft_app_num, @soft_id, @man_id, @soft_name, @sig_date, @signature", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_egm_signatures_bulkAsync(int? year, int? month, int? manufacturerId, string softwareSetApprovalNumber, string softwareSetName, string signature01, string signature02, string signature03, string signature04, string signature05, string signature06, string signature07, string signature08, string signature09, string signature10, string signature11, string signature12, string signature13, string signature14, string signature15, string signature16, string signature17, string signature18, string signature19, string signature20, string signature21, string signature22, string signature23, string signature24, string signature25, string signature26, string signature27, string signature28, string signature29, string signature30, string signature31, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "manufacturerId",
                    Value = manufacturerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "softwareSetApprovalNumber",
                    Size = 10,
                    Value = softwareSetApprovalNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "softwareSetName",
                    Size = 80,
                    Value = softwareSetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature01",
                    Size = 64,
                    Value = signature01 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature02",
                    Size = 64,
                    Value = signature02 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature03",
                    Size = 64,
                    Value = signature03 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature04",
                    Size = 64,
                    Value = signature04 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature05",
                    Size = 64,
                    Value = signature05 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature06",
                    Size = 64,
                    Value = signature06 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature07",
                    Size = 64,
                    Value = signature07 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature08",
                    Size = 64,
                    Value = signature08 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature09",
                    Size = 64,
                    Value = signature09 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature10",
                    Size = 64,
                    Value = signature10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature11",
                    Size = 64,
                    Value = signature11 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature12",
                    Size = 64,
                    Value = signature12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature13",
                    Size = 64,
                    Value = signature13 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature14",
                    Size = 64,
                    Value = signature14 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature15",
                    Size = 64,
                    Value = signature15 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature16",
                    Size = 64,
                    Value = signature16 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature17",
                    Size = 64,
                    Value = signature17 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature18",
                    Size = 64,
                    Value = signature18 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature19",
                    Size = 64,
                    Value = signature19 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature20",
                    Size = 64,
                    Value = signature20 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature21",
                    Size = 64,
                    Value = signature21 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature22",
                    Size = 64,
                    Value = signature22 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature23",
                    Size = 64,
                    Value = signature23 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature24",
                    Size = 64,
                    Value = signature24 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature25",
                    Size = 64,
                    Value = signature25 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature26",
                    Size = 64,
                    Value = signature26 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature27",
                    Size = 64,
                    Value = signature27 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature28",
                    Size = 64,
                    Value = signature28 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature29",
                    Size = 64,
                    Value = signature29 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature30",
                    Size = 64,
                    Value = signature30 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "signature31",
                    Size = 64,
                    Value = signature31 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_egm_signatures_bulk] @year, @month, @manufacturerId, @softwareSetApprovalNumber, @softwareSetName, @signature01, @signature02, @signature03, @signature04, @signature05, @signature06, @signature07, @signature08, @signature09, @signature10, @signature11, @signature12, @signature13, @signature14, @signature15, @signature16, @signature17, @signature18, @signature19, @signature20, @signature21, @signature22, @signature23, @signature24, @signature25, @signature26, @signature27, @signature28, @signature29, @signature30, @signature31", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_egm_software_setAsync(int? soft_app_num, int? soft_id, short? man_id, string soft_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "soft_app_num",
                    Value = soft_app_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "soft_id",
                    Value = soft_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "man_id",
                    Value = man_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "soft_name",
                    Size = 30,
                    Value = soft_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_egm_software_set] @soft_app_num, @soft_id, @man_id, @soft_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_jackpot_approvalAsync(int? pool_number, int? approval_number, int? variation_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "approval_number",
                    Value = approval_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "variation_number",
                    Value = variation_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_jackpot_approval] @pool_number, @approval_number, @variation_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_jackpot_approval_v2Async(int? pool_number, int? approval_number, int? set_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "approval_number",
                    Value = approval_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "set_number",
                    Value = set_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_jackpot_approval_v2] @pool_number, @approval_number, @set_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_qogr_seal_approval_V2Async(short? site_id, int? serial_number, DateTime? start_datetime, string name, string licence_number, string old_seal_number, string new_seal_number, int? authority_number, short? device_type_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "serial_number",
                    Value = serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 30,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "licence_number",
                    Size = 15,
                    Value = licence_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "old_seal_number",
                    Size = 15,
                    Value = old_seal_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_seal_number",
                    Size = 15,
                    Value = new_seal_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "authority_number",
                    Value = authority_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "device_type_id",
                    Value = device_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_qogr_seal_approval_V2] @site_id, @serial_number, @start_datetime, @name, @licence_number, @old_seal_number, @new_seal_number, @authority_number, @device_type_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_random_member_drawAsync(short? css_site_id, int? draw_number, DateTime? draw_datetime, decimal? patron_id, int? membership_id, string prize_description, string claimed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "draw_number",
                    Value = draw_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "draw_datetime",
                    Value = draw_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_description",
                    Size = 25,
                    Value = prize_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "claimed",
                    Size = 1,
                    Value = claimed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_random_member_draw] @css_site_id, @draw_number, @draw_datetime, @patron_id, @membership_id, @prize_description, @claimed", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_rating_gradeAsync(int? id, byte? system_id, short? site_id, string description, int? track_id, decimal? min_level, decimal? max_level, string method_type, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_level",
                    Precision = 18,
                    Value = min_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "max_level",
                    Precision = 18,
                    Value = max_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "method_type",
                    Size = 10,
                    Value = method_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_rating_grade] @id, @system_id, @site_id, @description, @track_id, @min_level, @max_level, @method_type, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_rating_grade_v2Async(int? id, byte? system_id, short? site_id, string description, int? track_id, decimal? min_level, decimal? max_level, string method_type, string rating_grade_for_life, short? rating_grade_for_life_months, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_level",
                    Precision = 18,
                    Value = min_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "max_level",
                    Precision = 18,
                    Value = max_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "method_type",
                    Size = 10,
                    Value = method_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_for_life",
                    Size = 1,
                    Value = rating_grade_for_life ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_for_life_months",
                    Value = rating_grade_for_life_months ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_rating_grade_v2] @id, @system_id, @site_id, @description, @track_id, @min_level, @max_level, @method_type, @rating_grade_for_life, @rating_grade_for_life_months, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_redemption_itemAsync(decimal? id, byte? system_id, short? site_id, string description, int? mon_value, byte? track_id, string cash_flag, string available, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mon_value",
                    Value = mon_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "cash_flag",
                    Size = 1,
                    Value = cash_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "available",
                    Size = 1,
                    Value = available ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_redemption_item] @id, @system_id, @site_id, @description, @mon_value, @track_id, @cash_flag, @available, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_redemption_item_v2Async(decimal? id, byte? system_id, short? site_id, string description, int? mon_value, byte? track_id, string cash_flag, string available, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mon_value",
                    Value = mon_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "cash_flag",
                    Size = 1,
                    Value = cash_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "available",
                    Size = 1,
                    Value = available ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_redemption_item_v2] @id, @system_id, @site_id, @description, @mon_value, @track_id, @cash_flag, @available, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_redemption_item_v3Async(decimal? id, byte? system_id, short? site_id, string description, int? mon_value, byte? track_id, string cash_flag, string available, string comment_1, string comment_2, string comment_3, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mon_value",
                    Value = mon_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "cash_flag",
                    Size = 1,
                    Value = cash_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "available",
                    Size = 1,
                    Value = available ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 60,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 60,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 60,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_redemption_item_v3] @id, @system_id, @site_id, @description, @mon_value, @track_id, @cash_flag, @available, @comment_1, @comment_2, @comment_3, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_redemption_item_v4Async(decimal? id, byte? system_id, short? site_id, string description, int? mon_value, byte? track_id, string cash_flag, string available, string comment_1, string comment_2, string comment_3, string user_id, int? quantity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mon_value",
                    Value = mon_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "cash_flag",
                    Size = 1,
                    Value = cash_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "available",
                    Size = 1,
                    Value = available ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 60,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 60,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 60,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "quantity",
                    Value = quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_redemption_item_v4] @id, @system_id, @site_id, @description, @mon_value, @track_id, @cash_flag, @available, @comment_1, @comment_2, @comment_3, @user_id, @quantity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_redemption_item_v5Async(decimal? id, byte? system_id, short? site_id, string description, int? mon_value, byte? track_id, string cash_flag, string available, string comment_1, string comment_2, string comment_3, string user_id, int? quantity, string rating_grades, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 60,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mon_value",
                    Value = mon_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "cash_flag",
                    Size = 1,
                    Value = cash_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "available",
                    Size = 1,
                    Value = available ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 60,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 60,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 60,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "quantity",
                    Value = quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grades",
                    Size = 255,
                    Value = rating_grades ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_redemption_item_v5] @id, @system_id, @site_id, @description, @mon_value, @track_id, @cash_flag, @available, @comment_1, @comment_2, @comment_3, @user_id, @quantity, @rating_grades", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_redemption_voucherAsync(decimal? id, byte? system_id, short? site_id, decimal? account_id, decimal? patron_id, DateTime? creat_date, DateTime? exp_date, decimal? red_item, decimal? amount, int? quantity, string comment_1, string comment_2, string comment_3, string status, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "red_item",
                    Precision = 18,
                    Value = red_item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "quantity",
                    Value = quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 60,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 60,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 60,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_redemption_voucher] @id, @system_id, @site_id, @account_id, @patron_id, @creat_date, @exp_date, @red_item, @amount, @quantity, @comment_1, @comment_2, @comment_3, @status, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_redemption_voucher_V2Async(decimal? id, byte? system_id, short? site_id, decimal? account_id, decimal? patron_id, DateTime? creat_date, DateTime? exp_date, decimal? red_item, decimal? amount, int? quantity, string comment_1, string comment_2, string comment_3, string status, decimal? linked_voucher, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "red_item",
                    Precision = 18,
                    Value = red_item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "quantity",
                    Value = quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 60,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 60,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 60,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_voucher",
                    Precision = 18,
                    Value = linked_voucher ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_redemption_voucher_V2] @id, @system_id, @site_id, @account_id, @patron_id, @creat_date, @exp_date, @red_item, @amount, @quantity, @comment_1, @comment_2, @comment_3, @status, @linked_voucher, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_redemption_voucher_v3Async(decimal? id, byte? system_id, short? site_id, decimal? account_id, decimal? patron_id, DateTime? creat_date, DateTime? exp_date, decimal? red_item, decimal? amount, int? quantity, string comment_1, string comment_2, string comment_3, string status, decimal? linked_voucher, DateTime? event_time, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "account_id",
                    Precision = 18,
                    Value = account_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "patron_id",
                    Precision = 18,
                    Value = patron_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "creat_date",
                    Value = creat_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "exp_date",
                    Value = exp_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "red_item",
                    Precision = 18,
                    Value = red_item ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 18,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "quantity",
                    Value = quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 60,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 60,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 60,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_voucher",
                    Precision = 18,
                    Value = linked_voucher ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "event_time",
                    Value = event_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_redemption_voucher_v3] @id, @system_id, @site_id, @account_id, @patron_id, @creat_date, @exp_date, @red_item, @amount, @quantity, @comment_1, @comment_2, @comment_3, @status, @linked_voucher, @event_time, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_revenue_summaryResult>> update_revenue_summaryAsync(short? site_id, DateTime? clearance_start_datetime, int? egm_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "clearance_start_datetime",
                    Value = clearance_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_revenue_summaryResult>("EXEC @returnValue = [dbo].[update_revenue_summary] @site_id, @clearance_start_datetime, @egm_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_s_batch_confirm_typeAsync(decimal? id, byte? system_id, short? css_site_id, int? batch_type, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "batch_type",
                    Value = batch_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_s_batch_confirm_type] @id, @system_id, @css_site_id, @batch_type, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_sec_groups_unloadAsync(short? site_id, string group_name, string user_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 16,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_name",
                    Size = 16,
                    Value = user_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_sec_groups_unload] @site_id, @group_name, @user_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_sec_info_unloadAsync(short? site_id, string application, string window, string control, string user_name, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "application",
                    Size = 32,
                    Value = application ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "window",
                    Size = 64,
                    Value = window ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "control",
                    Size = 128,
                    Value = control ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_name",
                    Size = 16,
                    Value = user_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_sec_info_unload] @site_id, @application, @window, @control, @user_name, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_sec_users_unloadAsync(short? site_id, string name, string description, int? priority, int? user_type, string password, DateTime? password_expires, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 16,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 32,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_type",
                    Value = user_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 10,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password_expires",
                    Value = password_expires ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_sec_users_unload] @site_id, @name, @description, @priority, @user_type, @password, @password_expires", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_security_groupingsAsync(short? site_id, string group_name, string user_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "group_name",
                    Size = 16,
                    Value = group_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_name",
                    Size = 16,
                    Value = user_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_security_groupings] @site_id, @group_name, @user_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_security_infoAsync(short? site_id, string application, string window, string control, string user_name, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "application",
                    Size = 32,
                    Value = application ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "window",
                    Size = 64,
                    Value = window ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "control",
                    Size = 128,
                    Value = control ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_name",
                    Size = 16,
                    Value = user_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_security_info] @site_id, @application, @window, @control, @user_name, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_security_usersAsync(short? site_id, string name, string description, int? priority, int? user_type, string password, DateTime? password_expires, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 16,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 32,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "priority",
                    Value = priority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_type",
                    Value = user_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 10,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password_expires",
                    Value = password_expires ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_security_users] @site_id, @name, @description, @priority, @user_type, @password, @password_expires", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_signatureAsync(short? site_id, decimal? ticket_number, int? egm_serial_number, DateTime? transaction_datetime, string user_id, DateTime? last_action_datetime, Guid? signature_link_id, Guid? attendant_signature_id, string attendant_name, string attendant_licence, string attendant_signature, Guid? winner_signature_id, string winner_name, string winner_address, string winner_phone, string winner_signature, Guid? witness_signature_id, string witness_name, string witness_licence, string witness_signature, Guid? manager_signature_id, string manager_name, string manager_licence, string manager_signature, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_datetime",
                    Value = last_action_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "signature_link_id",
                    Value = signature_link_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_signature_id",
                    Value = attendant_signature_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_name",
                    Size = 30,
                    Value = attendant_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_licence",
                    Size = 25,
                    Value = attendant_licence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_signature",
                    Size = 5000,
                    Value = attendant_signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "winner_signature_id",
                    Value = winner_signature_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "winner_name",
                    Size = 30,
                    Value = winner_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "winner_address",
                    Size = 255,
                    Value = winner_address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "winner_phone",
                    Size = 20,
                    Value = winner_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "winner_signature",
                    Size = 5000,
                    Value = winner_signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "witness_signature_id",
                    Value = witness_signature_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "witness_name",
                    Size = 30,
                    Value = witness_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "witness_licence",
                    Size = 25,
                    Value = witness_licence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "witness_signature",
                    Size = 5000,
                    Value = witness_signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "manager_signature_id",
                    Value = manager_signature_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "manager_name",
                    Size = 30,
                    Value = manager_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "manager_licence",
                    Size = 25,
                    Value = manager_licence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "manager_signature",
                    Size = 5000,
                    Value = manager_signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_signature] @site_id, @ticket_number, @egm_serial_number, @transaction_datetime, @user_id, @last_action_datetime, @signature_link_id, @attendant_signature_id, @attendant_name, @attendant_licence, @attendant_signature, @winner_signature_id, @winner_name, @winner_address, @winner_phone, @winner_signature, @witness_signature_id, @witness_name, @witness_licence, @witness_signature, @manager_signature_id, @manager_name, @manager_licence, @manager_signature", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_signature_v2Async(short? site_id, decimal? ticket_number, int? egm_serial_number, DateTime? transaction_datetime, string user_id, DateTime? last_action_datetime, Guid? signature_link_id, Guid? attendant_signature_id, string attendant_name, string attendant_licence, string attendant_signature, Guid? winner_signature_id, string winner_name, string winner_address, string winner_phone, string winner_signature, Guid? witness_signature_id, string witness_name, string witness_licence, string witness_signature, Guid? manager_signature_id, string manager_name, string manager_licence, string manager_signature, short? source_device_type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_datetime",
                    Value = last_action_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "signature_link_id",
                    Value = signature_link_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_signature_id",
                    Value = attendant_signature_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_name",
                    Size = 30,
                    Value = attendant_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_licence",
                    Size = 25,
                    Value = attendant_licence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "attendant_signature",
                    Size = 5000,
                    Value = attendant_signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "winner_signature_id",
                    Value = winner_signature_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "winner_name",
                    Size = 30,
                    Value = winner_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "winner_address",
                    Size = 255,
                    Value = winner_address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "winner_phone",
                    Size = 20,
                    Value = winner_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "winner_signature",
                    Size = 5000,
                    Value = winner_signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "witness_signature_id",
                    Value = witness_signature_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "witness_name",
                    Size = 30,
                    Value = witness_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "witness_licence",
                    Size = 25,
                    Value = witness_licence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "witness_signature",
                    Size = 5000,
                    Value = witness_signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "manager_signature_id",
                    Value = manager_signature_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "manager_name",
                    Size = 30,
                    Value = manager_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "manager_licence",
                    Size = 25,
                    Value = manager_licence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "manager_signature",
                    Size = 5000,
                    Value = manager_signature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "source_device_type",
                    Value = source_device_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_signature_v2] @site_id, @ticket_number, @egm_serial_number, @transaction_datetime, @user_id, @last_action_datetime, @signature_link_id, @attendant_signature_id, @attendant_name, @attendant_licence, @attendant_signature, @winner_signature_id, @winner_name, @winner_address, @winner_phone, @winner_signature, @witness_signature_id, @witness_name, @witness_licence, @witness_signature, @manager_signature_id, @manager_name, @manager_licence, @manager_signature, @source_device_type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_siteAsync(short? id, int? licence_num, string licence_name, string premises, string address, string locality, string state, string country, string post_code, string contact_name, string phone, string fax, string pager, string mobile, string email, string lic_op, short? app_egm_nums, string lic_type, string lic_status, DateTime? lic_date, DateTime? expiry_date, string stat_div, int? app_loc_id, string jurisdiction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "licence_num",
                    Value = licence_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "licence_name",
                    Size = 60,
                    Value = licence_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "premises",
                    Size = 60,
                    Value = premises ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 60,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Size = 30,
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 50,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "contact_name",
                    Size = 40,
                    Value = contact_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phone",
                    Size = 20,
                    Value = phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fax",
                    Size = 20,
                    Value = fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pager",
                    Size = 20,
                    Value = pager ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_op",
                    Size = 30,
                    Value = lic_op ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "app_egm_nums",
                    Value = app_egm_nums ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "lic_type",
                    Size = 4,
                    Value = lic_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_status",
                    Size = 4,
                    Value = lic_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_date",
                    Value = lic_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stat_div",
                    Size = 4,
                    Value = stat_div ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "app_loc_id",
                    Value = app_loc_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction",
                    Size = 20,
                    Value = jurisdiction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site] @id, @licence_num, @licence_name, @premises, @address, @locality, @state, @country, @post_code, @contact_name, @phone, @fax, @pager, @mobile, @email, @lic_op, @app_egm_nums, @lic_type, @lic_status, @lic_date, @expiry_date, @stat_div, @app_loc_id, @jurisdiction", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_drop_varianceAsync(short? site_id, DateTime? start_datetime, string entry_type, int? variance, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "entry_type",
                    Size = 255,
                    Value = entry_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "variance",
                    Value = variance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_drop_variance] @site_id, @start_datetime, @entry_type, @variance, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_group_memberAsync(byte? gp_host_sys, short? mem_site, short? gp_host_site, string receive_replicated_data_flag, string primary_site_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "gp_host_sys",
                    Value = gp_host_sys ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "mem_site",
                    Value = mem_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "gp_host_site",
                    Value = gp_host_site ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "receive_replicated_data_flag",
                    Size = 1,
                    Value = receive_replicated_data_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "primary_site_flag",
                    Size = 1,
                    Value = primary_site_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_group_member] @gp_host_sys, @mem_site, @gp_host_site, @receive_replicated_data_flag, @primary_site_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_hourly_summaryAsync(short? site_id, DateTime? snapshot_datetime, int? turnover, int? head_count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "snapshot_datetime",
                    Value = snapshot_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "head_count",
                    Value = head_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_hourly_summary] @site_id, @snapshot_datetime, @turnover, @head_count", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_hourly_summary_v2Async(short? site_id, DateTime? snapshot_datetime, int? turnover, int? head_count, int? all_wins, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "snapshot_datetime",
                    Value = snapshot_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "head_count",
                    Value = head_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "all_wins",
                    Value = all_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_hourly_summary_v2] @site_id, @snapshot_datetime, @turnover, @head_count, @all_wins", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_hourly_summary_v3Async(short? site_id, DateTime? snapshot_datetime, int? turnover, int? head_count, int? all_wins, int? cash_clearance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "snapshot_datetime",
                    Value = snapshot_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "head_count",
                    Value = head_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "all_wins",
                    Value = all_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_clearance",
                    Value = cash_clearance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_hourly_summary_v3] @site_id, @snapshot_datetime, @turnover, @head_count, @all_wins, @cash_clearance", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_hourly_summary_v4Async(short? site_id, DateTime? snapshot_datetime, int? turnover, int? head_count, int? all_wins, int? cash_clearance, byte? denomination_id, int? stroke, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "snapshot_datetime",
                    Value = snapshot_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "turnover",
                    Value = turnover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "head_count",
                    Value = head_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "all_wins",
                    Value = all_wins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cash_clearance",
                    Value = cash_clearance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "stroke",
                    Value = stroke ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_hourly_summary_v4] @site_id, @snapshot_datetime, @turnover, @head_count, @all_wins, @cash_clearance, @denomination_id, @stroke", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_points_conversionAsync(short? site_id, byte? system_site_track_type_id_from, byte? system_site_track_type_id_to, short? rate_from, short? rate_to, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_site_track_type_id_from",
                    Value = system_site_track_type_id_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_site_track_type_id_to",
                    Value = system_site_track_type_id_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "rate_from",
                    Value = rate_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "rate_to",
                    Value = rate_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_points_conversion] @site_id, @system_site_track_type_id_from, @system_site_track_type_id_to, @rate_from, @rate_to", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_serial_numberAsync(short? site_id, int? old_serial_number, int? new_serial_number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "old_serial_number",
                    Value = old_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "new_serial_number",
                    Value = new_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_serial_number] @site_id, @old_serial_number, @new_serial_number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_site_v2Async(short? id, int? licence_num, string licence_name, string premises, string address, string locality, string state, string country, string post_code, string contact_name, string phone, string fax, string pager, string mobile, string email, string lic_op, short? app_egm_nums, string lic_type, string lic_status, DateTime? lic_date, DateTime? expiry_date, string stat_div, int? app_loc_id, string jurisdiction, short? jurisdiction_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "licence_num",
                    Value = licence_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "licence_name",
                    Size = 60,
                    Value = licence_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "premises",
                    Size = 60,
                    Value = premises ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 60,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locality",
                    Size = 30,
                    Value = locality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Size = 30,
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Size = 50,
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "post_code",
                    Size = 10,
                    Value = post_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "contact_name",
                    Size = 40,
                    Value = contact_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phone",
                    Size = 20,
                    Value = phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "fax",
                    Size = 20,
                    Value = fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pager",
                    Size = 20,
                    Value = pager ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 20,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 255,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_op",
                    Size = 30,
                    Value = lic_op ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "app_egm_nums",
                    Value = app_egm_nums ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "lic_type",
                    Size = 4,
                    Value = lic_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_status",
                    Size = 4,
                    Value = lic_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lic_date",
                    Value = lic_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "expiry_date",
                    Value = expiry_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "stat_div",
                    Size = 4,
                    Value = stat_div ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "app_loc_id",
                    Value = app_loc_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction",
                    Size = 20,
                    Value = jurisdiction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction_id",
                    Value = jurisdiction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_site_v2] @id, @licence_num, @licence_name, @premises, @address, @locality, @state, @country, @post_code, @contact_name, @phone, @fax, @pager, @mobile, @email, @lic_op, @app_egm_nums, @lic_type, @lic_status, @lic_date, @expiry_date, @stat_div, @app_loc_id, @jurisdiction, @jurisdiction_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_spend_reward_criterionAsync(decimal? id, short? css_site_id, int? rating_grade_id, short? tracking_type_id, short? spend_reward_reset_timer_id, int? points_value, int? spend_value, short? repeat_count, string enabled_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "spend_reward_reset_timer_id",
                    Value = spend_reward_reset_timer_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "points_value",
                    Value = points_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "spend_value",
                    Value = spend_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "repeat_count",
                    Value = repeat_count ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_spend_reward_criterion] @id, @css_site_id, @rating_grade_id, @tracking_type_id, @spend_reward_reset_timer_id, @points_value, @spend_value, @repeat_count, @enabled_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_ssanAsync(int? egm_ser_num, string sw_set_app, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sw_set_app",
                    Size = 10,
                    Value = sw_set_app ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_ssan] @egm_ser_num, @sw_set_app", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_state_provinceAsync(int? id, int? country, string desc, string iso_code, string phone_prefix, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "country",
                    Value = country ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "desc",
                    Size = 30,
                    Value = desc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iso_code",
                    Size = 10,
                    Value = iso_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phone_prefix",
                    Size = 10,
                    Value = phone_prefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_state_province] @id, @country, @desc, @iso_code, @phone_prefix, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_suspend_card_statusAsync(decimal? card_id, string card_status_from, string card_status_to, DateTime? suspend_start_datetime, DateTime? suspend_end_datetime, DateTime? last_modified_datetime, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Precision = 18,
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_status_from",
                    Size = 10,
                    Value = card_status_from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "card_status_to",
                    Size = 10,
                    Value = card_status_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "suspend_start_datetime",
                    Value = suspend_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "suspend_end_datetime",
                    Value = suspend_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_modified_datetime",
                    Value = last_modified_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_suspend_card_status] @card_id, @card_status_from, @card_status_to, @suspend_start_datetime, @suspend_end_datetime, @last_modified_datetime, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_system_siteAsync(short? css_site_id, byte? system_id, short? site_id, string lic_op, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "lic_op",
                    Size = 30,
                    Value = lic_op ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_system_site] @css_site_id, @system_id, @site_id, @lic_op, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_system_site_track_typeAsync(int? id, byte? system_id, short? site_id, byte? track_type, string disp_name, byte? period_type, short? aging_per, DateTime? first_date, string gemini_disp, string group_flag, decimal? mon_unit, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "disp_name",
                    Size = 30,
                    Value = disp_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "period_type",
                    Value = period_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "aging_per",
                    Value = aging_per ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "first_date",
                    Value = first_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gemini_disp",
                    Size = 1,
                    Value = gemini_disp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "group_flag",
                    Size = 1,
                    Value = group_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mon_unit",
                    Precision = 18,
                    Value = mon_unit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_system_site_track_type] @id, @system_id, @site_id, @track_type, @disp_name, @period_type, @aging_per, @first_date, @gemini_disp, @group_flag, @mon_unit, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_system_site_track_type_v2Async(int? id, byte? system_id, short? site_id, byte? track_type, string disp_name, byte? period_type, short? aging_per, DateTime? first_date, string gemini_disp, string group_flag, decimal? mon_unit, string kiosk_display_flag, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "disp_name",
                    Size = 30,
                    Value = disp_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "period_type",
                    Value = period_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "aging_per",
                    Value = aging_per ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "first_date",
                    Value = first_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "gemini_disp",
                    Size = 1,
                    Value = gemini_disp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "group_flag",
                    Size = 1,
                    Value = group_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mon_unit",
                    Precision = 18,
                    Value = mon_unit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "kiosk_display_flag",
                    Size = 1,
                    Value = kiosk_display_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_system_site_track_type_v2] @id, @system_id, @site_id, @track_type, @disp_name, @period_type, @aging_per, @first_date, @gemini_disp, @group_flag, @mon_unit, @kiosk_display_flag, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_tax_rateAsync(int? id, int? gm_type, int? jurisdiction_id, string rate_type, decimal? rate, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "gm_type",
                    Value = gm_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jurisdiction_id",
                    Value = jurisdiction_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rate_type",
                    Size = 10,
                    Value = rate_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rate",
                    Precision = 10,
                    Scale = 3,
                    Value = rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_tax_rate] @id, @gm_type, @jurisdiction_id, @rate_type, @rate, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_ticket_autopay_failedAsync(short? site_id, decimal? tick_num, int? egm_ser_num, DateTime? trans_dt, string trans_type, string trans_stat, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tick_num",
                    Precision = 12,
                    Value = tick_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_ser_num",
                    Value = egm_ser_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_dt",
                    Value = trans_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_stat",
                    Size = 20,
                    Value = trans_stat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_ticket_autopay_failed] @site_id, @tick_num, @egm_ser_num, @trans_dt, @trans_type, @trans_stat", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_tito_ticket_transaction_summaryAsync(short? site_id, int? egm_serial_number, short? summary_level, DateTime? transaction_datetime, short? tito_ticket_transaction_type_id, short? tito_implementation_type_id, short? floor, short? bank, short? position, string ssan, short? denomination_id, int? amount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "summary_level",
                    Value = summary_level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tito_ticket_transaction_type_id",
                    Value = tito_ticket_transaction_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "tito_implementation_type_id",
                    Value = tito_implementation_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "floor",
                    Value = floor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "bank",
                    Value = bank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "position",
                    Value = position ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ssan",
                    Size = 10,
                    Value = ssan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "denomination_id",
                    Value = denomination_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_tito_ticket_transaction_summary] @site_id, @egm_serial_number, @summary_level, @transaction_datetime, @tito_ticket_transaction_type_id, @tito_implementation_type_id, @floor, @bank, @position, @ssan, @denomination_id, @amount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_tokenAsync(short? id, string representation, int? base_currency_value, int? standard_weight, int? calibrated_weight, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "representation",
                    Size = 8,
                    Value = representation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "base_currency_value",
                    Value = base_currency_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "standard_weight",
                    Value = standard_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "calibrated_weight",
                    Value = calibrated_weight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_token] @id, @representation, @base_currency_value, @standard_weight, @calibrated_weight, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_track_type_permissionAsync(int? track_id, byte? trans_id, byte? system_id, short? site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "track_id",
                    Value = track_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_track_type_permission] @track_id, @trans_id, @system_id, @site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_turnover_thrd_groupAsync(int? id, string description, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_turnover_thrd_group] @id, @description, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_turnover_thresholdAsync(int? id, int? turnover_threshold_group_id, int? start_range, int? end_range, string rate, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "turnover_threshold_group_id",
                    Value = turnover_threshold_group_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "start_range",
                    Value = start_range ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "end_range",
                    Value = end_range ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rate",
                    Size = 18,
                    Value = rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_turnover_threshold] @id, @turnover_threshold_group_id, @start_range, @end_range, @rate, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<update_voucherResult>> update_voucherAsync(short? site_id, decimal? ticket_number, decimal? barcode, string new_trans_status, DateTime? last_action_datetime, int? redemption_amount, string user_id, short? terminal_type_id, decimal? network_device_id, string source, string terminal_id, bool? rounding_validation, bool? short_pay_rounding, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "barcode",
                    Precision = 18,
                    Value = barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "new_trans_status",
                    Size = 20,
                    Value = new_trans_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_datetime",
                    Value = last_action_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "redemption_amount",
                    Value = redemption_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "terminal_type_id",
                    Value = terminal_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "network_device_id",
                    Precision = 18,
                    Value = network_device_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "source",
                    Size = 101,
                    Value = source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "terminal_id",
                    Size = 81,
                    Value = terminal_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rounding_validation",
                    Value = rounding_validation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "short_pay_rounding",
                    Value = short_pay_rounding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<update_voucherResult>("EXEC @returnValue = [dbo].[update_voucher] @site_id, @ticket_number, @barcode, @new_trans_status, @last_action_datetime, @redemption_amount, @user_id, @terminal_type_id, @network_device_id, @source, @terminal_id, @rounding_validation, @short_pay_rounding", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_voucher_configAsync(short? site_id, int? voucher_type_id, int? min_payout, string manual, int? copies, string comment_1, string comment_2, string comment_3, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "voucher_type_id",
                    Value = voucher_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "min_payout",
                    Value = min_payout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "manual",
                    Size = 1,
                    Value = manual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "copies",
                    Value = copies ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment_1",
                    Size = 100,
                    Value = comment_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_2",
                    Size = 100,
                    Value = comment_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "comment_3",
                    Size = 100,
                    Value = comment_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_voucher_config] @site_id, @voucher_type_id, @min_payout, @manual, @copies, @comment_1, @comment_2, @comment_3", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_voucher_sig_configAsync(int? id, short? site_id, int? voucher_type_id, string description, int? min_value, int? max_value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "voucher_type_id",
                    Value = voucher_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "min_value",
                    Value = min_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_value",
                    Value = max_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_voucher_sig_config] @id, @site_id, @voucher_type_id, @description, @min_value, @max_value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_voucher_signatureAsync(short? site_id, int? voucher_type_id, int? config_id, int? row_number, int? col_number, string signature_label, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "voucher_type_id",
                    Value = voucher_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "config_id",
                    Value = config_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "row_number",
                    Value = row_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "col_number",
                    Value = col_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "signature_label",
                    Size = 20,
                    Value = signature_label ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_voucher_signature] @site_id, @voucher_type_id, @config_id, @row_number, @col_number, @signature_label", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_voucher_statusAsync(decimal? id, string status, DateTime? last_mod, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_mod",
                    Value = last_mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_voucher_status] @id, @status, @last_mod, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_wa_poolAsync(short? site_id, int? pool_number, string pool_type, string pool_name, int? reset, int? max_val, float? inc, DateTime? created, DateTime? retired, int? current_value, DateTime? curr_val_logged_dt, DateTime? last_hit, string wghted_flag, int? current_fill_value, int? current_overflow, string prze_share, int? update_time, string sub_type, string status, int? max_autopay, int? prize_value, double? total_rtp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_type",
                    Size = 8,
                    Value = pool_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_val",
                    Value = max_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inc",
                    Value = inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Real,
                },
                new SqlParameter
                {
                    ParameterName = "created",
                    Value = created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "retired",
                    Value = retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "current_value",
                    Value = current_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "curr_val_logged_dt",
                    Value = curr_val_logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_hit",
                    Value = last_hit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "current_fill_value",
                    Value = current_fill_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "current_overflow",
                    Value = current_overflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "update_time",
                    Value = update_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sub_type",
                    Size = 8,
                    Value = sub_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_autopay",
                    Value = max_autopay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_wa_pool] @site_id, @pool_number, @pool_type, @pool_name, @reset, @max_val, @inc, @created, @retired, @current_value, @curr_val_logged_dt, @last_hit, @wghted_flag, @current_fill_value, @current_overflow, @prze_share, @update_time, @sub_type, @status, @max_autopay, @prize_value, @total_rtp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_wa_pool_v2Async(short? site_id, int? pool_number, string pool_type, string pool_name, int? reset, int? max_val, float? inc, DateTime? created, DateTime? retired, int? current_value, DateTime? curr_val_logged_dt, DateTime? last_hit, string wghted_flag, int? current_fill_value, int? current_overflow, string prze_share, int? update_time, string sub_type, string status, int? max_autopay, int? prize_value, double? total_rtp, double? auxiliary_rtp, string level_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "pool_number",
                    Value = pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pool_type",
                    Size = 8,
                    Value = pool_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pool_name",
                    Size = 30,
                    Value = pool_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reset",
                    Value = reset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "max_val",
                    Value = max_val ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inc",
                    Value = inc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Real,
                },
                new SqlParameter
                {
                    ParameterName = "created",
                    Value = created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "retired",
                    Value = retired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "current_value",
                    Value = current_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "curr_val_logged_dt",
                    Value = curr_val_logged_dt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "last_hit",
                    Value = last_hit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "wghted_flag",
                    Size = 1,
                    Value = wghted_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "current_fill_value",
                    Value = current_fill_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "current_overflow",
                    Value = current_overflow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prze_share",
                    Size = 1,
                    Value = prze_share ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "update_time",
                    Value = update_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sub_type",
                    Size = 8,
                    Value = sub_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 1,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "max_autopay",
                    Value = max_autopay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prize_value",
                    Value = prize_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total_rtp",
                    Value = total_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "auxiliary_rtp",
                    Value = auxiliary_rtp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "level_name",
                    Size = 16,
                    Value = level_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_wa_pool_v2] @site_id, @pool_number, @pool_type, @pool_name, @reset, @max_val, @inc, @created, @retired, @current_value, @curr_val_logged_dt, @last_hit, @wghted_flag, @current_fill_value, @current_overflow, @prze_share, @update_time, @sub_type, @status, @max_autopay, @prize_value, @total_rtp, @auxiliary_rtp, @level_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_wab_group_memberAsync(short? group_site_id, short? member_site_id, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group_site_id",
                    Value = group_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "member_site_id",
                    Value = member_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_wab_group_member] @group_site_id, @member_site_id, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_win_reward_conversionAsync(short? css_site_id, decimal? win_reward_criterion_id, int? rating_grade_id, short? tracking_type_id, short? conversion_rate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "win_reward_criterion_id",
                    Precision = 18,
                    Value = win_reward_criterion_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "rating_grade_id",
                    Value = rating_grade_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "conversion_rate",
                    Value = conversion_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_win_reward_conversion] @css_site_id, @win_reward_criterion_id, @rating_grade_id, @tracking_type_id, @conversion_rate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_win_reward_criterionAsync(decimal? id, short? css_site_id, string description, int? minimum_win_threshold, short? tracking_type_id, string colour, string enabled_flag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Precision = 18,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minimum_win_threshold",
                    Value = minimum_win_threshold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tracking_type_id",
                    Value = tracking_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "colour",
                    Size = 20,
                    Value = colour ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "enabled_flag",
                    Size = 1,
                    Value = enabled_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_win_reward_criterion] @id, @css_site_id, @description, @minimum_win_threshold, @tracking_type_id, @colour, @enabled_flag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_working_setAsync(string set_name, string set_type, string fallback, string prerun, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "set_name",
                    Size = 30,
                    Value = set_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "set_type",
                    Size = 10,
                    Value = set_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fallback",
                    Size = 30,
                    Value = fallback ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prerun",
                    Size = 30,
                    Value = prerun ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_working_set] @set_name, @set_type, @fallback, @prerun", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> update_zoneAsync(int? id, byte? system_id, short? css_site_id, string description, int? colour, string user_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "css_site_id",
                    Value = css_site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 30,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "colour",
                    Value = colour ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "user_id",
                    Size = 10,
                    Value = user_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[update_zone] @id, @system_id, @css_site_id, @description, @colour, @user_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> validate_account_card_patronAsync(int? card_id, int? transaction_type, byte? track_type, byte? system_id, OutputParameter<string> account_id, OutputParameter<string> patron_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteraccount_id = new SqlParameter
            {
                ParameterName = "account_id",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = account_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterpatron_id = new SqlParameter
            {
                ParameterName = "patron_id",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = patron_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameteraccount_id,
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpatron_id,
                new SqlParameter
                {
                    ParameterName = "transaction_type",
                    Value = transaction_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[validate_account_card_patron] @account_id OUTPUT, @card_id, @patron_id OUTPUT, @transaction_type, @track_type, @system_id", sqlParameters, cancellationToken);

            account_id.SetValue(parameteraccount_id.Value);
            patron_id.SetValue(parameterpatron_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> validate_ALH_site_card_memberAsync(string card_id, int? membership_id, string transaction_type, OutputParameter<int?> site_id, OutputParameter<string> result, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersite_id = new SqlParameter
            {
                ParameterName = "site_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = site_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterresult = new SqlParameter
            {
                ParameterName = "result",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = result?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parametersite_id,
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Size = 18,
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "membership_id",
                    Value = membership_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_type",
                    Size = 20,
                    Value = transaction_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterresult,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[validate_ALH_site_card_member] @site_id OUTPUT, @card_id, @membership_id, @transaction_type, @result OUTPUT", sqlParameters, cancellationToken);

            site_id.SetValue(parametersite_id.Value);
            result.SetValue(parameterresult.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> validate_cardAsync(int? card_id, string get_patron_flag, byte? system_id, byte? track_type, OutputParameter<string> card_functionality_list, OutputParameter<string> display_name, OutputParameter<string> card_status, OutputParameter<string> patron_name, OutputParameter<string> patron_status, OutputParameter<string> avail_bal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercard_functionality_list = new SqlParameter
            {
                ParameterName = "card_functionality_list",
                Size = 60,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_functionality_list?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterdisplay_name = new SqlParameter
            {
                ParameterName = "display_name",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = display_name?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parametercard_status = new SqlParameter
            {
                ParameterName = "card_status",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = card_status?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterpatron_name = new SqlParameter
            {
                ParameterName = "patron_name",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = patron_name?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterpatron_status = new SqlParameter
            {
                ParameterName = "patron_status",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = patron_status?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameteravail_bal = new SqlParameter
            {
                ParameterName = "avail_bal",
                Size = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = avail_bal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "get_patron_flag",
                    Size = 1,
                    Value = get_patron_flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parametercard_functionality_list,
                parameterdisplay_name,
                parametercard_status,
                parameterpatron_name,
                parameterpatron_status,
                new SqlParameter
                {
                    ParameterName = "system_id",
                    Value = system_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "track_type",
                    Value = track_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameteravail_bal,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[validate_card] @card_id, @get_patron_flag, @card_functionality_list OUTPUT, @display_name OUTPUT, @card_status OUTPUT, @patron_name OUTPUT, @patron_status OUTPUT, @system_id, @track_type, @avail_bal OUTPUT", sqlParameters, cancellationToken);

            card_functionality_list.SetValue(parametercard_functionality_list.Value);
            display_name.SetValue(parameterdisplay_name.Value);
            card_status.SetValue(parametercard_status.Value);
            patron_name.SetValue(parameterpatron_name.Value);
            patron_status.SetValue(parameterpatron_status.Value);
            avail_bal.SetValue(parameteravail_bal.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> validate_egm_transactionAsync(short? site_id, decimal? ticket_number, int? egm_serial_number, DateTime? transaction_datetime, string trans_type, string new_trans_status, DateTime? last_action_datetime, DateTime? ticket_print_datetime, int? amount, string player_id, decimal? linked_ticket_number, int? card_id, OutputParameter<string> current_trans_status, OutputParameter<string> out_duplicate_Flag, OutputParameter<string> out_existing_trans, OutputParameter<string> out_log_revenue, OutputParameter<int?> out_can_cred, OutputParameter<int?> out_hop_fil, OutputParameter<int?> out_short_pays, OutputParameter<int?> out_actual_ticket_out, OutputParameter<int?> current_floor, OutputParameter<int?> current_bank, OutputParameter<int?> current_position, OutputParameter<int?> current_denomination_id, OutputParameter<int?> current_ssan, OutputParameter<int?> current_bgvn, OutputParameter<decimal?> out_card_holder_id, OutputParameter<int?> proc_return_code, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercurrent_trans_status = new SqlParameter
            {
                ParameterName = "current_trans_status",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = current_trans_status?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterout_duplicate_Flag = new SqlParameter
            {
                ParameterName = "out_duplicate_Flag",
                Size = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = out_duplicate_Flag?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterout_existing_trans = new SqlParameter
            {
                ParameterName = "out_existing_trans",
                Size = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = out_existing_trans?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterout_log_revenue = new SqlParameter
            {
                ParameterName = "out_log_revenue",
                Size = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = out_log_revenue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterout_can_cred = new SqlParameter
            {
                ParameterName = "out_can_cred",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = out_can_cred?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterout_hop_fil = new SqlParameter
            {
                ParameterName = "out_hop_fil",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = out_hop_fil?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterout_short_pays = new SqlParameter
            {
                ParameterName = "out_short_pays",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = out_short_pays?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterout_actual_ticket_out = new SqlParameter
            {
                ParameterName = "out_actual_ticket_out",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = out_actual_ticket_out?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercurrent_floor = new SqlParameter
            {
                ParameterName = "current_floor",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = current_floor?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercurrent_bank = new SqlParameter
            {
                ParameterName = "current_bank",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = current_bank?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercurrent_position = new SqlParameter
            {
                ParameterName = "current_position",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = current_position?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercurrent_denomination_id = new SqlParameter
            {
                ParameterName = "current_denomination_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = current_denomination_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercurrent_ssan = new SqlParameter
            {
                ParameterName = "current_ssan",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = current_ssan?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametercurrent_bgvn = new SqlParameter
            {
                ParameterName = "current_bgvn",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = current_bgvn?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterout_card_holder_id = new SqlParameter
            {
                ParameterName = "out_card_holder_id",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = out_card_holder_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterproc_return_code = new SqlParameter
            {
                ParameterName = "proc_return_code",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = proc_return_code?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_number",
                    Precision = 12,
                    Value = ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "egm_serial_number",
                    Value = egm_serial_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transaction_datetime",
                    Value = transaction_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "trans_type",
                    Size = 20,
                    Value = trans_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_trans_status",
                    Size = 20,
                    Value = new_trans_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_action_datetime",
                    Value = last_action_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ticket_print_datetime",
                    Value = ticket_print_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "player_id",
                    Size = 18,
                    Value = player_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linked_ticket_number",
                    Precision = 12,
                    Value = linked_ticket_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "card_id",
                    Value = card_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercurrent_trans_status,
                parameterout_duplicate_Flag,
                parameterout_existing_trans,
                parameterout_log_revenue,
                parameterout_can_cred,
                parameterout_hop_fil,
                parameterout_short_pays,
                parameterout_actual_ticket_out,
                parametercurrent_floor,
                parametercurrent_bank,
                parametercurrent_position,
                parametercurrent_denomination_id,
                parametercurrent_ssan,
                parametercurrent_bgvn,
                parameterout_card_holder_id,
                parameterproc_return_code,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[validate_egm_transaction] @site_id, @ticket_number, @egm_serial_number, @transaction_datetime, @trans_type, @new_trans_status, @last_action_datetime, @ticket_print_datetime, @amount, @player_id, @linked_ticket_number, @card_id, @current_trans_status OUTPUT, @out_duplicate_Flag OUTPUT, @out_existing_trans OUTPUT, @out_log_revenue OUTPUT, @out_can_cred OUTPUT, @out_hop_fil OUTPUT, @out_short_pays OUTPUT, @out_actual_ticket_out OUTPUT, @current_floor OUTPUT, @current_bank OUTPUT, @current_position OUTPUT, @current_denomination_id OUTPUT, @current_ssan OUTPUT, @current_bgvn OUTPUT, @out_card_holder_id OUTPUT, @proc_return_code OUTPUT", sqlParameters, cancellationToken);

            current_trans_status.SetValue(parametercurrent_trans_status.Value);
            out_duplicate_Flag.SetValue(parameterout_duplicate_Flag.Value);
            out_existing_trans.SetValue(parameterout_existing_trans.Value);
            out_log_revenue.SetValue(parameterout_log_revenue.Value);
            out_can_cred.SetValue(parameterout_can_cred.Value);
            out_hop_fil.SetValue(parameterout_hop_fil.Value);
            out_short_pays.SetValue(parameterout_short_pays.Value);
            out_actual_ticket_out.SetValue(parameterout_actual_ticket_out.Value);
            current_floor.SetValue(parametercurrent_floor.Value);
            current_bank.SetValue(parametercurrent_bank.Value);
            current_position.SetValue(parametercurrent_position.Value);
            current_denomination_id.SetValue(parametercurrent_denomination_id.Value);
            current_ssan.SetValue(parametercurrent_ssan.Value);
            current_bgvn.SetValue(parametercurrent_bgvn.Value);
            out_card_holder_id.SetValue(parameterout_card_holder_id.Value);
            proc_return_code.SetValue(parameterproc_return_code.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> validate_tito_voucherAsync(short? site_id, decimal? barcode, short? terminal_type_id, DateTime? request_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "barcode",
                    Precision = 18,
                    Value = barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "terminal_type_id",
                    Value = terminal_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "request_datetime",
                    Value = request_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[validate_tito_voucher] @site_id, @barcode, @terminal_type_id, @request_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> wa_jackpot_deficit_analyserAsync(int? wa_pool_number, DateTime? date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "wa_pool_number",
                    Value = wa_pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[wa_jackpot_deficit_analyser] @wa_pool_number, @date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> wa_jackpot_lvl2_totalsAsync(int? site_id, int? wa_pool_number, int? month_num, int? year, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "site_id",
                    Value = site_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wa_pool_number",
                    Value = wa_pool_number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month_num",
                    Value = month_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[wa_jackpot_lvl2_totals] @site_id, @wa_pool_number, @month_num, @year", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> wed_upd_statsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[wed_upd_stats]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
