// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CougarDb.Models.Cougar.Views;

#nullable disable

namespace CougarDb.Models.Context.Views
{
    public partial class CougarViewContext : DbContext
    {
        public CougarViewContext()
        {
        }

        public CougarViewContext(DbContextOptions<CougarViewContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DbColumnCompatability> DbColumnCompatability { get; set; }
        public virtual DbSet<DbForeignkeysCompatability> DbForeignkeysCompatability { get; set; }
        public virtual DbSet<DbIndexesCompatability> DbIndexesCompatability { get; set; }
        public virtual DbSet<DbTriggersCompatability> DbTriggersCompatability { get; set; }
        public virtual DbSet<Dc0> Dc0 { get; set; }
        public virtual DbSet<Dc0EgmsWithProgressiveControllers> Dc0EgmsWithProgressiveControllers { get; set; }
        public virtual DbSet<Dm0> Dm0 { get; set; }
        public virtual DbSet<Dm0GroupedAdjustments> Dm0GroupedAdjustments { get; set; }
        public virtual DbSet<Dm0TrimmedEgmMetersSummary> Dm0TrimmedEgmMetersSummary { get; set; }
        public virtual DbSet<Dm0WithAdjustments> Dm0WithAdjustments { get; set; }
        public virtual DbSet<EgmsWithReportedMeters> EgmsWithReportedMeters { get; set; }
        public virtual DbSet<Et0> Et0 { get; set; }
        public virtual DbSet<Et0EftRejectionData> Et0EftRejectionData { get; set; }
        public virtual DbSet<Gm0> Gm0 { get; set; }
        public virtual DbSet<Gm0DucmsMachines> Gm0DucmsMachines { get; set; }
        public virtual DbSet<Gm0QcomMachines> Gm0QcomMachines { get; set; }
        public virtual DbSet<Gm0TrimmedEgmGameMetersSummary> Gm0TrimmedEgmGameMetersSummary { get; set; }
        public virtual DbSet<Gm0TrimmedEgmMetersSummary> Gm0TrimmedEgmMetersSummary { get; set; }
        public virtual DbSet<Jc0> Jc0 { get; set; }
        public virtual DbSet<Jg0> Jg0 { get; set; }
        public virtual DbSet<Jl0> Jl0 { get; set; }
        public virtual DbSet<Jl0EgmTriggeredPools> Jl0EgmTriggeredPools { get; set; }
        public virtual DbSet<Jl0JackpotPoolDetails> Jl0JackpotPoolDetails { get; set; }
        public virtual DbSet<Jl0Pools> Jl0Pools { get; set; }
        public virtual DbSet<Jl0RegulatoryAndRandomPools> Jl0RegulatoryAndRandomPools { get; set; }
        public virtual DbSet<Jl0WideAreaPools> Jl0WideAreaPools { get; set; }
        public virtual DbSet<Jm0> Jm0 { get; set; }
        public virtual DbSet<Jm0JackpotCont> Jm0JackpotCont { get; set; }
        public virtual DbSet<Jm0JackpotDayClosingAmount> Jm0JackpotDayClosingAmount { get; set; }
        public virtual DbSet<Jm0JackpotDayHitsAmount> Jm0JackpotDayHitsAmount { get; set; }
        public virtual DbSet<La0> La0 { get; set; }
        public virtual DbSet<Lm0> Lm0 { get; set; }
        public virtual DbSet<Lm0JackpotMonthClosingAmount> Lm0JackpotMonthClosingAmount { get; set; }
        public virtual DbSet<Lm0JackpotMonthHitsAmount> Lm0JackpotMonthHitsAmount { get; set; }
        public virtual DbSet<Lm0JackpotMonthOpeningAmount> Lm0JackpotMonthOpeningAmount { get; set; }
        public virtual DbSet<Lm0JackpotMonthOpeningClosingAmount> Lm0JackpotMonthOpeningClosingAmount { get; set; }
        public virtual DbSet<Lm0JackpotMonthSimultaneousHits> Lm0JackpotMonthSimultaneousHits { get; set; }
        public virtual DbSet<Lm0JackpotMonthSummary> Lm0JackpotMonthSummary { get; set; }
        public virtual DbSet<Lm0JackpotPoolCreatedRetired> Lm0JackpotPoolCreatedRetired { get; set; }
        public virtual DbSet<Lo0> Lo0 { get; set; }
        public virtual DbSet<Ma0> Ma0 { get; set; }
        public virtual DbSet<Ma0AuditCancelledCredits> Ma0AuditCancelledCredits { get; set; }
        public virtual DbSet<Ma0AuditCashlessIn> Ma0AuditCashlessIn { get; set; }
        public virtual DbSet<Ma0AuditCashlessOut> Ma0AuditCashlessOut { get; set; }
        public virtual DbSet<Ma0AuditCentsIn> Ma0AuditCentsIn { get; set; }
        public virtual DbSet<Ma0AuditCentsOut> Ma0AuditCentsOut { get; set; }
        public virtual DbSet<Ma0AuditCoinsIn> Ma0AuditCoinsIn { get; set; }
        public virtual DbSet<Ma0AuditCoinsOut> Ma0AuditCoinsOut { get; set; }
        public virtual DbSet<Ma0AuditCoinsToCashbox> Ma0AuditCoinsToCashbox { get; set; }
        public virtual DbSet<Ma0AuditDollars10> Ma0AuditDollars10 { get; set; }
        public virtual DbSet<Ma0AuditDollars100> Ma0AuditDollars100 { get; set; }
        public virtual DbSet<Ma0AuditDollars20> Ma0AuditDollars20 { get; set; }
        public virtual DbSet<Ma0AuditDollars5> Ma0AuditDollars5 { get; set; }
        public virtual DbSet<Ma0AuditDollars50> Ma0AuditDollars50 { get; set; }
        public virtual DbSet<Ma0AuditHopperRefills> Ma0AuditHopperRefills { get; set; }
        public virtual DbSet<Ma0AuditJackpotWins> Ma0AuditJackpotWins { get; set; }
        public virtual DbSet<Ma0AuditNoteCount> Ma0AuditNoteCount { get; set; }
        public virtual DbSet<Ma0AuditNotesIn> Ma0AuditNotesIn { get; set; }
        public virtual DbSet<Ma0AuditRcrTurnover> Ma0AuditRcrTurnover { get; set; }
        public virtual DbSet<Ma0AuditRcrWins> Ma0AuditRcrWins { get; set; }
        public virtual DbSet<Ma0AuditReportdateCancelledCredits> Ma0AuditReportdateCancelledCredits { get; set; }
        public virtual DbSet<Ma0AuditReportdateCashlessIn> Ma0AuditReportdateCashlessIn { get; set; }
        public virtual DbSet<Ma0AuditReportdateCashlessOut> Ma0AuditReportdateCashlessOut { get; set; }
        public virtual DbSet<Ma0AuditReportdateCentsIn> Ma0AuditReportdateCentsIn { get; set; }
        public virtual DbSet<Ma0AuditReportdateCentsOut> Ma0AuditReportdateCentsOut { get; set; }
        public virtual DbSet<Ma0AuditReportdateCoinsIn> Ma0AuditReportdateCoinsIn { get; set; }
        public virtual DbSet<Ma0AuditReportdateCoinsOut> Ma0AuditReportdateCoinsOut { get; set; }
        public virtual DbSet<Ma0AuditReportdateCoinsToCashbox> Ma0AuditReportdateCoinsToCashbox { get; set; }
        public virtual DbSet<Ma0AuditReportdateDollars10> Ma0AuditReportdateDollars10 { get; set; }
        public virtual DbSet<Ma0AuditReportdateDollars100> Ma0AuditReportdateDollars100 { get; set; }
        public virtual DbSet<Ma0AuditReportdateDollars20> Ma0AuditReportdateDollars20 { get; set; }
        public virtual DbSet<Ma0AuditReportdateDollars5> Ma0AuditReportdateDollars5 { get; set; }
        public virtual DbSet<Ma0AuditReportdateDollars50> Ma0AuditReportdateDollars50 { get; set; }
        public virtual DbSet<Ma0AuditReportdateHopperRefills> Ma0AuditReportdateHopperRefills { get; set; }
        public virtual DbSet<Ma0AuditReportdateJackpotWins> Ma0AuditReportdateJackpotWins { get; set; }
        public virtual DbSet<Ma0AuditReportdateNoteCount> Ma0AuditReportdateNoteCount { get; set; }
        public virtual DbSet<Ma0AuditReportdateNotesIn> Ma0AuditReportdateNotesIn { get; set; }
        public virtual DbSet<Ma0AuditReportdateRcrTurnover> Ma0AuditReportdateRcrTurnover { get; set; }
        public virtual DbSet<Ma0AuditReportdateRcrWins> Ma0AuditReportdateRcrWins { get; set; }
        public virtual DbSet<Ma0AuditReportdateStroke> Ma0AuditReportdateStroke { get; set; }
        public virtual DbSet<Ma0AuditReportdateTurnover> Ma0AuditReportdateTurnover { get; set; }
        public virtual DbSet<Ma0AuditReportdateWins> Ma0AuditReportdateWins { get; set; }
        public virtual DbSet<Ma0AuditStroke> Ma0AuditStroke { get; set; }
        public virtual DbSet<Ma0AuditTurnover> Ma0AuditTurnover { get; set; }
        public virtual DbSet<Ma0AuditWins> Ma0AuditWins { get; set; }
        public virtual DbSet<Ma0ByReportdate> Ma0ByReportdate { get; set; }
        public virtual DbSet<Ma0DateAudit> Ma0DateAudit { get; set; }
        public virtual DbSet<Ma0ReportdateDateAudit> Ma0ReportdateDateAudit { get; set; }
        public virtual DbSet<Mc0> Mc0 { get; set; }
        public virtual DbSet<Mc0JackpotDayContributionsTurnover> Mc0JackpotDayContributionsTurnover { get; set; }
        public virtual DbSet<Mc0JackpotDayHitsAmount> Mc0JackpotDayHitsAmount { get; set; }
        public virtual DbSet<Mc0JackpotMonthContributionsTurnover> Mc0JackpotMonthContributionsTurnover { get; set; }
        public virtual DbSet<Mc0JackpotMonthHitsAmount> Mc0JackpotMonthHitsAmount { get; set; }
        public virtual DbSet<Mc0Monthly> Mc0Monthly { get; set; }
        public virtual DbSet<Mm0> Mm0 { get; set; }
        public virtual DbSet<Mm0DailyMeters> Mm0DailyMeters { get; set; }
        public virtual DbSet<SakuraLicenceReportMonthly> SakuraLicenceReportMonthly { get; set; }
        public virtual DbSet<SiteLicence> SiteLicence { get; set; }
        public virtual DbSet<SjgEgmMetersNoNulls> SjgEgmMetersNoNulls { get; set; }
        public virtual DbSet<Vc0> Vc0 { get; set; }
        public virtual DbSet<Vc0DhDate> Vc0DhDate { get; set; }
        public virtual DbSet<ViewAlhAdjustments> ViewAlhAdjustments { get; set; }
        public virtual DbSet<ViewAlhControlPoints> ViewAlhControlPoints { get; set; }
        public virtual DbSet<ViewAlhEgmaccruals> ViewAlhEgmaccruals { get; set; }
        public virtual DbSet<ViewAlhMemberDetails> ViewAlhMemberDetails { get; set; }
        public virtual DbSet<ViewAlhPromotions> ViewAlhPromotions { get; set; }
        public virtual DbSet<ViewAlhRedemptions> ViewAlhRedemptions { get; set; }
        public virtual DbSet<ViewAlhTransfers> ViewAlhTransfers { get; set; }
        public virtual DbSet<ViewAlhTurnoverEgm> ViewAlhTurnoverEgm { get; set; }
        public virtual DbSet<ViewAlhTurnoverPlayer> ViewAlhTurnoverPlayer { get; set; }
        public virtual DbSet<ViewJackpotFloorControl> ViewJackpotFloorControl { get; set; }
        public virtual DbSet<ViewMaxEventEgmMeters> ViewMaxEventEgmMeters { get; set; }
        public virtual DbSet<ViewNetworkDeviceDetails> ViewNetworkDeviceDetails { get; set; }
        public virtual DbSet<ViewPatronAgeGroupLimits> ViewPatronAgeGroupLimits { get; set; }
        public virtual DbSet<ViewPatronDetails> ViewPatronDetails { get; set; }
        public virtual DbSet<ViewPatronExtras> ViewPatronExtras { get; set; }
        public virtual DbSet<ViewPatronMembershipDetails> ViewPatronMembershipDetails { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=AOAGPPD-CGR-P;Initial Catalog=Cougar;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<DbColumnCompatability>(entity =>
            {
                entity.ToView("db_column_compatability");
            });

            modelBuilder.Entity<DbForeignkeysCompatability>(entity =>
            {
                entity.ToView("db_foreignkeys_compatability");
            });

            modelBuilder.Entity<DbIndexesCompatability>(entity =>
            {
                entity.ToView("db_indexes_compatability");
            });

            modelBuilder.Entity<DbTriggersCompatability>(entity =>
            {
                entity.ToView("db_triggers_compatability");
            });

            modelBuilder.Entity<Dc0>(entity =>
            {
                entity.ToView("DC0");

                entity.Property(e => e.CabinetType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OwnerCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Dc0EgmsWithProgressiveControllers>(entity =>
            {
                entity.ToView("DC0_egms_with_progressive_controllers");
            });

            modelBuilder.Entity<Dm0>(entity =>
            {
                entity.ToView("DM0");
            });

            modelBuilder.Entity<Dm0GroupedAdjustments>(entity =>
            {
                entity.ToView("DM0_grouped_adjustments");
            });

            modelBuilder.Entity<Dm0TrimmedEgmMetersSummary>(entity =>
            {
                entity.ToView("DM0_trimmed_egm_meters_summary");
            });

            modelBuilder.Entity<Dm0WithAdjustments>(entity =>
            {
                entity.ToView("DM0_with_adjustments");
            });

            modelBuilder.Entity<EgmsWithReportedMeters>(entity =>
            {
                entity.ToView("EGMs_with_reported_meters");
            });

            modelBuilder.Entity<Et0>(entity =>
            {
                entity.ToView("ET0");

                entity.Property(e => e.Reasons).IsUnicode(false);
            });

            modelBuilder.Entity<Et0EftRejectionData>(entity =>
            {
                entity.ToView("ET0_eft_rejection_data");

                entity.Property(e => e.Reasons).IsUnicode(false);
            });

            modelBuilder.Entity<Gm0>(entity =>
            {
                entity.ToView("GM0");
            });

            modelBuilder.Entity<Gm0DucmsMachines>(entity =>
            {
                entity.ToView("GM0_ducms_machines");
            });

            modelBuilder.Entity<Gm0QcomMachines>(entity =>
            {
                entity.ToView("GM0_qcom_machines");
            });

            modelBuilder.Entity<Gm0TrimmedEgmGameMetersSummary>(entity =>
            {
                entity.ToView("GM0_trimmed_egm_game_meters_summary");
            });

            modelBuilder.Entity<Gm0TrimmedEgmMetersSummary>(entity =>
            {
                entity.ToView("GM0_trimmed_egm_meters_summary");
            });

            modelBuilder.Entity<Jc0>(entity =>
            {
                entity.ToView("JC0");
            });

            modelBuilder.Entity<Jg0>(entity =>
            {
                entity.ToView("JG0");

                entity.Property(e => e.PoolName).IsUnicode(false);
            });

            modelBuilder.Entity<Jl0>(entity =>
            {
                entity.ToView("JL0");

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<Jl0EgmTriggeredPools>(entity =>
            {
                entity.ToView("JL0_egm_triggered_pools");
            });

            modelBuilder.Entity<Jl0JackpotPoolDetails>(entity =>
            {
                entity.ToView("JL0_jackpot_pool_details");
            });

            modelBuilder.Entity<Jl0Pools>(entity =>
            {
                entity.ToView("JL0_pools");
            });

            modelBuilder.Entity<Jl0RegulatoryAndRandomPools>(entity =>
            {
                entity.ToView("JL0_regulatory_and_random_pools");
            });

            modelBuilder.Entity<Jl0WideAreaPools>(entity =>
            {
                entity.ToView("JL0_wide_area_pools");
            });

            modelBuilder.Entity<Jm0>(entity =>
            {
                entity.ToView("JM0");
            });

            modelBuilder.Entity<Jm0JackpotCont>(entity =>
            {
                entity.ToView("JM0_jackpot_cont");
            });

            modelBuilder.Entity<Jm0JackpotDayClosingAmount>(entity =>
            {
                entity.ToView("JM0_jackpot_day_closing_amount");
            });

            modelBuilder.Entity<Jm0JackpotDayHitsAmount>(entity =>
            {
                entity.ToView("JM0_jackpot_day_hits_amount");
            });

            modelBuilder.Entity<La0>(entity =>
            {
                entity.ToView("LA0");
            });

            modelBuilder.Entity<Lm0>(entity =>
            {
                entity.ToView("LM0");
            });

            modelBuilder.Entity<Lm0JackpotMonthClosingAmount>(entity =>
            {
                entity.ToView("LM0_jackpot_month_closing_amount");
            });

            modelBuilder.Entity<Lm0JackpotMonthHitsAmount>(entity =>
            {
                entity.ToView("LM0_jackpot_month_hits_amount");
            });

            modelBuilder.Entity<Lm0JackpotMonthOpeningAmount>(entity =>
            {
                entity.ToView("LM0_jackpot_month_opening_amount");
            });

            modelBuilder.Entity<Lm0JackpotMonthOpeningClosingAmount>(entity =>
            {
                entity.ToView("LM0_jackpot_month_opening_closing_amount");
            });

            modelBuilder.Entity<Lm0JackpotMonthSimultaneousHits>(entity =>
            {
                entity.ToView("LM0_jackpot_month_simultaneous_hits");
            });

            modelBuilder.Entity<Lm0JackpotMonthSummary>(entity =>
            {
                entity.ToView("LM0_jackpot_month_summary");
            });

            modelBuilder.Entity<Lm0JackpotPoolCreatedRetired>(entity =>
            {
                entity.ToView("LM0_jackpot_pool_created_retired");
            });

            modelBuilder.Entity<Lo0>(entity =>
            {
                entity.ToView("LO0");

                entity.Property(e => e.OwnerCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Ma0>(entity =>
            {
                entity.ToView("MA0");
            });

            modelBuilder.Entity<Ma0AuditCancelledCredits>(entity =>
            {
                entity.ToView("MA0_audit_cancelled_credits");
            });

            modelBuilder.Entity<Ma0AuditCashlessIn>(entity =>
            {
                entity.ToView("MA0_audit_cashless_in");
            });

            modelBuilder.Entity<Ma0AuditCashlessOut>(entity =>
            {
                entity.ToView("MA0_audit_cashless_out");
            });

            modelBuilder.Entity<Ma0AuditCentsIn>(entity =>
            {
                entity.ToView("MA0_audit_cents_in");
            });

            modelBuilder.Entity<Ma0AuditCentsOut>(entity =>
            {
                entity.ToView("MA0_audit_cents_out");
            });

            modelBuilder.Entity<Ma0AuditCoinsIn>(entity =>
            {
                entity.ToView("MA0_audit_coins_in");
            });

            modelBuilder.Entity<Ma0AuditCoinsOut>(entity =>
            {
                entity.ToView("MA0_audit_coins_out");
            });

            modelBuilder.Entity<Ma0AuditCoinsToCashbox>(entity =>
            {
                entity.ToView("MA0_audit_coins_to_cashbox");
            });

            modelBuilder.Entity<Ma0AuditDollars10>(entity =>
            {
                entity.ToView("MA0_audit_dollars_10");
            });

            modelBuilder.Entity<Ma0AuditDollars100>(entity =>
            {
                entity.ToView("MA0_audit_dollars_100");
            });

            modelBuilder.Entity<Ma0AuditDollars20>(entity =>
            {
                entity.ToView("MA0_audit_dollars_20");
            });

            modelBuilder.Entity<Ma0AuditDollars5>(entity =>
            {
                entity.ToView("MA0_audit_dollars_5");
            });

            modelBuilder.Entity<Ma0AuditDollars50>(entity =>
            {
                entity.ToView("MA0_audit_dollars_50");
            });

            modelBuilder.Entity<Ma0AuditHopperRefills>(entity =>
            {
                entity.ToView("MA0_audit_hopper_refills");
            });

            modelBuilder.Entity<Ma0AuditJackpotWins>(entity =>
            {
                entity.ToView("MA0_audit_jackpot_wins");
            });

            modelBuilder.Entity<Ma0AuditNoteCount>(entity =>
            {
                entity.ToView("MA0_audit_note_count");
            });

            modelBuilder.Entity<Ma0AuditNotesIn>(entity =>
            {
                entity.ToView("MA0_audit_notes_in");
            });

            modelBuilder.Entity<Ma0AuditRcrTurnover>(entity =>
            {
                entity.ToView("MA0_audit_rcr_turnover");
            });

            modelBuilder.Entity<Ma0AuditRcrWins>(entity =>
            {
                entity.ToView("MA0_audit_rcr_wins");
            });

            modelBuilder.Entity<Ma0AuditReportdateCancelledCredits>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_cancelled_credits");
            });

            modelBuilder.Entity<Ma0AuditReportdateCashlessIn>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_cashless_in");
            });

            modelBuilder.Entity<Ma0AuditReportdateCashlessOut>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_cashless_out");
            });

            modelBuilder.Entity<Ma0AuditReportdateCentsIn>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_cents_in");
            });

            modelBuilder.Entity<Ma0AuditReportdateCentsOut>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_cents_out");
            });

            modelBuilder.Entity<Ma0AuditReportdateCoinsIn>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_coins_in");
            });

            modelBuilder.Entity<Ma0AuditReportdateCoinsOut>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_coins_out");
            });

            modelBuilder.Entity<Ma0AuditReportdateCoinsToCashbox>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_coins_to_cashbox");
            });

            modelBuilder.Entity<Ma0AuditReportdateDollars10>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_dollars_10");
            });

            modelBuilder.Entity<Ma0AuditReportdateDollars100>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_dollars_100");
            });

            modelBuilder.Entity<Ma0AuditReportdateDollars20>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_dollars_20");
            });

            modelBuilder.Entity<Ma0AuditReportdateDollars5>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_dollars_5");
            });

            modelBuilder.Entity<Ma0AuditReportdateDollars50>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_dollars_50");
            });

            modelBuilder.Entity<Ma0AuditReportdateHopperRefills>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_hopper_refills");
            });

            modelBuilder.Entity<Ma0AuditReportdateJackpotWins>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_jackpot_wins");
            });

            modelBuilder.Entity<Ma0AuditReportdateNoteCount>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_note_count");
            });

            modelBuilder.Entity<Ma0AuditReportdateNotesIn>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_notes_in");
            });

            modelBuilder.Entity<Ma0AuditReportdateRcrTurnover>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_rcr_turnover");
            });

            modelBuilder.Entity<Ma0AuditReportdateRcrWins>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_rcr_wins");
            });

            modelBuilder.Entity<Ma0AuditReportdateStroke>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_stroke");
            });

            modelBuilder.Entity<Ma0AuditReportdateTurnover>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_turnover");
            });

            modelBuilder.Entity<Ma0AuditReportdateWins>(entity =>
            {
                entity.ToView("MA0_audit_reportdate_wins");
            });

            modelBuilder.Entity<Ma0AuditStroke>(entity =>
            {
                entity.ToView("MA0_audit_stroke");
            });

            modelBuilder.Entity<Ma0AuditTurnover>(entity =>
            {
                entity.ToView("MA0_audit_turnover");
            });

            modelBuilder.Entity<Ma0AuditWins>(entity =>
            {
                entity.ToView("MA0_audit_wins");
            });

            modelBuilder.Entity<Ma0ByReportdate>(entity =>
            {
                entity.ToView("MA0_by_reportdate");
            });

            modelBuilder.Entity<Ma0DateAudit>(entity =>
            {
                entity.ToView("MA0_date_audit");
            });

            modelBuilder.Entity<Ma0ReportdateDateAudit>(entity =>
            {
                entity.ToView("MA0_reportdate_date_audit");
            });

            modelBuilder.Entity<Mc0>(entity =>
            {
                entity.ToView("MC0");
            });

            modelBuilder.Entity<Mc0JackpotDayContributionsTurnover>(entity =>
            {
                entity.ToView("MC0_jackpot_day_contributions_turnover");
            });

            modelBuilder.Entity<Mc0JackpotDayHitsAmount>(entity =>
            {
                entity.ToView("MC0_jackpot_day_hits_amount");
            });

            modelBuilder.Entity<Mc0JackpotMonthContributionsTurnover>(entity =>
            {
                entity.ToView("MC0_jackpot_month_contributions_turnover");
            });

            modelBuilder.Entity<Mc0JackpotMonthHitsAmount>(entity =>
            {
                entity.ToView("MC0_jackpot_month_hits_amount");
            });

            modelBuilder.Entity<Mc0Monthly>(entity =>
            {
                entity.ToView("MC0_Monthly");
            });

            modelBuilder.Entity<Mm0>(entity =>
            {
                entity.ToView("MM0");
            });

            modelBuilder.Entity<Mm0DailyMeters>(entity =>
            {
                entity.ToView("MM0_daily_meters");
            });

            modelBuilder.Entity<SakuraLicenceReportMonthly>(entity =>
            {
                entity.ToView("SakuraLicenceReport_Monthly");

                entity.Property(e => e.Reg).IsUnicode(false);

                entity.Property(e => e.Venue).IsUnicode(false);
            });

            modelBuilder.Entity<SiteLicence>(entity =>
            {
                entity.ToView("SiteLicence");
            });

            modelBuilder.Entity<SjgEgmMetersNoNulls>(entity =>
            {
                entity.ToView("SJG_EGM_Meters_NoNulls");
            });

            modelBuilder.Entity<Vc0>(entity =>
            {
                entity.ToView("VC0");
            });

            modelBuilder.Entity<Vc0DhDate>(entity =>
            {
                entity.ToView("VC0_dh_date");
            });

            modelBuilder.Entity<ViewAlhAdjustments>(entity =>
            {
                entity.ToView("view_ALH_adjustments");

                entity.Property(e => e.ReasonCode).IsUnicode(false);

                entity.Property(e => e.SessionId).IsUnicode(false);

                entity.Property(e => e.SessionType).IsUnicode(false);
            });

            modelBuilder.Entity<ViewAlhControlPoints>(entity =>
            {
                entity.ToView("view_ALH_control_points");
            });

            modelBuilder.Entity<ViewAlhEgmaccruals>(entity =>
            {
                entity.ToView("view_ALH_EGMAccruals");

                entity.Property(e => e.EgmLocation).IsUnicode(false);

                entity.Property(e => e.GameName).IsUnicode(false);

                entity.Property(e => e.SessionId).IsUnicode(false);

                entity.Property(e => e.SessionType).IsUnicode(false);
            });

            modelBuilder.Entity<ViewAlhMemberDetails>(entity =>
            {
                entity.ToView("view_ALH_member_details");

                entity.Property(e => e.MembershipStatus).IsUnicode(false);

                entity.Property(e => e.PatronGroups).IsUnicode(false);

                entity.Property(e => e.ReasonCode).IsUnicode(false);

                entity.Property(e => e.ReceiveMail)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SessionId).IsUnicode(false);

                entity.Property(e => e.SessionType).IsUnicode(false);
            });

            modelBuilder.Entity<ViewAlhPromotions>(entity =>
            {
                entity.ToView("view_ALH_promotions");

                entity.Property(e => e.SessionId).IsUnicode(false);

                entity.Property(e => e.SessionType).IsUnicode(false);
            });

            modelBuilder.Entity<ViewAlhRedemptions>(entity =>
            {
                entity.ToView("view_ALH_redemptions");

                entity.Property(e => e.RedeemedProductName).IsUnicode(false);

                entity.Property(e => e.SessionId).IsUnicode(false);

                entity.Property(e => e.SessionType).IsUnicode(false);
            });

            modelBuilder.Entity<ViewAlhTransfers>(entity =>
            {
                entity.ToView("view_ALH_transfers");

                entity.Property(e => e.DestinationCardId).IsUnicode(false);

                entity.Property(e => e.DestinationMembershipId).IsUnicode(false);

                entity.Property(e => e.ReasonCode).IsUnicode(false);

                entity.Property(e => e.SessionId).IsUnicode(false);

                entity.Property(e => e.SessionType).IsUnicode(false);
            });

            modelBuilder.Entity<ViewAlhTurnoverEgm>(entity =>
            {
                entity.ToView("view_ALH_turnover_egm");
            });

            modelBuilder.Entity<ViewAlhTurnoverPlayer>(entity =>
            {
                entity.ToView("view_ALH_turnover_player");
            });

            modelBuilder.Entity<ViewJackpotFloorControl>(entity =>
            {
                entity.ToView("view_jackpot_floor_control");

                entity.Property(e => e.FloorControlName).IsUnicode(false);
            });

            modelBuilder.Entity<ViewMaxEventEgmMeters>(entity =>
            {
                entity.ToView("view_Max_event_egm_meters");
            });

            modelBuilder.Entity<ViewNetworkDeviceDetails>(entity =>
            {
                entity.ToView("view_network_device_details");

                entity.Property(e => e.Configuration).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Downloadable)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Enabled)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.NetworkAddress).IsUnicode(false);

                entity.Property(e => e.NetworkDeviceCategory).IsUnicode(false);

                entity.Property(e => e.NetworkDeviceSubcategory).IsUnicode(false);

                entity.Property(e => e.SecurityId).IsUnicode(false);

                entity.Property(e => e.TerminalId).IsUnicode(false);
            });

            modelBuilder.Entity<ViewPatronAgeGroupLimits>(entity =>
            {
                entity.ToView("view_patron_age_group_limits");

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<ViewPatronDetails>(entity =>
            {
                entity.ToView("view_patron_details");

                entity.Property(e => e.ResPostalCode).IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<ViewPatronExtras>(entity =>
            {
                entity.ToView("view_patron_extras");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DetailValue).IsUnicode(false);
            });

            modelBuilder.Entity<ViewPatronMembershipDetails>(entity =>
            {
                entity.ToView("view_patron_membership_details");

                entity.Property(e => e.ResPostalCode).IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}